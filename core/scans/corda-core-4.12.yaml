# Auto-generated by Gradle cementApi task
# DO NOT EDIT THIS FILE MANUALLY
net.corda.core.ClientRelevantError:
  annotations:
    - CordaSerializable
  type: public interface
  extends: []
  interface: true
  methods: {}
net.corda.core.CordaException:
  annotations:
    - CordaSerializable
  type: public class
  extends: java.lang.Exception
  implements:
    - net.corda.core.CordaThrowable
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.CordaOID:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods: {}
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.CordaOID
    R3_ROOT:
      annotation:
        - NotNull
      type: public static final String
      initialised value: 1.3.6.1.4.1.50530
    CORDA_PLATFORM:
      annotation:
        - NotNull
      type: public static final String
      initialised value: 1.3.6.1.4.1.50530.1
    X509_EXTENSION_CORDA_ROLE:
      annotation:
        - NotNull
      type: public static final String
      initialised value: 1.3.6.1.4.1.50530.1.1
    ALIAS_PRIVATE_KEY:
      annotation:
        - NotNull
      type: public static final String
      initialised value: 1.3.6.1.4.1.50530.1.2
net.corda.core.CordaRuntimeException:
  annotations:
    - CordaSerializable
  type: public class
  extends: java.lang.RuntimeException
  implements:
    - net.corda.core.CordaThrowable
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.CordaThrowable:
  annotations:
    - CordaSerializable
  type: public interface
  extends: []
  interface: true
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: String
    setCause(Throwable):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.DoNotImplement:
  annotations: []
  type: public @interface
  interface: false
  methods: {}
net.corda.core.Utils:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    ? doOnError(net.corda.core.messaging.DataFeed<? extends SNAPSHOT, ELEMENT>, kotlin.jvm.functions.Function1<?
      super Throwable, kotlin.Unit>)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.messaging.DataFeed<SNAPSHOT, ELEMENT>"
      params:
        $this$doOnError:
          annotation:
            - NotNull
          type: "net.corda.core.messaging.DataFeed<? extends SNAPSHOT, ELEMENT>"
        action:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super Throwable, kotlin.Unit>"
    ? mapErrors(net.corda.core.messaging.DataFeed<? extends SNAPSHOT, ELEMENT>, kotlin.jvm.functions.Function1<?
      super Throwable, ? extends Throwable>)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.messaging.DataFeed<SNAPSHOT, ELEMENT>"
      params:
        $this$mapErrors:
          annotation:
            - NotNull
          type: "net.corda.core.messaging.DataFeed<? extends SNAPSHOT, ELEMENT>"
        transform:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super Throwable, ? extends Throwable>"
    mapErrors(rx.Observable<ELEMENT>, kotlin.jvm.functions.Function1<? super Throwable, ? extends Throwable>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: rx.Observable<ELEMENT>
      params:
        $this$mapErrors:
          annotation:
            - NotNull
          type: rx.Observable<ELEMENT>
        transform:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super Throwable, ? extends Throwable>"
    toFuture(rx.Observable<T>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.concurrent.CordaFuture<T>
      params:
        $this$toFuture:
          annotation:
            - NotNull
          type: rx.Observable<T>
    toObservable(net.corda.core.concurrent.CordaFuture<? extends A>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: rx.Observable<A>
      params:
        $this$toObservable:
          annotation:
            - NotNull
          type: net.corda.core.concurrent.CordaFuture<? extends A>
net.corda.core.concurrent.ConcurrencyUtils:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    ? firstOf(net.corda.core.concurrent.CordaFuture<? extends V>[], kotlin.jvm.functions.Function1<?
      super net.corda.core.concurrent.CordaFuture<? extends V>, ? extends W>)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.concurrent.CordaFuture<W>
      params:
        futures:
          annotation:
            - NotNull
          type: "net.corda.core.concurrent.CordaFuture<? extends V>[]"
        handler:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super net.corda.core.concurrent.CordaFuture<?\
            \ extends V>, ? extends W>"
    ? match(java.util.concurrent.Future<V>, kotlin.jvm.functions.Function1<? super
      V, ? extends W>, kotlin.jvm.functions.Function1<? super Throwable, ? extends
      W>)
    : annotations: []
      default: false
      type: public static final
      returnType: W
      params:
        $this$match:
          annotation:
            - NotNull
          type: java.util.concurrent.Future<V>
        success:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super V, ? extends W>"
        failure:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super Throwable, ? extends W>"
net.corda.core.concurrent.CordaFuture:
  annotations: []
  type: public interface
  extends:
    - java.util.concurrent.Future
  interface: true
  methods:
    then(kotlin.jvm.functions.Function1<? super net.corda.core.concurrent.CordaFuture<V>, ? extends W>):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        callback:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super net.corda.core.concurrent.CordaFuture<V>,\
            \ ? extends W>"
    toCompletableFuture():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.concurrent.CompletableFuture<V>
net.corda.core.context.Actor:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Actor$Id
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.AuthServiceId
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
    copy(net.corda.core.context.Actor$Id, net.corda.core.context.AuthServiceId, net.corda.core.identity.CordaX500Name):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Actor
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor$Id
        serviceId:
          annotation:
            - NotNull
          type: net.corda.core.context.AuthServiceId
        owningLegalIdentity:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Actor$Id
    getOwningLegalIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
    getServiceId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.AuthServiceId
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    service(String, net.corda.core.identity.CordaX500Name):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.Actor
      params:
        serviceClassName:
          annotation:
            - NotNull
          type: String
        owningLegalIdentity:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.context.Actor$Companion
net.corda.core.context.Actor$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    service(String, net.corda.core.identity.CordaX500Name):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Actor
      params:
        serviceClassName:
          annotation:
            - NotNull
          type: String
        owningLegalIdentity:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
net.corda.core.context.Actor$Id:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Actor$Id
      params:
        value:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getValue():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.context.AuthServiceId:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.AuthServiceId
      params:
        value:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getValue():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.context.InvocationContext:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationOrigin
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Trace
    component3():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.context.Actor
    component4():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.context.Trace
    component5():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.context.Actor
    component6():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<Object>
    component7():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    component8():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.internal.telemetry.SerializedTelemetry
    ? copy(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Actor)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
    ? copy(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Actor,
      java.util.List<?>, String)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        arguments:
          annotation:
            - Nullable
          type: java.util.List<?>
        clientId:
          annotation:
            - Nullable
          type: String
    ? copy(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Actor,
      java.util.List<?>, String, net.corda.core.internal.telemetry.SerializedTelemetry)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        arguments:
          annotation:
            - Nullable
          type: java.util.List<?>
        clientId:
          annotation:
            - Nullable
          type: String
        serializedTelemetry:
          annotation:
            - Nullable
          type: net.corda.core.internal.telemetry.SerializedTelemetry
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getActor():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.context.Actor
    getArguments():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<Object>
    getClientId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    getExternalTrace():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.context.Trace
    getImpersonatedActor():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.context.Actor
    getOrigin():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationOrigin
    getSerializedTelemetry():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.internal.telemetry.SerializedTelemetry
    getTrace():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Trace
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    newInstance(net.corda.core.context.InvocationOrigin):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
    newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
    newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace, net.corda.core.context.Actor):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
    ? newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
    ? newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Actor)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
    ? newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Actor,
      java.util.List<?>)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        arguments:
          annotation:
            - NotNull
          type: java.util.List<?>
    ? newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Actor,
      java.util.List<?>, String)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        arguments:
          annotation:
            - NotNull
          type: java.util.List<?>
        clientId:
          annotation:
            - Nullable
          type: String
    ? newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Actor,
      java.util.List<?>, String, net.corda.core.internal.telemetry.SerializedTelemetry)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        arguments:
          annotation:
            - NotNull
          type: java.util.List<?>
        clientId:
          annotation:
            - Nullable
          type: String
        serializedTelemetry:
          annotation:
            - Nullable
          type: net.corda.core.internal.telemetry.SerializedTelemetry
    ? peer(net.corda.core.identity.CordaX500Name, net.corda.core.context.Trace, net.corda.core.context.Trace,
      net.corda.core.context.Actor)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
    principal():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.Principal
    rpc(net.corda.core.context.Actor):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
    rpc(net.corda.core.context.Actor, net.corda.core.context.Trace):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
    rpc(net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Trace):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
    rpc(net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Trace, net.corda.core.context.Actor):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
    ? rpc(net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Trace,
      net.corda.core.context.Actor, java.util.List<?>)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        arguments:
          annotation:
            - NotNull
          type: java.util.List<?>
    ? rpc(net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Trace,
      net.corda.core.context.Actor, java.util.List<?>, net.corda.core.internal.telemetry.SerializedTelemetry)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        arguments:
          annotation:
            - NotNull
          type: java.util.List<?>
        serializedTelemetry:
          annotation:
            - Nullable
          type: net.corda.core.internal.telemetry.SerializedTelemetry
    scheduled(net.corda.core.contracts.ScheduledStateRef, net.corda.core.context.Trace, net.corda.core.context.Trace):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        scheduledState:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ScheduledStateRef
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
    service(String, net.corda.core.identity.CordaX500Name, net.corda.core.context.Trace, net.corda.core.context.Trace):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        serviceClassName:
          annotation:
            - NotNull
          type: String
        owningLegalIdentity:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
    shell(net.corda.core.context.Trace, net.corda.core.context.Trace):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.InvocationContext
      params:
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.context.InvocationContext$Companion
net.corda.core.context.InvocationContext$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    newInstance(net.corda.core.context.InvocationOrigin):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
    newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
    newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace, net.corda.core.context.Actor):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
    ? newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
    ? newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Actor)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
    ? newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Actor,
      java.util.List<?>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        arguments:
          annotation:
            - NotNull
          type: java.util.List<?>
    ? newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Actor,
      java.util.List<?>, String)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        arguments:
          annotation:
            - NotNull
          type: java.util.List<?>
        clientId:
          annotation:
            - Nullable
          type: String
    ? newInstance(net.corda.core.context.InvocationOrigin, net.corda.core.context.Trace,
      net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Actor,
      java.util.List<?>, String, net.corda.core.internal.telemetry.SerializedTelemetry)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        origin:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationOrigin
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        actor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        arguments:
          annotation:
            - NotNull
          type: java.util.List<?>
        clientId:
          annotation:
            - Nullable
          type: String
        serializedTelemetry:
          annotation:
            - Nullable
          type: net.corda.core.internal.telemetry.SerializedTelemetry
    ? peer(net.corda.core.identity.CordaX500Name, net.corda.core.context.Trace, net.corda.core.context.Trace,
      net.corda.core.context.Actor)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
    rpc(net.corda.core.context.Actor):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
    rpc(net.corda.core.context.Actor, net.corda.core.context.Trace):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
    rpc(net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Trace):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
    rpc(net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Trace, net.corda.core.context.Actor):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
    ? rpc(net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Trace,
      net.corda.core.context.Actor, java.util.List<?>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        arguments:
          annotation:
            - NotNull
          type: java.util.List<?>
    ? rpc(net.corda.core.context.Actor, net.corda.core.context.Trace, net.corda.core.context.Trace,
      net.corda.core.context.Actor, java.util.List<?>, net.corda.core.internal.telemetry.SerializedTelemetry)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
        impersonatedActor:
          annotation:
            - Nullable
          type: net.corda.core.context.Actor
        arguments:
          annotation:
            - NotNull
          type: java.util.List<?>
        serializedTelemetry:
          annotation:
            - Nullable
          type: net.corda.core.internal.telemetry.SerializedTelemetry
    scheduled(net.corda.core.contracts.ScheduledStateRef, net.corda.core.context.Trace, net.corda.core.context.Trace):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        scheduledState:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ScheduledStateRef
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
    service(String, net.corda.core.identity.CordaX500Name, net.corda.core.context.Trace, net.corda.core.context.Trace):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        serviceClassName:
          annotation:
            - NotNull
          type: String
        owningLegalIdentity:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
    shell(net.corda.core.context.Trace, net.corda.core.context.Trace):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
      params:
        trace:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace
        externalTrace:
          annotation:
            - Nullable
          type: net.corda.core.context.Trace
net.corda.core.context.InvocationOrigin:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods:
    principal():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.security.Principal
net.corda.core.context.InvocationOrigin$Peer:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.context.InvocationOrigin
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
    copy(net.corda.core.identity.CordaX500Name):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationOrigin$Peer
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getParty():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    principal():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.security.Principal
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.context.InvocationOrigin$RPC:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.context.InvocationOrigin
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Actor
    copy(net.corda.core.context.Actor):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationOrigin$RPC
      params:
        actor:
          annotation:
            - NotNull
          type: net.corda.core.context.Actor
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getActor():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Actor
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    principal():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.security.Principal
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.context.InvocationOrigin$Scheduled:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.context.InvocationOrigin
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ScheduledStateRef
    copy(net.corda.core.contracts.ScheduledStateRef):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationOrigin$Scheduled
      params:
        scheduledState:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ScheduledStateRef
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getScheduledState():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ScheduledStateRef
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    principal():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.security.Principal
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.context.InvocationOrigin$Service:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.context.InvocationOrigin
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
    copy(String, net.corda.core.identity.CordaX500Name):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationOrigin$Service
      params:
        serviceClassName:
          annotation:
            - NotNull
          type: String
        owningLegalIdentity:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getOwningLegalIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
    getServiceClassName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    principal():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.security.Principal
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.context.InvocationOrigin$Shell:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.context.InvocationOrigin
  implements: []
  interface: false
  methods:
    principal():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.security.Principal
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.context.InvocationOrigin$Shell
net.corda.core.context.Trace:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Trace$InvocationId
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Trace$SessionId
    copy(net.corda.core.context.Trace$InvocationId, net.corda.core.context.Trace$SessionId):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Trace
      params:
        invocationId:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace$InvocationId
        sessionId:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace$SessionId
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getInvocationId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Trace$InvocationId
    getSessionId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Trace$SessionId
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    newInstance(net.corda.core.context.Trace$InvocationId, net.corda.core.context.Trace$SessionId):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.Trace
      params:
        invocationId:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace$InvocationId
        sessionId:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace$SessionId
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.context.Trace$Companion
net.corda.core.context.Trace$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    newInstance(net.corda.core.context.Trace$InvocationId, net.corda.core.context.Trace$SessionId):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Trace
      params:
        invocationId:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace$InvocationId
        sessionId:
          annotation:
            - NotNull
          type: net.corda.core.context.Trace$SessionId
net.corda.core.context.Trace$InvocationId:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.Id<VALUE>
  implements: []
  interface: false
  methods:
    equals(Object):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getEntityType():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    getTimestamp():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    getValue():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: VALUE
    hashCode():
      annotations: []
      default: false
      type: public final
      returnType: int
    newInstance(String, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.Trace$InvocationId
      params:
        value:
          annotation:
            - NotNull
          type: String
        timestamp:
          annotation:
            - NotNull
          type: java.time.Instant
    newInstance(V, String, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.Id<V>
      params:
        value:
          annotation:
            - NotNull
          type: V
        entityType:
          annotation:
            - Nullable
          type: String
        timestamp:
          annotation:
            - NotNull
          type: java.time.Instant
    toString():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.context.Trace$InvocationId$Companion
net.corda.core.context.Trace$InvocationId$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    newInstance(String, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Trace$InvocationId
      params:
        value:
          annotation:
            - NotNull
          type: String
        timestamp:
          annotation:
            - NotNull
          type: java.time.Instant
net.corda.core.context.Trace$SessionId:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.Id<VALUE>
  implements: []
  interface: false
  methods:
    equals(Object):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getEntityType():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    getTimestamp():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    getValue():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: VALUE
    hashCode():
      annotations: []
      default: false
      type: public final
      returnType: int
    newInstance(String, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.context.Trace$SessionId
      params:
        value:
          annotation:
            - NotNull
          type: String
        timestamp:
          annotation:
            - NotNull
          type: java.time.Instant
    newInstance(V, String, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.Id<V>
      params:
        value:
          annotation:
            - NotNull
          type: V
        entityType:
          annotation:
            - Nullable
          type: String
        timestamp:
          annotation:
            - NotNull
          type: java.time.Instant
    toString():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.context.Trace$SessionId$Companion
net.corda.core.context.Trace$SessionId$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    newInstance(String, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.Trace$SessionId
      params:
        value:
          annotation:
            - NotNull
          type: String
        timestamp:
          annotation:
            - NotNull
          type: java.time.Instant
net.corda.core.contracts.AlwaysAcceptAttachmentConstraint:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.contracts.AttachmentConstraint
  interface: false
  methods:
    isSatisfiedBy(net.corda.core.contracts.Attachment):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        attachment:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Attachment
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.AlwaysAcceptAttachmentConstraint
net.corda.core.contracts.Amount:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - java.lang.Comparable
  interface: false
  methods:
    compareTo(net.corda.core.contracts.Amount<T>):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Amount<T>
    component1():
      annotations: []
      default: false
      type: public final
      returnType: long
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.math.BigDecimal
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
    copy(long, java.math.BigDecimal, T):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        quantity:
          annotation: []
          type: long
        displayTokenSize:
          annotation:
            - NotNull
          type: java.math.BigDecimal
        token:
          annotation:
            - NotNull
          type: T
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    fromDecimal(java.math.BigDecimal, T):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        displayQuantity:
          annotation:
            - NotNull
          type: java.math.BigDecimal
        token:
          annotation:
            - NotNull
          type: T
    fromDecimal(java.math.BigDecimal, T, java.math.RoundingMode):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        displayQuantity:
          annotation:
            - NotNull
          type: java.math.BigDecimal
        token:
          annotation:
            - NotNull
          type: T
        rounding:
          annotation:
            - NotNull
          type: java.math.RoundingMode
    getDisplayTokenSize():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.math.BigDecimal
    getDisplayTokenSize(Object):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.math.BigDecimal
      params:
        token:
          annotation:
            - NotNull
          type: Object
    getQuantity():
      annotations: []
      default: false
      type: public final
      returnType: long
    getToken():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    minus(net.corda.core.contracts.Amount<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Amount<T>
    parseCurrency(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.Amount<java.util.Currency>
      params:
        input:
          annotation:
            - NotNull
          type: String
    plus(net.corda.core.contracts.Amount<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Amount<T>
    splitEvenly(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.Amount<T>>
      params:
        partitions:
          annotation: []
          type: int
    sumOrNull(Iterable<net.corda.core.contracts.Amount<T>>):
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        $this$sumOrNull:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.contracts.Amount<T>>
    sumOrThrow(Iterable<net.corda.core.contracts.Amount<T>>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        $this$sumOrThrow:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.contracts.Amount<T>>
    sumOrZero(Iterable<net.corda.core.contracts.Amount<T>>, T):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        $this$sumOrZero:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.contracts.Amount<T>>
        token:
          annotation:
            - NotNull
          type: T
    times(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        other:
          annotation: []
          type: int
    times(long):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        other:
          annotation: []
          type: long
    toDecimal():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.math.BigDecimal
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    zero(T):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        token:
          annotation:
            - NotNull
          type: T
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.Amount$Companion
net.corda.core.contracts.Amount$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    fromDecimal(java.math.BigDecimal, T):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        displayQuantity:
          annotation:
            - NotNull
          type: java.math.BigDecimal
        token:
          annotation:
            - NotNull
          type: T
    fromDecimal(java.math.BigDecimal, T, java.math.RoundingMode):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        displayQuantity:
          annotation:
            - NotNull
          type: java.math.BigDecimal
        token:
          annotation:
            - NotNull
          type: T
        rounding:
          annotation:
            - NotNull
          type: java.math.RoundingMode
    getDisplayTokenSize(Object):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.math.BigDecimal
      params:
        token:
          annotation:
            - NotNull
          type: Object
    parseCurrency(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<java.util.Currency>
      params:
        input:
          annotation:
            - NotNull
          type: String
    sumOrNull(Iterable<net.corda.core.contracts.Amount<T>>):
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        $this$sumOrNull:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.contracts.Amount<T>>
    sumOrThrow(Iterable<net.corda.core.contracts.Amount<T>>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        $this$sumOrThrow:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.contracts.Amount<T>>
    sumOrZero(Iterable<net.corda.core.contracts.Amount<T>>, T):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        $this$sumOrZero:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.contracts.Amount<T>>
        token:
          annotation:
            - NotNull
          type: T
    zero(T):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        token:
          annotation:
            - NotNull
          type: T
net.corda.core.contracts.AmountTransfer:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    apply(java.util.List<? extends net.corda.core.contracts.SourceAndAmount<T, ? extends P>>, Object):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.List<net.corda.core.contracts.SourceAndAmount<T, P>>"
      params:
        balances:
          annotation:
            - NotNull
          type: "java.util.List<? extends net.corda.core.contracts.SourceAndAmount<T,\
            \ ? extends P>>"
        newRef:
          annotation:
            - Nullable
          type: Object
    copy(long, T, P, P):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.contracts.AmountTransfer<T, P>"
      params:
        quantityDelta:
          annotation: []
          type: long
        token:
          annotation:
            - NotNull
          type: T
        source:
          annotation:
            - NotNull
          type: P
        destination:
          annotation:
            - NotNull
          type: P
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    fromDecimal(java.math.BigDecimal, T, P, P):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.contracts.AmountTransfer<T, P>"
      params:
        displayQuantityDelta:
          annotation:
            - NotNull
          type: java.math.BigDecimal
        token:
          annotation:
            - NotNull
          type: T
        source:
          annotation:
            - NotNull
          type: P
        destination:
          annotation:
            - NotNull
          type: P
    fromDecimal(java.math.BigDecimal, T, P, P, java.math.RoundingMode):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.contracts.AmountTransfer<T, P>"
      params:
        displayQuantityDelta:
          annotation:
            - NotNull
          type: java.math.BigDecimal
        token:
          annotation:
            - NotNull
          type: T
        source:
          annotation:
            - NotNull
          type: P
        destination:
          annotation:
            - NotNull
          type: P
        rounding:
          annotation:
            - NotNull
          type: java.math.RoundingMode
    getDestination():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: P
    getQuantityDelta():
      annotations: []
      default: false
      type: public final
      returnType: long
    getSource():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: P
    getToken():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    novate(P):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.List<net.corda.core.contracts.AmountTransfer<T, P>>"
      params:
        centralParty:
          annotation:
            - NotNull
          type: P
    plus(net.corda.core.contracts.AmountTransfer<T, P>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.contracts.AmountTransfer<T, P>"
      params:
        other:
          annotation:
            - NotNull
          type: "net.corda.core.contracts.AmountTransfer<T, P>"
    toDecimal():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.math.BigDecimal
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    zero(T, P, P):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.contracts.AmountTransfer<T, P>"
      params:
        token:
          annotation:
            - NotNull
          type: T
        source:
          annotation:
            - NotNull
          type: P
        destination:
          annotation:
            - NotNull
          type: P
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.AmountTransfer$Companion
net.corda.core.contracts.AmountTransfer$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    fromDecimal(java.math.BigDecimal, T, P, P):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.contracts.AmountTransfer<T, P>"
      params:
        displayQuantityDelta:
          annotation:
            - NotNull
          type: java.math.BigDecimal
        token:
          annotation:
            - NotNull
          type: T
        source:
          annotation:
            - NotNull
          type: P
        destination:
          annotation:
            - NotNull
          type: P
    fromDecimal(java.math.BigDecimal, T, P, P, java.math.RoundingMode):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.contracts.AmountTransfer<T, P>"
      params:
        displayQuantityDelta:
          annotation:
            - NotNull
          type: java.math.BigDecimal
        token:
          annotation:
            - NotNull
          type: T
        source:
          annotation:
            - NotNull
          type: P
        destination:
          annotation:
            - NotNull
          type: P
        rounding:
          annotation:
            - NotNull
          type: java.math.RoundingMode
    zero(T, P, P):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.contracts.AmountTransfer<T, P>"
      params:
        token:
          annotation:
            - NotNull
          type: T
        source:
          annotation:
            - NotNull
          type: P
        destination:
          annotation:
            - NotNull
          type: P
net.corda.core.contracts.Attachment:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.contracts.NamedByHash
  interface: true
  methods:
    extractFile(String, java.io.OutputStream):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        path:
          annotation:
            - NotNull
          type: String
        outputTo:
          annotation:
            - NotNull
          type: java.io.OutputStream
    getId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
    getSignerKeys():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<java.security.PublicKey>
    getSigners():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.identity.Party>
    getSize():
      annotations: []
      default: false
      type: public abstract
      returnType: int
    open():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.io.InputStream
    openAsJAR():
      annotations:
        - NotNull
      default: true
      type: public
      returnType: java.util.jar.JarInputStream
net.corda.core.contracts.AttachmentConstraint:
  annotations:
    - CordaSerializable
  type: public interface
  extends: []
  interface: true
  methods:
    isSatisfiedBy(net.corda.core.contracts.Attachment):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        attachment:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Attachment
net.corda.core.contracts.AttachmentResolutionException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.AutomaticHashConstraint:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.contracts.AttachmentConstraint
  interface: false
  methods:
    isSatisfiedBy(net.corda.core.contracts.Attachment):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        attachment:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Attachment
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.AutomaticHashConstraint
net.corda.core.contracts.AutomaticPlaceholderConstraint:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.contracts.AttachmentConstraint
  interface: false
  methods:
    isSatisfiedBy(net.corda.core.contracts.Attachment):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        attachment:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Attachment
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.AutomaticPlaceholderConstraint
net.corda.core.contracts.BelongsToContract:
  annotations: []
  type: public @interface
  interface: false
  methods:
    value():
      annotations: []
      default: false
      type: public abstract
      returnType: Class<? extends net.corda.core.contracts.Contract>
net.corda.core.contracts.BrokenAttachmentException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAttachmentId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.Command:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.security.PublicKey>
    copy(T, java.util.List<? extends java.security.PublicKey>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Command<T>
      params:
        value:
          annotation:
            - NotNull
          type: T
        signers:
          annotation:
            - NotNull
          type: java.util.List<? extends java.security.PublicKey>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getSigners():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.security.PublicKey>
    getValue():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.CommandAndState:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.CommandData
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.OwnableState
    copy(net.corda.core.contracts.CommandData, net.corda.core.contracts.OwnableState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.CommandAndState
      params:
        command:
          annotation:
            - NotNull
          type: net.corda.core.contracts.CommandData
        ownableState:
          annotation:
            - NotNull
          type: net.corda.core.contracts.OwnableState
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCommand():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.CommandData
    getOwnableState():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.OwnableState
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.CommandData:
  annotations:
    - CordaSerializable
  type: public interface
  extends: []
  interface: true
  methods: {}
net.corda.core.contracts.CommandWithParties:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.security.PublicKey>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.Party>
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
    copy(java.util.List<? extends java.security.PublicKey>, java.util.List<net.corda.core.identity.Party>, T):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.CommandWithParties<T>
      params:
        signers:
          annotation:
            - NotNull
          type: java.util.List<? extends java.security.PublicKey>
        signingParties:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.identity.Party>
        value:
          annotation:
            - NotNull
          type: T
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getSigners():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.security.PublicKey>
    getSigningParties():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.Party>
    getValue():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.ComponentGroupEnum:
  annotations: []
  type: public final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.contracts.ComponentGroupEnum>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.contracts.ComponentGroupEnum
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.contracts.ComponentGroupEnum[]"
net.corda.core.contracts.Contract:
  annotations:
    - CordaSerializable
  type: public interface
  extends: []
  interface: true
  methods:
    verify(net.corda.core.transactions.LedgerTransaction):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        tx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.LedgerTransaction
net.corda.core.contracts.ContractAttachment:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.contracts.Attachment
  interface: false
  methods:
    extractFile(String, java.io.OutputStream):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        path:
          annotation:
            - NotNull
          type: String
        outputTo:
          annotation:
            - NotNull
          type: java.io.OutputStream
    getAdditionalContracts():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<String>
    getAllContracts():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<String>
    getAttachment():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Attachment
    getContract():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getSignerKeys():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<java.security.PublicKey>
    getSigners():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.Party>
    getSize():
      annotations: []
      default: false
      type: public
      returnType: int
    getUploader():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    getVersion():
      annotations: []
      default: false
      type: public final
      returnType: int
    isSigned():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    open():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.io.InputStream
    openAsJAR():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.jar.JarInputStream
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.ContractAttachment$Companion
net.corda.core.contracts.ContractAttachment$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.contracts.ContractState:
  annotations:
    - CordaSerializable
  type: public interface
  extends: []
  interface: true
  methods:
    getParticipants():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
net.corda.core.contracts.ContractsDSL:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    ? requireSingleCommand(java.util.Collection<? extends net.corda.core.contracts.CommandWithParties<?
      extends net.corda.core.contracts.CommandData>>)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.contracts.CommandWithParties<T>
      params:
        "null":
          annotation: []
          type: java.util.Collection<? extends net.corda.core.contracts.CommandWithParties<?
            extends net.corda.core.contracts.CommandData>>
    ? requireSingleCommand(java.util.Collection<? extends net.corda.core.contracts.CommandWithParties<?
      extends net.corda.core.contracts.CommandData>>, Class<C>)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.CommandWithParties<C>
      params:
        $this$requireSingleCommand:
          annotation:
            - NotNull
          type: java.util.Collection<? extends net.corda.core.contracts.CommandWithParties<?
            extends net.corda.core.contracts.CommandData>>
        klass:
          annotation:
            - NotNull
          type: Class<C>
    requireThat(kotlin.jvm.functions.Function1<? super net.corda.core.contracts.Requirements, ? extends R>):
      annotations: []
      default: false
      type: public static final
      returnType: R
      params:
        body:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super net.corda.core.contracts.Requirements,\
            \ ? extends R>"
    ? select(java.util.Collection<? extends net.corda.core.contracts.CommandWithParties<?
      extends net.corda.core.contracts.CommandData>>, Class<C>, java.security.PublicKey,
      net.corda.core.identity.AbstractParty)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.util.List<net.corda.core.contracts.CommandWithParties<C>>
      params:
        $this$select:
          annotation:
            - NotNull
          type: java.util.Collection<? extends net.corda.core.contracts.CommandWithParties<?
            extends net.corda.core.contracts.CommandData>>
        klass:
          annotation:
            - NotNull
          type: Class<C>
        signer:
          annotation:
            - Nullable
          type: java.security.PublicKey
        party:
          annotation:
            - Nullable
          type: net.corda.core.identity.AbstractParty
    ? select(java.util.Collection<? extends net.corda.core.contracts.CommandWithParties<?
      extends net.corda.core.contracts.CommandData>>, Class<C>, java.util.Collection<?
      extends java.security.PublicKey>, java.util.Collection<net.corda.core.identity.Party>)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.util.List<net.corda.core.contracts.CommandWithParties<C>>
      params:
        $this$select:
          annotation:
            - NotNull
          type: java.util.Collection<? extends net.corda.core.contracts.CommandWithParties<?
            extends net.corda.core.contracts.CommandData>>
        klass:
          annotation:
            - NotNull
          type: Class<C>
        signers:
          annotation:
            - Nullable
          type: java.util.Collection<? extends java.security.PublicKey>
        parties:
          annotation:
            - Nullable
          type: java.util.Collection<net.corda.core.identity.Party>
    ? select(java.util.Collection<? extends net.corda.core.contracts.CommandWithParties<?
      extends net.corda.core.contracts.CommandData>>, java.security.PublicKey, net.corda.core.identity.AbstractParty)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: java.util.List<net.corda.core.contracts.CommandWithParties<T>>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.AbstractParty
    ? select(java.util.Collection<? extends net.corda.core.contracts.CommandWithParties<?
      extends net.corda.core.contracts.CommandData>>, java.util.Collection<? extends
      java.security.PublicKey>, java.util.Collection<net.corda.core.identity.Party>)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: java.util.List<net.corda.core.contracts.CommandWithParties<T>>
      params:
        "null":
          annotation: []
          type: java.util.Collection<net.corda.core.identity.Party>
    ? verifyMoveCommand(java.util.List<? extends net.corda.core.contracts.OwnableState>,
      java.util.List<? extends net.corda.core.contracts.CommandWithParties<? extends
      net.corda.core.contracts.CommandData>>)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.contracts.MoveCommand
      params:
        "null":
          annotation: []
          type: java.util.List<? extends net.corda.core.contracts.CommandWithParties<?
            extends net.corda.core.contracts.CommandData>>
net.corda.core.contracts.CordaRotatedKeys:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getKeys():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.RotatedKeys
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.CordaRotatedKeys
net.corda.core.contracts.FungibleAsset:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.contracts.FungibleState
    - net.corda.core.contracts.OwnableState
  interface: true
  methods:
    getAmount():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.Amount<net.corda.core.contracts.Issued<T>>
    getExitKeys():
      annotations:
        - SerializableCalculatedProperty
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<java.security.PublicKey>
    getOwner():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.identity.AbstractParty
    getParticipants():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    withNewOwner(net.corda.core.identity.AbstractParty):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.CommandAndState
      params:
        newOwner:
          annotation:
            - NotNull
          type: net.corda.core.identity.AbstractParty
    ? withNewOwnerAndAmount(net.corda.core.contracts.Amount<net.corda.core.contracts.Issued<T>>,
      net.corda.core.identity.AbstractParty)
    : annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.FungibleAsset<T>
      params:
        newAmount:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Amount<net.corda.core.contracts.Issued<T>>
        newOwner:
          annotation:
            - NotNull
          type: net.corda.core.identity.AbstractParty
net.corda.core.contracts.FungibleState:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.contracts.ContractState
  interface: true
  methods:
    getAmount():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.Amount<T>
    getParticipants():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
net.corda.core.contracts.HashAttachmentConstraint:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.contracts.AttachmentConstraint
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    copy(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.HashAttachmentConstraint
      params:
        attachmentId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAttachmentId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isSatisfiedBy(net.corda.core.contracts.Attachment):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        attachment:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Attachment
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.HashAttachmentConstraint$Companion
net.corda.core.contracts.HashAttachmentConstraint$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    getDisableHashConstraints():
      annotations: []
      default: false
      type: public final
      returnType: boolean
net.corda.core.contracts.InsufficientBalanceException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAmountMissing():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<?>
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.Issued:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PartyAndReference
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: P
    copy(net.corda.core.contracts.PartyAndReference, P):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Issued<P>
      params:
        issuer:
          annotation:
            - NotNull
          type: net.corda.core.contracts.PartyAndReference
        product:
          annotation:
            - NotNull
          type: P
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getIssuer():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PartyAndReference
    getProduct():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: P
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.LegalProseReference:
  annotations: []
  type: public @interface
  interface: false
  methods:
    uri():
      annotations: []
      default: false
      type: public abstract
      returnType: String
net.corda.core.contracts.LinearPointer:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.contracts.ContractState>
  implements: []
  interface: false
  methods:
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getPointer():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.contracts.UniqueIdentifier
    getType():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: Class<T>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isResolved():
      annotations: []
      default: false
      type: public
      returnType: boolean
    resolve(net.corda.core.node.ServiceHub):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
    resolve(net.corda.core.transactions.LedgerTransaction):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        ltx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.LedgerTransaction
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.StatePointer$Companion
net.corda.core.contracts.LinearState:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.contracts.ContractState
  interface: true
  methods:
    getLinearId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.UniqueIdentifier
    getParticipants():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
net.corda.core.contracts.MoveCommand:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.contracts.CommandData
  interface: true
  methods:
    getContract():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: Class<? extends net.corda.core.contracts.Contract>
net.corda.core.contracts.NamedByHash:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
net.corda.core.contracts.NoConstraintPropagation:
  annotations: []
  type: public @interface
  interface: false
  methods: {}
net.corda.core.contracts.OwnableState:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.contracts.ContractState
  interface: true
  methods:
    getOwner():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.identity.AbstractParty
    getParticipants():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    withNewOwner(net.corda.core.identity.AbstractParty):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.CommandAndState
      params:
        newOwner:
          annotation:
            - NotNull
          type: net.corda.core.identity.AbstractParty
net.corda.core.contracts.PartyAndReference:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.AbstractParty
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.OpaqueBytes
    copy(net.corda.core.identity.AbstractParty, net.corda.core.utilities.OpaqueBytes):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PartyAndReference
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.AbstractParty
        reference:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getParty():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.AbstractParty
    getReference():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.OpaqueBytes
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.PrivacySalt:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Comparable<net.corda.core.utilities.ByteSequence>
  implements: []
  interface: false
  methods:
    compareTo(net.corda.core.utilities.ByteSequence):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
    copy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
    copyBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    createFor(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.PrivacySalt
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    getOffset():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[], int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
    of(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    open():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayInputStream
    putTo(java.nio.ByteBuffer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        buffer:
          annotation:
            - NotNull
          type: java.nio.ByteBuffer
    slice(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        start:
          annotation: []
          type: int
        end:
          annotation: []
          type: int
    subSequence(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    take(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        "n":
          annotation: []
          type: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    writeTo(java.io.OutputStream):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        output:
          annotation:
            - NotNull
          type: java.io.OutputStream
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.PrivacySalt$Companion
net.corda.core.contracts.PrivacySalt$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    createFor(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PrivacySalt
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
net.corda.core.contracts.ReferencedStateAndRef:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
    copy(net.corda.core.contracts.StateAndRef<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ReferencedStateAndRef<T>
      params:
        stateAndRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateAndRef<? extends T>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getStateAndRef():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.Requirements:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    using(String, boolean):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        $this$using:
          annotation:
            - NotNull
          type: String
        expr:
          annotation: []
          type: boolean
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.Requirements
net.corda.core.contracts.RotatedKeys:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.serialization.SerializeAsToken
  implements: []
  interface: false
  methods:
    canBeTransitioned(java.security.PublicKey, java.security.PublicKey):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        inputKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
        outputKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    canBeTransitioned(java.security.PublicKey, java.util.List<? extends java.security.PublicKey>):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        inputKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
        outputKeys:
          annotation:
            - NotNull
          type: java.util.List<? extends java.security.PublicKey>
    canBeTransitioned(java.util.List<? extends java.security.PublicKey>, java.util.List<? extends java.security.PublicKey>):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        inputKeys:
          annotation:
            - NotNull
          type: java.util.List<? extends java.security.PublicKey>
        outputKeys:
          annotation:
            - NotNull
          type: java.util.List<? extends java.security.PublicKey>
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.util.List<net.corda.core.crypto.SecureHash>>
    copy(java.util.List<? extends java.util.List<? extends net.corda.core.crypto.SecureHash>>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.RotatedKeys
      params:
        rotatedSigningKeys:
          annotation:
            - NotNull
          type: java.util.List<? extends java.util.List<? extends net.corda.core.crypto.SecureHash>>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getRotatedSigningKeys():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.util.List<net.corda.core.crypto.SecureHash>>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    toToken(net.corda.core.serialization.SerializeAsTokenContext):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.serialization.SingletonSerializationToken
      params:
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializeAsTokenContext
net.corda.core.contracts.RotatedKeysKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods: {}
  fields:
    DEV_CORDAPP_CODE_SIGNING_STR:
      annotation:
        - NotNull
      type: public static final String
      initialised value: AA59D829F2CA8FDDF5ABEA40D815F937E3E54E572B65B93B5C216AE6594E7D6B
    NEW_NON_PROD_CORDAPP_CODE_SIGNING_STR:
      annotation:
        - NotNull
      type: public static final String
      initialised value: B710A80780A12C52DF8A0B4C2247E08907CCA5D0F19AB1E266FE7BAEA9036790
    PROD_CORDAPP_CODE_SIGNING_STR:
      annotation:
        - NotNull
      type: public static final String
      initialised value: EB4989E7F861FEBEC242E6C24CF0B51C41E108D2C4479D296C5570CB8DAD3EE0
    NEW_PROD_CORDAPP_CODE_SIGNING_STR:
      annotation:
        - NotNull
      type: public static final String
      initialised value: 01EFA14B42700794292382C1EEAC9788A26DAFBCCC98992C01D5BC30EEAACD28
net.corda.core.contracts.SchedulableState:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.contracts.ContractState
  interface: true
  methods:
    getParticipants():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    nextScheduledActivity(net.corda.core.contracts.StateRef, net.corda.core.flows.FlowLogicRefFactory):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.ScheduledActivity
      params:
        thisStateRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
        flowLogicRefFactory:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogicRefFactory
net.corda.core.contracts.Scheduled:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getScheduledAt():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.time.Instant
net.corda.core.contracts.ScheduledActivity:
  annotations: []
  type: public final class
  extends: null
  implements:
    - net.corda.core.contracts.Scheduled
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowLogicRef
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    copy(net.corda.core.flows.FlowLogicRef, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ScheduledActivity
      params:
        logicRef:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogicRef
        scheduledAt:
          annotation:
            - NotNull
          type: java.time.Instant
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getLogicRef():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowLogicRef
    getScheduledAt():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.time.Instant
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.ScheduledStateRef:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.contracts.Scheduled
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    copy(net.corda.core.contracts.StateRef, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ScheduledStateRef
      params:
        ref:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
        scheduledAt:
          annotation:
            - NotNull
          type: java.time.Instant
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getRef():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    getScheduledAt():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.time.Instant
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.SignatureAttachmentConstraint:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.contracts.AttachmentConstraint
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
    copy(java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.SignatureAttachmentConstraint
      params:
        key:
          annotation:
            - NotNull
          type: java.security.PublicKey
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getKey():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isSatisfiedBy(net.corda.core.contracts.Attachment):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        attachment:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Attachment
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.SignatureAttachmentConstraint$Companion
net.corda.core.contracts.SignatureAttachmentConstraint$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements:
    - net.corda.core.internal.utilities.Internable
  interface: false
  methods:
    create(java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.SignatureAttachmentConstraint
      params:
        key:
          annotation:
            - NotNull
          type: java.security.PublicKey
    getInterner():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.internal.utilities.PrivateInterner<net.corda.core.contracts.SignatureAttachmentConstraint>
net.corda.core.contracts.SourceAndAmount:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: P
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
    component3():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Object
    copy(P, net.corda.core.contracts.Amount<T>, Object):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.contracts.SourceAndAmount<T, P>"
      params:
        source:
          annotation:
            - NotNull
          type: P
        amount:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Amount<T>
        ref:
          annotation:
            - Nullable
          type: Object
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAmount():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Amount<T>
    getRef():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Object
    getSource():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: P
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.StateAndContract:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(net.corda.core.contracts.ContractState, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndContract
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
        contract:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getContract():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getState():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.StateAndRef:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.TransactionState<T>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    copy(net.corda.core.contracts.TransactionState<? extends T>, net.corda.core.contracts.StateRef):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.TransactionState<? extends T>
        ref:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getRef():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    getState():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.TransactionState<T>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    referenced():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ReferencedStateAndRef<T>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.StatePointer:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods:
    getPointer():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Object
    getType():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Class<T>
    isResolved():
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
    resolve(net.corda.core.node.ServiceHub):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
    resolve(net.corda.core.transactions.LedgerTransaction):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        ltx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.LedgerTransaction
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.StatePointer$Companion
net.corda.core.contracts.StatePointer$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    linearPointer(T, boolean):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.LinearPointer<T>
      params:
        "null":
          annotation: []
          type: boolean
    staticPointer(net.corda.core.contracts.StateAndRef<? extends T>, boolean):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StaticPointer<T>
      params:
        "null":
          annotation: []
          type: boolean
net.corda.core.contracts.StateRef:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component2():
      annotations: []
      default: false
      type: public final
      returnType: int
    copy(net.corda.core.crypto.SecureHash, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
      params:
        txhash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        index:
          annotation: []
          type: int
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getIndex():
      annotations: []
      default: false
      type: public final
      returnType: int
    getTxhash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.StaticPointer:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.contracts.ContractState>
  implements: []
  interface: false
  methods:
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getPointer():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.contracts.StateRef
    getType():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: Class<T>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isResolved():
      annotations: []
      default: false
      type: public
      returnType: boolean
    resolve(net.corda.core.node.ServiceHub):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
    resolve(net.corda.core.transactions.LedgerTransaction):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        ltx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.LedgerTransaction
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.StatePointer$Companion
net.corda.core.contracts.Structures:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    filterStatesOfType(Iterable<? extends net.corda.core.contracts.StateAndRef<? extends net.corda.core.contracts.ContractState>>):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: Iterable<? extends net.corda.core.contracts.StateAndRef<? extends
            net.corda.core.contracts.ContractState>>
    hash(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        $this$hash:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    hash(net.corda.core.contracts.ContractState, String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        $this$hash:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
        algorithm:
          annotation:
            - NotNull
          type: String
    withoutIssuer(net.corda.core.contracts.Amount<net.corda.core.contracts.Issued<T>>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.Amount<T>
      params:
        $this$withoutIssuer:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Amount<net.corda.core.contracts.Issued<T>>
  fields:
    MAX_ISSUER_REF_SIZE:
      annotation: []
      type: public static final int
      initialised value: 512
net.corda.core.contracts.TimeWindow:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods:
    between(java.time.Instant, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.TimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
    contains(java.time.Instant):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        instant:
          annotation:
            - NotNull
          type: java.time.Instant
    fromOnly(java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.TimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
    fromStartAndDuration(java.time.Instant, java.time.Duration):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.TimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    getFromTime():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: java.time.Instant
    getLength():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Duration
    getMidpoint():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: java.time.Instant
    getUntilTime():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: java.time.Instant
    untilOnly(java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.TimeWindow
      params:
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
    withTolerance(java.time.Instant, java.time.Duration):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.contracts.TimeWindow
      params:
        instant:
          annotation:
            - NotNull
          type: java.time.Instant
        tolerance:
          annotation:
            - NotNull
          type: java.time.Duration
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.TimeWindow$Companion
net.corda.core.contracts.TimeWindow$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    between(java.time.Instant, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.TimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
    fromOnly(java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.TimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
    fromStartAndDuration(java.time.Instant, java.time.Duration):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.TimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    untilOnly(java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.TimeWindow
      params:
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
    withTolerance(java.time.Instant, java.time.Duration):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.TimeWindow
      params:
        instant:
          annotation:
            - NotNull
          type: java.time.Instant
        tolerance:
          annotation:
            - NotNull
          type: java.time.Duration
net.corda.core.contracts.TokenizableAssetInfo:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getDisplayTokenSize():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.math.BigDecimal
net.corda.core.contracts.TransactionResolutionException:
  annotations:
    - CordaSerializable
  type: public class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionResolutionException$UnknownParametersException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionState:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    component4():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Integer
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.AttachmentConstraint
    copy(T, String, net.corda.core.identity.Party, Integer, net.corda.core.contracts.AttachmentConstraint):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.TransactionState<T>
      params:
        data:
          annotation:
            - NotNull
          type: T
        contract:
          annotation:
            - NotNull
          type: String
        notary:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        encumbrance:
          annotation:
            - Nullable
          type: Integer
        constraint:
          annotation:
            - NotNull
          type: net.corda.core.contracts.AttachmentConstraint
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getConstraint():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.AttachmentConstraint
    getContract():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getData():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
    getEncumbrance():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Integer
    getNotary():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.contracts.TransactionStateKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.contracts.TransactionVerificationException:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$AttachmentTooBigException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$BrokenTransactionException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$ConflictingAttachmentsRejection:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getContractClass():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$ConstraintPropagationRejection:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getContractClass():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$ContractConstraintRejection:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getContractClass():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$ContractCreationError:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getContractClass():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$ContractRejection:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getContractClass():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$Direction:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.contracts.TransactionVerificationException$Direction>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.contracts.TransactionVerificationException$Direction
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.contracts.TransactionVerificationException$Direction[]"
net.corda.core.contracts.TransactionVerificationException$DuplicateAttachmentsRejection:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAttachmentId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Attachment
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$DuplicateInputStates:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getDuplicates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.NonEmptySet<net.corda.core.contracts.StateRef>
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$InvalidAttachmentException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAttachmentHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$InvalidConstraintRejection:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getContractClass():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getReason():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$InvalidNotaryChange:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$MissingAttachmentRejection:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getContractClass():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$MissingNetworkParametersException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$MoreThanOneNotary:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$NotaryChangeInWrongTransactionType:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOutputNotary():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getTxNotary():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$OverlappingAttachmentsException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getPath():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$PackageOwnershipException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAttachmentHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getInvalidClassName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getPackageName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$SignersMissing:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getMissing():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.security.PublicKey>
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$TransactionContractConflictException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$TransactionDuplicateEncumbranceException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$TransactionMissingEncumbranceException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getInOut():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.TransactionVerificationException$Direction
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getMissing():
      annotations: []
      default: false
      type: public final
      returnType: int
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$TransactionNetworkParameterOrderingException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$TransactionNonMatchingEncumbranceException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$TransactionNotaryMismatchEncumbranceException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$TransactionRequiredContractUnspecifiedException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$UnsupportedClassVersionError:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$UnsupportedHashTypeException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TransactionVerificationException$UntrustedAttachmentsException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.CordaThrowable
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getIds():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.contracts.TypeOnlyCommandData:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements:
    - net.corda.core.contracts.CommandData
  interface: false
  methods:
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
net.corda.core.contracts.UniqueIdentifier:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - java.lang.Comparable
  interface: false
  methods:
    compareTo(net.corda.core.contracts.UniqueIdentifier):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.contracts.UniqueIdentifier
    component1():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.UUID
    copy(String, java.util.UUID):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.UniqueIdentifier
      params:
        externalId:
          annotation:
            - Nullable
          type: String
        id:
          annotation:
            - NotNull
          type: java.util.UUID
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getExternalId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    getId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.UUID
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.UniqueIdentifier$Companion
net.corda.core.contracts.UniqueIdentifier$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    fromString(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.UniqueIdentifier
      params:
        name:
          annotation:
            - NotNull
          type: String
net.corda.core.contracts.UpgradedContract:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.contracts.Contract
  interface: true
  methods:
    getLegacyContract():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: String
    upgrade(OldState):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: NewState
      params:
        state:
          annotation:
            - NotNull
          type: OldState
    verify(net.corda.core.transactions.LedgerTransaction):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        tx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.LedgerTransaction
net.corda.core.contracts.UpgradedContractWithLegacyConstraint:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.contracts.UpgradedContract
  interface: true
  methods:
    getLegacyContract():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: String
    getLegacyContractConstraint():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.AttachmentConstraint
    upgrade(OldState):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: NewState
      params:
        state:
          annotation:
            - NotNull
          type: OldState
    verify(net.corda.core.transactions.LedgerTransaction):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        tx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.LedgerTransaction
net.corda.core.contracts.WhitelistedByZoneAttachmentConstraint:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.contracts.AttachmentConstraint
  interface: false
  methods:
    isSatisfiedBy(net.corda.core.contracts.Attachment):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        attachment:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Attachment
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.contracts.WhitelistedByZoneAttachmentConstraint
net.corda.core.cordapp.Cordapp:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getAllFlows():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<Class<? extends net.corda.core.flows.FlowLogic<?>>>
    getCheckpointCustomSerializers():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "java.util.List<net.corda.core.serialization.CheckpointCustomSerializer<?,\
        \ ?>>"
    getContractClassNames():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<String>
    getCordappClasses():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<String>
    getCustomSchemas():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Set<net.corda.core.schemas.MappedSchema>
    getInfo():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.cordapp.Cordapp$Info
    getInitiatedFlows():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<Class<? extends net.corda.core.flows.FlowLogic<?>>>
    getJarHash():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash$SHA256
    getJarPath():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.net.URL
    getMinimumPlatformVersion():
      annotations: []
      default: false
      type: public abstract
      returnType: int
    getName():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: String
    getRpcFlows():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<Class<? extends net.corda.core.flows.FlowLogic<?>>>
    getSchedulableFlows():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<Class<? extends net.corda.core.flows.FlowLogic<?>>>
    getSerializationCustomSerializers():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "java.util.List<net.corda.core.serialization.SerializationCustomSerializer<?,\
        \ ?>>"
    getSerializationWhitelists():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.serialization.SerializationWhitelist>
    getServiceFlows():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<Class<? extends net.corda.core.flows.FlowLogic<?>>>
    getServices():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<Class<? extends net.corda.core.serialization.SerializeAsToken>>
    getTargetPlatformVersion():
      annotations: []
      default: false
      type: public abstract
      returnType: int
    getTelemetryComponents():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<Class<? extends net.corda.core.internal.telemetry.TelemetryComponent>>
net.corda.core.cordapp.Cordapp$Info:
  annotations: []
  type: public static interface
  extends: []
  interface: true
  methods:
    getLicence():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: String
    getShortName():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: String
    getVendor():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: String
    getVersion():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: String
    hasUnknownFields():
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
net.corda.core.cordapp.Cordapp$Info$Contract:
  annotations: []
  type: public static final class
  extends: null
  implements:
    - net.corda.core.cordapp.Cordapp$Info
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations: []
      default: false
      type: public final
      returnType: int
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(String, String, int, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.cordapp.Cordapp$Info$Contract
      params:
        shortName:
          annotation:
            - NotNull
          type: String
        vendor:
          annotation:
            - NotNull
          type: String
        versionId:
          annotation: []
          type: int
        licence:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getLicence():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getShortName():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getVendor():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getVersion():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getVersionId():
      annotations: []
      default: false
      type: public final
      returnType: int
    hasUnknownFields():
      annotations: []
      default: false
      type: public
      returnType: boolean
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.cordapp.Cordapp$Info$ContractAndWorkflow:
  annotations: []
  type: public static final class
  extends: null
  implements:
    - net.corda.core.cordapp.Cordapp$Info
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.cordapp.Cordapp$Info$Contract
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.cordapp.Cordapp$Info$Workflow
    copy(net.corda.core.cordapp.Cordapp$Info$Contract, net.corda.core.cordapp.Cordapp$Info$Workflow):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.cordapp.Cordapp$Info$ContractAndWorkflow
      params:
        contract:
          annotation:
            - NotNull
          type: net.corda.core.cordapp.Cordapp$Info$Contract
        workflow:
          annotation:
            - NotNull
          type: net.corda.core.cordapp.Cordapp$Info$Workflow
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getContract():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.cordapp.Cordapp$Info$Contract
    getLicence():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getShortName():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getVendor():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getVersion():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getWorkflow():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.cordapp.Cordapp$Info$Workflow
    hasUnknownFields():
      annotations: []
      default: false
      type: public
      returnType: boolean
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.cordapp.Cordapp$Info$Default:
  annotations: []
  type: public static final class
  extends: null
  implements:
    - net.corda.core.cordapp.Cordapp$Info
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(String, String, String, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.cordapp.Cordapp$Info$Default
      params:
        shortName:
          annotation:
            - NotNull
          type: String
        vendor:
          annotation:
            - NotNull
          type: String
        version:
          annotation:
            - NotNull
          type: String
        licence:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getLicence():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getShortName():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getVendor():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getVersion():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hasUnknownFields():
      annotations: []
      default: false
      type: public
      returnType: boolean
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.cordapp.Cordapp$Info$Workflow:
  annotations: []
  type: public static final class
  extends: null
  implements:
    - net.corda.core.cordapp.Cordapp$Info
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations: []
      default: false
      type: public final
      returnType: int
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(String, String, int, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.cordapp.Cordapp$Info$Workflow
      params:
        shortName:
          annotation:
            - NotNull
          type: String
        vendor:
          annotation:
            - NotNull
          type: String
        versionId:
          annotation: []
          type: int
        licence:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getLicence():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getShortName():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getVendor():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getVersion():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getVersionId():
      annotations: []
      default: false
      type: public final
      returnType: int
    hasUnknownFields():
      annotations: []
      default: false
      type: public
      returnType: boolean
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.cordapp.CordappConfig:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    exists(String):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        path:
          annotation:
            - NotNull
          type: String
    get(String):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Object
      params:
        path:
          annotation:
            - NotNull
          type: String
    getBoolean(String):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        path:
          annotation:
            - NotNull
          type: String
    getDouble(String):
      annotations: []
      default: false
      type: public abstract
      returnType: double
      params:
        path:
          annotation:
            - NotNull
          type: String
    getFloat(String):
      annotations: []
      default: false
      type: public abstract
      returnType: float
      params:
        path:
          annotation:
            - NotNull
          type: String
    getInt(String):
      annotations: []
      default: false
      type: public abstract
      returnType: int
      params:
        path:
          annotation:
            - NotNull
          type: String
    getLong(String):
      annotations: []
      default: false
      type: public abstract
      returnType: long
      params:
        path:
          annotation:
            - NotNull
          type: String
    getNumber(String):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Number
      params:
        path:
          annotation:
            - NotNull
          type: String
    getString(String):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: String
      params:
        path:
          annotation:
            - NotNull
          type: String
net.corda.core.cordapp.CordappConfigException:
  annotations: []
  type: public final class
  extends: java.lang.Exception
  implements: []
  interface: false
  methods: {}
net.corda.core.cordapp.CordappContext:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getAttachmentId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getClassLoader():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: ClassLoader
    getConfig():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.cordapp.CordappConfig
    getCordapp():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.cordapp.Cordapp
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.cordapp.CordappContext$Companion
net.corda.core.cordapp.CordappContext$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.cordapp.CordappInfo:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component4():
      annotations: []
      default: false
      type: public final
      returnType: int
    component5():
      annotations: []
      default: false
      type: public final
      returnType: int
    component6():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component7():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component8():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component9():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
    copy(String, String, String, int, int, String, String, String, net.corda.core.crypto.SecureHash$SHA256):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.cordapp.CordappInfo
      params:
        type:
          annotation:
            - NotNull
          type: String
        name:
          annotation:
            - NotNull
          type: String
        shortName:
          annotation:
            - NotNull
          type: String
        minimumPlatformVersion:
          annotation: []
          type: int
        targetPlatformVersion:
          annotation: []
          type: int
        version:
          annotation:
            - NotNull
          type: String
        vendor:
          annotation:
            - NotNull
          type: String
        licence:
          annotation:
            - NotNull
          type: String
        jarHash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash$SHA256
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getJarHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
    getLicence():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getMinimumPlatformVersion():
      annotations: []
      default: false
      type: public final
      returnType: int
    getName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getShortName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getTargetPlatformVersion():
      annotations: []
      default: false
      type: public final
      returnType: int
    getType():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getVendor():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getVersion():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.cordapp.CordappProvider:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getAppContext():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.cordapp.CordappContext
    getContractAttachmentID(String):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
      params:
        contractClassName:
          annotation:
            - NotNull
          type: String
net.corda.core.crypto.AddressFormatException:
  annotations: []
  type: public class
  extends: java.lang.IllegalArgumentException
  implements: []
  interface: false
  methods: {}
net.corda.core.crypto.Base58:
  annotations: []
  type: public class
  extends: null
  implements: []
  interface: false
  methods:
    decode(String):
      annotations: []
      default: false
      type: public static
      returnType: "byte[]"
      params:
        input:
          annotation: []
          type: String
    decodeChecked(String):
      annotations: []
      default: false
      type: public static
      returnType: "byte[]"
      params:
        input:
          annotation: []
          type: String
    decodeToBigInteger(String):
      annotations: []
      default: false
      type: public static
      returnType: java.math.BigInteger
      params:
        input:
          annotation: []
          type: String
    encode(byte[]):
      annotations: []
      default: false
      type: public static
      returnType: String
      params:
        input:
          annotation: []
          type: "byte[]"
net.corda.core.crypto.CompositeKey:
  annotations: []
  type: public final class
  extends: null
  implements:
    - java.security.PublicKey
  interface: false
  methods:
    checkValidity():
      annotations: []
      default: false
      type: public final
      returnType: void
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAlgorithm():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getChildren():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.CompositeKey$NodeAndWeight>
    getEncoded():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "byte[]"
    getFormat():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getLeafKeys():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<java.security.PublicKey>
    getThreshold():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isFulfilledBy(Iterable<? extends java.security.PublicKey>):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        keysToCheck:
          annotation:
            - NotNull
          type: Iterable<? extends java.security.PublicKey>
    isFulfilledBy(java.security.PublicKey):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        key:
          annotation:
            - NotNull
          type: java.security.PublicKey
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.CompositeKey$Companion
    KEY_ALGORITHM:
      annotation:
        - NotNull
      type: public static final String
      initialised value: COMPOSITE
net.corda.core.crypto.CompositeKey$Builder:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    addKey(java.security.PublicKey, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.CompositeKey$Builder
      params:
        key:
          annotation:
            - NotNull
          type: java.security.PublicKey
        weight:
          annotation: []
          type: int
    addKeys(java.security.PublicKey[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.CompositeKey$Builder
      params:
        keys:
          annotation:
            - NotNull
          type: "java.security.PublicKey[]"
    addKeys(java.util.List<? extends java.security.PublicKey>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.CompositeKey$Builder
      params:
        keys:
          annotation:
            - NotNull
          type: java.util.List<? extends java.security.PublicKey>
    build(Integer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
      params:
        threshold:
          annotation:
            - Nullable
          type: Integer
net.corda.core.crypto.CompositeKey$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    getInstance(byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
      params:
        encoded:
          annotation:
            - NotNull
          type: "byte[]"
    getInstance(org.bouncycastle.asn1.ASN1Primitive):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
      params:
        asn1:
          annotation:
            - NotNull
          type: org.bouncycastle.asn1.ASN1Primitive
net.corda.core.crypto.CompositeKey$NodeAndWeight:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: org.bouncycastle.asn1.ASN1Object
  implements:
    - java.lang.Comparable
  interface: false
  methods:
    compareTo(net.corda.core.crypto.CompositeKey$NodeAndWeight):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.crypto.CompositeKey$NodeAndWeight
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
    component2():
      annotations: []
      default: false
      type: public final
      returnType: int
    copy(java.security.PublicKey, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.CompositeKey$NodeAndWeight
      params:
        node:
          annotation:
            - NotNull
          type: java.security.PublicKey
        weight:
          annotation: []
          type: int
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getNode():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
    getWeight():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toASN1Primitive():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: org.bouncycastle.asn1.ASN1Primitive
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.crypto.CompositeKeyFactory:
  annotations: []
  type: public final class
  extends: java.security.KeyFactorySpi
  implements: []
  interface: false
  methods:
    engineGeneratePrivate(java.security.spec.KeySpec):
      annotations:
        - NotNull
      default: false
      type: protected
      returnType: java.security.PrivateKey
      params:
        keySpec:
          annotation:
            - NotNull
          type: java.security.spec.KeySpec
    engineGeneratePublic(java.security.spec.KeySpec):
      annotations:
        - Nullable
      default: false
      type: protected
      returnType: java.security.PublicKey
      params:
        keySpec:
          annotation:
            - NotNull
          type: java.security.spec.KeySpec
    engineGetKeySpec(java.security.Key, Class<T>):
      annotations:
        - NotNull
      default: false
      type: protected
      returnType: T
      params:
        key:
          annotation:
            - NotNull
          type: java.security.Key
        keySpec:
          annotation:
            - NotNull
          type: Class<T>
    engineTranslateKey(java.security.Key):
      annotations:
        - NotNull
      default: false
      type: protected
      returnType: java.security.Key
      params:
        key:
          annotation:
            - NotNull
          type: java.security.Key
net.corda.core.crypto.CompositeSignature:
  annotations: []
  type: public final class
  extends: java.security.Signature
  implements: []
  interface: false
  methods:
    engineGetParameter(String):
      annotations:
        - NotNull
      default: false
      type: protected
      returnType: Object
      params:
        param:
          annotation:
            - Nullable
          type: String
    engineInitSign(java.security.PrivateKey):
      annotations: []
      default: false
      type: protected
      returnType: void
      params:
        privateKey:
          annotation:
            - Nullable
          type: java.security.PrivateKey
    engineInitVerify(java.security.PublicKey):
      annotations: []
      default: false
      type: protected
      returnType: void
      params:
        publicKey:
          annotation:
            - Nullable
          type: java.security.PublicKey
    engineSetParameter(String, Object):
      annotations: []
      default: false
      type: protected
      returnType: void
      params:
        param:
          annotation:
            - Nullable
          type: String
        value:
          annotation:
            - Nullable
          type: Object
    engineSetParameter(java.security.spec.AlgorithmParameterSpec):
      annotations: []
      default: false
      type: protected
      returnType: void
      params:
        params:
          annotation:
            - NotNull
          type: java.security.spec.AlgorithmParameterSpec
    engineSign():
      annotations:
        - NotNull
      default: false
      type: protected
      returnType: "byte[]"
    engineUpdate(byte):
      annotations: []
      default: false
      type: protected
      returnType: void
      params:
        b:
          annotation: []
          type: byte
    engineUpdate(byte[], int, int):
      annotations: []
      default: false
      type: protected
      returnType: void
      params:
        b:
          annotation:
            - NotNull
          type: "byte[]"
        "off":
          annotation: []
          type: int
        len:
          annotation: []
          type: int
    engineVerify(byte[]):
      annotations: []
      default: false
      type: protected
      returnType: boolean
      params:
        sigBytes:
          annotation:
            - NotNull
          type: "byte[]"
    getService(java.security.Provider):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.Provider$Service
      params:
        provider:
          annotation:
            - NotNull
          type: java.security.Provider
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.CompositeSignature$Companion
    SIGNATURE_ALGORITHM:
      annotation:
        - NotNull
      type: public static final String
      initialised value: COMPOSITESIG
net.corda.core.crypto.CompositeSignature$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    getService(java.security.Provider):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.Provider$Service
      params:
        provider:
          annotation:
            - NotNull
          type: java.security.Provider
net.corda.core.crypto.CompositeSignature$State:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayOutputStream
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.CompositeKey
    copy(java.io.ByteArrayOutputStream, net.corda.core.crypto.CompositeKey):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.CompositeSignature$State
      params:
        buffer:
          annotation:
            - NotNull
          type: java.io.ByteArrayOutputStream
        verifyKey:
          annotation:
            - NotNull
          type: net.corda.core.crypto.CompositeKey
    engineVerify(byte[]):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        sigBytes:
          annotation:
            - NotNull
          type: "byte[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getBuffer():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayOutputStream
    getVerifyKey():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.CompositeKey
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.crypto.CompositeSignaturesWithKeys:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    copy(java.util.List<net.corda.core.crypto.TransactionSignature>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.CompositeSignaturesWithKeys
      params:
        sigs:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.crypto.TransactionSignature>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getSigs():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.CompositeSignaturesWithKeys$Companion
net.corda.core.crypto.CompositeSignaturesWithKeys$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    getEMPTY():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.CompositeSignaturesWithKeys
net.corda.core.crypto.CordaObjectIdentifier:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods: {}
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.CordaObjectIdentifier
    COMPOSITE_KEY:
      annotation:
        - NotNull
      type: public static final org.bouncycastle.asn1.ASN1ObjectIdentifier
    COMPOSITE_SIGNATURE:
      annotation:
        - NotNull
      type: public static final org.bouncycastle.asn1.ASN1ObjectIdentifier
net.corda.core.crypto.CordaSecurityProvider:
  annotations: []
  type: public final class
  extends: java.security.Provider
  implements: []
  interface: false
  methods:
    getService(String, String):
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.security.Provider$Service
      params:
        type:
          annotation:
            - NotNull
          type: String
        algorithm:
          annotation:
            - NotNull
          type: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.CordaSecurityProvider$Companion
    PROVIDER_NAME:
      annotation:
        - NotNull
      type: public static final String
      initialised value: Corda
net.corda.core.crypto.CordaSecurityProvider$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.crypto.Crypto:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    decodePrivateKey(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.PrivateKey
      params:
        schemeCodeName:
          annotation:
            - NotNull
          type: String
        encodedKey:
          annotation:
            - NotNull
          type: "byte[]"
    decodePrivateKey(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.PrivateKey
      params:
        encodedKey:
          annotation:
            - NotNull
          type: "byte[]"
    decodePrivateKey(net.corda.core.crypto.SignatureScheme, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.PrivateKey
      params:
        signatureScheme:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureScheme
        encodedKey:
          annotation:
            - NotNull
          type: "byte[]"
    decodePublicKey(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.PublicKey
      params:
        schemeCodeName:
          annotation:
            - NotNull
          type: String
        encodedKey:
          annotation:
            - NotNull
          type: "byte[]"
    decodePublicKey(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.PublicKey
      params:
        encodedKey:
          annotation:
            - NotNull
          type: "byte[]"
    decodePublicKey(net.corda.core.crypto.SignatureScheme, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.PublicKey
      params:
        signatureScheme:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureScheme
        encodedKey:
          annotation:
            - NotNull
          type: "byte[]"
    deriveKeyPair(java.security.PrivateKey, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.KeyPair
      params:
        privateKey:
          annotation:
            - NotNull
          type: java.security.PrivateKey
        seed:
          annotation:
            - NotNull
          type: "byte[]"
    deriveKeyPair(net.corda.core.crypto.SignatureScheme, java.security.PrivateKey, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.KeyPair
      params:
        signatureScheme:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureScheme
        privateKey:
          annotation:
            - NotNull
          type: java.security.PrivateKey
        seed:
          annotation:
            - NotNull
          type: "byte[]"
    deriveKeyPairFromEntropy(java.math.BigInteger):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.KeyPair
      params:
        entropy:
          annotation:
            - NotNull
          type: java.math.BigInteger
    deriveKeyPairFromEntropy(net.corda.core.crypto.SignatureScheme, java.math.BigInteger):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.KeyPair
      params:
        signatureScheme:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureScheme
        entropy:
          annotation:
            - NotNull
          type: java.math.BigInteger
    doSign(String, java.security.PrivateKey, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "byte[]"
      params:
        schemeCodeName:
          annotation:
            - NotNull
          type: String
        privateKey:
          annotation:
            - NotNull
          type: java.security.PrivateKey
        clearData:
          annotation:
            - NotNull
          type: "byte[]"
    doSign(java.security.KeyPair, net.corda.core.crypto.SignableData):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.TransactionSignature
      params:
        keyPair:
          annotation:
            - NotNull
          type: java.security.KeyPair
        signableData:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignableData
    doSign(java.security.PrivateKey, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "byte[]"
      params:
        privateKey:
          annotation:
            - NotNull
          type: java.security.PrivateKey
        clearData:
          annotation:
            - NotNull
          type: "byte[]"
    doSign(net.corda.core.crypto.SignatureScheme, java.security.PrivateKey, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "byte[]"
      params:
        signatureScheme:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureScheme
        privateKey:
          annotation:
            - NotNull
          type: java.security.PrivateKey
        clearData:
          annotation:
            - NotNull
          type: "byte[]"
    doVerify(String, java.security.PublicKey, byte[], byte[]):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        schemeCodeName:
          annotation:
            - NotNull
          type: String
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
        signatureData:
          annotation:
            - NotNull
          type: "byte[]"
        clearData:
          annotation:
            - NotNull
          type: "byte[]"
    doVerify(java.security.PublicKey, byte[], byte[]):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
        signatureData:
          annotation:
            - NotNull
          type: "byte[]"
        clearData:
          annotation:
            - NotNull
          type: "byte[]"
    doVerify(net.corda.core.crypto.SecureHash, net.corda.core.crypto.TransactionSignature):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        txId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        transactionSignature:
          annotation:
            - NotNull
          type: net.corda.core.crypto.TransactionSignature
    doVerify(net.corda.core.crypto.SignatureScheme, java.security.PublicKey, byte[], byte[]):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        signatureScheme:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureScheme
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
        signatureData:
          annotation:
            - NotNull
          type: "byte[]"
        clearData:
          annotation:
            - NotNull
          type: "byte[]"
    encodePublicKey(java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "byte[]"
      params:
        key:
          annotation:
            - NotNull
          type: java.security.PublicKey
    findProvider(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.Provider
      params:
        name:
          annotation:
            - NotNull
          type: String
    findSignatureScheme(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SignatureScheme
      params:
        schemeCodeName:
          annotation:
            - NotNull
          type: String
    findSignatureScheme(int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SignatureScheme
      params:
        schemeNumberID:
          annotation: []
          type: int
    findSignatureScheme(java.security.PrivateKey):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SignatureScheme
      params:
        key:
          annotation:
            - NotNull
          type: java.security.PrivateKey
    findSignatureScheme(java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SignatureScheme
      params:
        key:
          annotation:
            - NotNull
          type: java.security.PublicKey
    findSignatureScheme(org.bouncycastle.asn1.x509.AlgorithmIdentifier):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SignatureScheme
      params:
        algorithm:
          annotation:
            - NotNull
          type: org.bouncycastle.asn1.x509.AlgorithmIdentifier
    generateKeyPair():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.KeyPair
    generateKeyPair(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.KeyPair
      params:
        schemeCodeName:
          annotation:
            - NotNull
          type: String
    generateKeyPair(net.corda.core.crypto.SignatureScheme):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.KeyPair
      params:
        signatureScheme:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureScheme
    isSupportedSignatureScheme(net.corda.core.crypto.SignatureScheme):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        signatureScheme:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureScheme
    isValid(java.security.PublicKey, byte[], byte[]):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
        signatureData:
          annotation:
            - NotNull
          type: "byte[]"
        clearData:
          annotation:
            - NotNull
          type: "byte[]"
    isValid(net.corda.core.crypto.SecureHash, net.corda.core.crypto.TransactionSignature):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        txId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        transactionSignature:
          annotation:
            - NotNull
          type: net.corda.core.crypto.TransactionSignature
    isValid(net.corda.core.crypto.SignatureScheme, java.security.PublicKey, byte[], byte[]):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        signatureScheme:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureScheme
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
        signatureData:
          annotation:
            - NotNull
          type: "byte[]"
        clearData:
          annotation:
            - NotNull
          type: "byte[]"
    publicKeyOnCurve(net.corda.core.crypto.SignatureScheme, java.security.PublicKey):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        signatureScheme:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureScheme
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    registerProviders():
      annotations: []
      default: false
      type: public static final
      returnType: void
    supportedSignatureSchemes():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.util.List<net.corda.core.crypto.SignatureScheme>
    toSupportedPrivateKey(java.security.PrivateKey):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.PrivateKey
      params:
        key:
          annotation:
            - NotNull
          type: java.security.PrivateKey
    toSupportedPublicKey(java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.PublicKey
      params:
        key:
          annotation:
            - NotNull
          type: java.security.PublicKey
    toSupportedPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.PublicKey
      params:
        key:
          annotation:
            - NotNull
          type: org.bouncycastle.asn1.x509.SubjectPublicKeyInfo
    validatePublicKey(java.security.PublicKey):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        key:
          annotation:
            - NotNull
          type: java.security.PublicKey
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.Crypto
    RSA_SHA256:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SignatureScheme
    ECDSA_SECP256K1_SHA256:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SignatureScheme
    ECDSA_SECP256R1_SHA256:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SignatureScheme
    EDDSA_ED25519_SHA512:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SignatureScheme
    SHA512_256:
      annotation:
        - NotNull
      type: public static final org.bouncycastle.asn1.DLSequence
    COMPOSITE_KEY:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SignatureScheme
    DEFAULT_SIGNATURE_SCHEME:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SignatureScheme
net.corda.core.crypto.CryptoUtils:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    byKeys(Iterable<net.corda.core.crypto.TransactionSignature>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.util.Set<java.security.PublicKey>
      params:
        $this$byKeys:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.crypto.TransactionSignature>
    component1(java.security.KeyPair):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.PrivateKey
      params:
        $this$component1:
          annotation:
            - NotNull
          type: java.security.KeyPair
    component2(java.security.KeyPair):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.PublicKey
      params:
        $this$component2:
          annotation:
            - NotNull
          type: java.security.KeyPair
    componentHash(net.corda.core.crypto.SecureHash, net.corda.core.utilities.OpaqueBytes):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        nonce:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        opaqueBytes:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
    componentHash(net.corda.core.utilities.OpaqueBytes, net.corda.core.contracts.PrivacySalt, int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        opaqueBytes:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
        privacySalt:
          annotation:
            - NotNull
          type: net.corda.core.contracts.PrivacySalt
        componentGroupIndex:
          annotation: []
          type: int
        internalIndex:
          annotation: []
          type: int
    computeNonce(net.corda.core.contracts.PrivacySalt, int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        privacySalt:
          annotation:
            - NotNull
          type: net.corda.core.contracts.PrivacySalt
        groupIndex:
          annotation: []
          type: int
        internalIndex:
          annotation: []
          type: int
    containsAny(java.security.PublicKey, Iterable<? extends java.security.PublicKey>):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        $this$containsAny:
          annotation:
            - NotNull
          type: java.security.PublicKey
        otherKeys:
          annotation:
            - NotNull
          type: Iterable<? extends java.security.PublicKey>
    entropyToKeyPair(java.math.BigInteger):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.KeyPair
      params:
        entropy:
          annotation:
            - NotNull
          type: java.math.BigInteger
    generateKeyPair():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.KeyPair
    getKeys(java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.util.Set<java.security.PublicKey>
      params:
        $this$keys:
          annotation:
            - NotNull
          type: java.security.PublicKey
    isFulfilledBy(java.security.PublicKey, Iterable<? extends java.security.PublicKey>):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        $this$isFulfilledBy:
          annotation:
            - NotNull
          type: java.security.PublicKey
        otherKeys:
          annotation:
            - NotNull
          type: Iterable<? extends java.security.PublicKey>
    isFulfilledBy(java.security.PublicKey, java.security.PublicKey):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        $this$isFulfilledBy:
          annotation:
            - NotNull
          type: java.security.PublicKey
        otherKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    isValid(java.security.PublicKey, byte[], net.corda.core.crypto.DigitalSignature):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        $this$isValid:
          annotation:
            - NotNull
          type: java.security.PublicKey
        content:
          annotation:
            - NotNull
          type: "byte[]"
        signature:
          annotation:
            - NotNull
          type: net.corda.core.crypto.DigitalSignature
    newSecureRandom():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.SecureRandom
    random63BitValue():
      annotations: []
      default: false
      type: public static final
      returnType: long
    secureRandomBytes(int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "byte[]"
      params:
        numOfBytes:
          annotation: []
          type: int
    serializedHash(T):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        x:
          annotation:
            - NotNull
          type: T
    sign(java.security.KeyPair, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.DigitalSignature$WithKey
      params:
        $this$sign:
          annotation:
            - NotNull
          type: java.security.KeyPair
        bytesToSign:
          annotation:
            - NotNull
          type: "byte[]"
    sign(java.security.KeyPair, net.corda.core.crypto.SignableData):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.TransactionSignature
      params:
        $this$sign:
          annotation:
            - NotNull
          type: java.security.KeyPair
        signableData:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignableData
    sign(java.security.KeyPair, net.corda.core.utilities.OpaqueBytes):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.DigitalSignature$WithKey
      params:
        $this$sign:
          annotation:
            - NotNull
          type: java.security.KeyPair
        bytesToSign:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
    sign(java.security.PrivateKey, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.DigitalSignature
      params:
        $this$sign:
          annotation:
            - NotNull
          type: java.security.PrivateKey
        bytesToSign:
          annotation:
            - NotNull
          type: "byte[]"
    sign(java.security.PrivateKey, byte[], java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.DigitalSignature$WithKey
      params:
        $this$sign:
          annotation:
            - NotNull
          type: java.security.PrivateKey
        bytesToSign:
          annotation:
            - NotNull
          type: "byte[]"
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    toStringShort(java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$toStringShort:
          annotation:
            - NotNull
          type: java.security.PublicKey
    verify(java.security.KeyPair, byte[], byte[]):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        $this$verify:
          annotation:
            - NotNull
          type: java.security.KeyPair
        signatureData:
          annotation:
            - NotNull
          type: "byte[]"
        clearData:
          annotation:
            - NotNull
          type: "byte[]"
    verify(java.security.PublicKey, byte[], byte[]):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        $this$verify:
          annotation:
            - NotNull
          type: java.security.PublicKey
        signatureData:
          annotation:
            - NotNull
          type: "byte[]"
        clearData:
          annotation:
            - NotNull
          type: "byte[]"
    verify(java.security.PublicKey, byte[], net.corda.core.crypto.DigitalSignature):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        $this$verify:
          annotation:
            - NotNull
          type: java.security.PublicKey
        content:
          annotation:
            - NotNull
          type: "byte[]"
        signature:
          annotation:
            - NotNull
          type: net.corda.core.crypto.DigitalSignature
net.corda.core.crypto.DigestAlgorithm:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    componentDigest(byte[]):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: "byte[]"
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    digest(byte[]):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "byte[]"
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    getAlgorithm():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: String
    getDigestLength():
      annotations: []
      default: false
      type: public abstract
      returnType: int
    nonceDigest(byte[]):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: "byte[]"
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
net.corda.core.crypto.DigestService:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    componentHash(net.corda.core.crypto.SecureHash, net.corda.core.utilities.OpaqueBytes):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        nonce:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        opaqueBytes:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
    componentHash(net.corda.core.utilities.OpaqueBytes, net.corda.core.contracts.PrivacySalt, int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        opaqueBytes:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
        privacySalt:
          annotation:
            - NotNull
          type: net.corda.core.contracts.PrivacySalt
        componentGroupIndex:
          annotation: []
          type: int
        internalIndex:
          annotation: []
          type: int
    computeNonce(net.corda.core.contracts.PrivacySalt, int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        privacySalt:
          annotation:
            - NotNull
          type: net.corda.core.contracts.PrivacySalt
        groupIndex:
          annotation: []
          type: int
        internalIndex:
          annotation: []
          type: int
    copy(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
      params:
        hashAlgorithm:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAllOnesHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getDigestLength():
      annotations: []
      default: false
      type: public final
      returnType: int
    getHashAlgorithm():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getZeroHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hash(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        str:
          annotation:
            - NotNull
          type: String
    hash(byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    serializedHash(T):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        x:
          annotation:
            - NotNull
          type: T
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.DigestService$Companion
net.corda.core.crypto.DigestService$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    getDefault():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    getSha2_256():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    getSha2_384():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    getSha2_512():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
net.corda.core.crypto.DigestServiceKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    randomHash(net.corda.core.crypto.DigestService):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        $this$randomHash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.DigestService
net.corda.core.crypto.DigitalSignature:
  annotations:
    - CordaSerializable
  type: public class
  extends: java.lang.Comparable<net.corda.core.utilities.ByteSequence>
  implements: []
  interface: false
  methods:
    compareTo(net.corda.core.utilities.ByteSequence):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
    copy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
    copyBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    getOffset():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[], int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
    of(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    open():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayInputStream
    putTo(java.nio.ByteBuffer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        buffer:
          annotation:
            - NotNull
          type: java.nio.ByteBuffer
    slice(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        start:
          annotation: []
          type: int
        end:
          annotation: []
          type: int
    subSequence(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    take(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        "n":
          annotation: []
          type: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    writeTo(java.io.OutputStream):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        output:
          annotation:
            - NotNull
          type: java.io.OutputStream
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.OpaqueBytes$Companion
net.corda.core.crypto.DigitalSignature$WithKey:
  annotations:
    - CordaSerializable
  type: public static class
  extends: java.lang.Comparable<net.corda.core.utilities.ByteSequence>
  implements: []
  interface: false
  methods:
    compareTo(net.corda.core.utilities.ByteSequence):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
    copy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
    copyBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getBy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
    getBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    getOffset():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isValid(byte[]):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        content:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[], int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
    of(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    open():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayInputStream
    putTo(java.nio.ByteBuffer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        buffer:
          annotation:
            - NotNull
          type: java.nio.ByteBuffer
    slice(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        start:
          annotation: []
          type: int
        end:
          annotation: []
          type: int
    subSequence(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    take(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        "n":
          annotation: []
          type: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    verify(byte[]):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        content:
          annotation:
            - NotNull
          type: "byte[]"
    verify(net.corda.core.utilities.OpaqueBytes):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        content:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
    withoutKey():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigitalSignature
    writeTo(java.io.OutputStream):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        output:
          annotation:
            - NotNull
          type: java.io.OutputStream
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.OpaqueBytes$Companion
net.corda.core.crypto.DummySecureRandom:
  annotations: []
  type: public final class
  extends: java.security.SecureRandom
  implements: []
  interface: false
  methods: {}
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.DummySecureRandom
net.corda.core.crypto.MerkleTree:
  annotations: []
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods:
    getHash():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.MerkleTree$Companion
net.corda.core.crypto.MerkleTree$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    getMerkleTree(java.util.List<? extends net.corda.core.crypto.SecureHash>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.MerkleTree
      params:
        allLeavesHashes:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.crypto.SecureHash>
    getMerkleTree(java.util.List<? extends net.corda.core.crypto.SecureHash>, net.corda.core.crypto.DigestService):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.MerkleTree
      params:
        allLeavesHashes:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.crypto.SecureHash>
        nodeDigestService:
          annotation:
            - NotNull
          type: net.corda.core.crypto.DigestService
net.corda.core.crypto.MerkleTree$Leaf:
  annotations: []
  type: public static final class
  extends: net.corda.core.crypto.MerkleTree
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    copy(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.MerkleTree$Leaf
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getHash():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.MerkleTree$Companion
net.corda.core.crypto.MerkleTree$Node:
  annotations: []
  type: public static final class
  extends: net.corda.core.crypto.MerkleTree
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.MerkleTree
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.MerkleTree
    copy(net.corda.core.crypto.SecureHash, net.corda.core.crypto.MerkleTree, net.corda.core.crypto.MerkleTree):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.MerkleTree$Node
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        left:
          annotation:
            - NotNull
          type: net.corda.core.crypto.MerkleTree
        right:
          annotation:
            - NotNull
          type: net.corda.core.crypto.MerkleTree
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getHash():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getLeft():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.MerkleTree
    getRight():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.MerkleTree
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.MerkleTree$Companion
net.corda.core.crypto.MerkleTreeException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.CordaThrowable
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getReason():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.crypto.NullKeys:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getNULL_PARTY():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.AnonymousParty
    getNULL_SIGNATURE():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.TransactionSignature
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.NullKeys
net.corda.core.crypto.NullKeys$NullPublicKey:
  annotations: []
  type: public static final class
  extends: null
  implements:
    - java.lang.Comparable
    - java.security.PublicKey
  interface: false
  methods:
    compareTo(java.security.PublicKey):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: java.security.PublicKey
    getAlgorithm():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getEncoded():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "byte[]"
    getFormat():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.NullKeys$NullPublicKey
net.corda.core.crypto.PartialMerkleTree:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getRoot():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree$PartialTree
    verify(net.corda.core.crypto.SecureHash, java.util.List<? extends net.corda.core.crypto.SecureHash>):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        merkleRootHash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        hashesToCheck:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.crypto.SecureHash>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.PartialMerkleTree$Companion
net.corda.core.crypto.PartialMerkleTree$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    build(net.corda.core.crypto.MerkleTree, java.util.List<? extends net.corda.core.crypto.SecureHash>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree
      params:
        merkleRoot:
          annotation:
            - NotNull
          type: net.corda.core.crypto.MerkleTree
        includeHashes:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.crypto.SecureHash>
    rootAndUsedHashes(net.corda.core.crypto.PartialMerkleTree$PartialTree, java.util.List<net.corda.core.crypto.SecureHash>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        node:
          annotation:
            - NotNull
          type: net.corda.core.crypto.PartialMerkleTree$PartialTree
        usedHashes:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.crypto.SecureHash>
net.corda.core.crypto.PartialMerkleTree$PartialTree:
  annotations:
    - CordaSerializable
  type: public abstract static class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.crypto.PartialMerkleTree$PartialTree$IncludedLeaf:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.crypto.PartialMerkleTree$PartialTree
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    copy(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree$PartialTree$IncludedLeaf
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.crypto.PartialMerkleTree$PartialTree$Leaf:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.crypto.PartialMerkleTree$PartialTree
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    copy(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree$PartialTree$Leaf
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.crypto.PartialMerkleTree$PartialTree$Node:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.crypto.PartialMerkleTree$PartialTree
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree$PartialTree
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree$PartialTree
    component3():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    copy(net.corda.core.crypto.PartialMerkleTree$PartialTree, net.corda.core.crypto.PartialMerkleTree$PartialTree):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree$PartialTree$Node
      params:
        left:
          annotation:
            - NotNull
          type: net.corda.core.crypto.PartialMerkleTree$PartialTree
        right:
          annotation:
            - NotNull
          type: net.corda.core.crypto.PartialMerkleTree$PartialTree
    copy(net.corda.core.crypto.PartialMerkleTree$PartialTree, net.corda.core.crypto.PartialMerkleTree$PartialTree, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree$PartialTree$Node
      params:
        left:
          annotation:
            - NotNull
          type: net.corda.core.crypto.PartialMerkleTree$PartialTree
        right:
          annotation:
            - NotNull
          type: net.corda.core.crypto.PartialMerkleTree$PartialTree
        hashAlgorithm:
          annotation:
            - Nullable
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getHashAlgorithm():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    getLeft():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree$PartialTree
    getRight():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree$PartialTree
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.crypto.SecureHash:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: java.lang.Comparable<net.corda.core.utilities.ByteSequence>
  implements: []
  interface: false
  methods:
    allOnesHashFor(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
    compareTo(net.corda.core.utilities.ByteSequence):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
    componentHashAs(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    concatenate(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    concatenateAs(String, net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        concatAlgorithm:
          annotation:
            - NotNull
          type: String
        other:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    copy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
    copyBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    create(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        str:
          annotation:
            - Nullable
          type: String
    createSHA256(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    generate(byte[]):
      annotations:
        - NotNull
      default: false
      type: protected
      returnType: net.corda.core.crypto.SecureHash
      params:
        data:
          annotation:
            - NotNull
          type: "byte[]"
    getBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    getOffset():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashAs(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    hashConcat(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    nonceHashAs(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[], int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
    of(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    open():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayInputStream
    parse(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        str:
          annotation:
            - Nullable
          type: String
    prefixChars(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
      params:
        prefixLen:
          annotation: []
          type: int
    putTo(java.nio.ByteBuffer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        buffer:
          annotation:
            - NotNull
          type: java.nio.ByteBuffer
    random(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
    randomSHA256():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
    reHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    sha256(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        str:
          annotation:
            - NotNull
          type: String
    sha256(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    sha256Twice(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    slice(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        start:
          annotation: []
          type: int
        end:
          annotation: []
          type: int
    subSequence(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    take(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        "n":
          annotation: []
          type: int
    toHexString():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    writeTo(java.io.OutputStream):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        output:
          annotation:
            - NotNull
          type: java.io.OutputStream
    zeroHashFor(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SecureHash$Companion
    SHA2_256:
      annotation:
        - NotNull
      type: public static final String
      initialised value: SHA-256
    SHA2_384:
      annotation:
        - NotNull
      type: public static final String
      initialised value: SHA-384
    SHA2_512:
      annotation:
        - NotNull
      type: public static final String
      initialised value: SHA-512
    DELIMITER:
      annotation: []
      type: public static final char
      initialised value: ':'
    zeroHash:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SecureHash$SHA256
    allOnesHash:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SecureHash$SHA256
net.corda.core.crypto.SecureHash$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements:
    - net.corda.core.internal.utilities.Internable
  interface: false
  methods:
    allOnesHashFor(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
    componentHashAs(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    create(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        str:
          annotation:
            - Nullable
          type: String
    createSHA256(byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    digestLengthFor(String):
      annotations: []
      default: false
      type: public final
      returnType: int
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
    getAllOnesHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
    getInterner():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.internal.utilities.PrivateInterner<net.corda.core.crypto.SecureHash>
    getZeroHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
    hashAs(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    nonceHashAs(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    parse(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        str:
          annotation:
            - Nullable
          type: String
    random(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
    randomSHA256():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
    sha256(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        str:
          annotation:
            - NotNull
          type: String
    sha256(byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    sha256Twice(byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    zeroHashFor(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
net.corda.core.crypto.SecureHash$HASH:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Comparable<net.corda.core.utilities.ByteSequence>
  implements: []
  interface: false
  methods:
    allOnesHashFor(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
    compareTo(net.corda.core.utilities.ByteSequence):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
    componentHashAs(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    concatenate(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    concatenateAs(String, net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        concatAlgorithm:
          annotation:
            - NotNull
          type: String
        other:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    copy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
    copyBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    create(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        str:
          annotation:
            - Nullable
          type: String
    createSHA256(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    generate(byte[]):
      annotations:
        - NotNull
      default: false
      type: protected
      returnType: net.corda.core.crypto.SecureHash
      params:
        data:
          annotation:
            - NotNull
          type: "byte[]"
    getAlgorithm():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    getOffset():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashAs(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    hashConcat(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    nonceHashAs(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[], int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
    of(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    open():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayInputStream
    parse(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        str:
          annotation:
            - Nullable
          type: String
    prefixChars(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
      params:
        prefixLen:
          annotation: []
          type: int
    putTo(java.nio.ByteBuffer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        buffer:
          annotation:
            - NotNull
          type: java.nio.ByteBuffer
    random(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
    randomSHA256():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
    reHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    sha256(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        str:
          annotation:
            - NotNull
          type: String
    sha256(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    sha256Twice(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    slice(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        start:
          annotation: []
          type: int
        end:
          annotation: []
          type: int
    subSequence(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    take(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        "n":
          annotation: []
          type: int
    toHexString():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    writeTo(java.io.OutputStream):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        output:
          annotation:
            - NotNull
          type: java.io.OutputStream
    zeroHashFor(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SecureHash$Companion
    SHA2_256:
      annotation:
        - NotNull
      type: public static final String
      initialised value: SHA-256
    SHA2_384:
      annotation:
        - NotNull
      type: public static final String
      initialised value: SHA-384
    SHA2_512:
      annotation:
        - NotNull
      type: public static final String
      initialised value: SHA-512
    DELIMITER:
      annotation: []
      type: public static final char
      initialised value: ':'
    zeroHash:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SecureHash$SHA256
    allOnesHash:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SecureHash$SHA256
net.corda.core.crypto.SecureHash$SHA256:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Comparable<net.corda.core.utilities.ByteSequence>
  implements: []
  interface: false
  methods:
    allOnesHashFor(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
    compareTo(net.corda.core.utilities.ByteSequence):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
    componentHashAs(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    concatenate(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    concatenateAs(String, net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
      params:
        concatAlgorithm:
          annotation:
            - NotNull
          type: String
        other:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    copy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
    copyBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    create(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        str:
          annotation:
            - Nullable
          type: String
    createSHA256(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    generate(byte[]):
      annotations:
        - NotNull
      default: false
      type: protected
      returnType: net.corda.core.crypto.SecureHash
      params:
        data:
          annotation:
            - NotNull
          type: "byte[]"
    getBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    getOffset():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashAs(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    hashConcat(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    nonceHashAs(String, byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[], int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
    of(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    open():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayInputStream
    parse(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        str:
          annotation:
            - Nullable
          type: String
    prefixChars(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
      params:
        prefixLen:
          annotation: []
          type: int
    putTo(java.nio.ByteBuffer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        buffer:
          annotation:
            - NotNull
          type: java.nio.ByteBuffer
    random(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
    randomSHA256():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
    reHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    sha256(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        str:
          annotation:
            - NotNull
          type: String
    sha256(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    sha256Twice(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    slice(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        start:
          annotation: []
          type: int
        end:
          annotation: []
          type: int
    subSequence(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    take(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        "n":
          annotation: []
          type: int
    toHexString():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    writeTo(java.io.OutputStream):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        output:
          annotation:
            - NotNull
          type: java.io.OutputStream
    zeroHashFor(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        algorithm:
          annotation:
            - NotNull
          type: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SecureHash$Companion
    SHA2_256:
      annotation:
        - NotNull
      type: public static final String
      initialised value: SHA-256
    SHA2_384:
      annotation:
        - NotNull
      type: public static final String
      initialised value: SHA-384
    SHA2_512:
      annotation:
        - NotNull
      type: public static final String
      initialised value: SHA-512
    DELIMITER:
      annotation: []
      type: public static final char
      initialised value: ':'
    zeroHash:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SecureHash$SHA256
    allOnesHash:
      annotation:
        - NotNull
      type: public static final net.corda.core.crypto.SecureHash$SHA256
net.corda.core.crypto.SecureHashKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getAlgorithm(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$algorithm:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    hashAs(byte[], String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        $this$hashAs:
          annotation:
            - NotNull
          type: "byte[]"
        algorithm:
          annotation:
            - NotNull
          type: String
    hashAs(net.corda.core.utilities.OpaqueBytes, String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash
      params:
        $this$hashAs:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
        algorithm:
          annotation:
            - NotNull
          type: String
    isZero(net.corda.core.utilities.OpaqueBytes):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        $this$isZero:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
    sha256(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        $this$sha256:
          annotation:
            - NotNull
          type: "byte[]"
    sha256(net.corda.core.utilities.OpaqueBytes):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.crypto.SecureHash$SHA256
      params:
        $this$sha256:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
net.corda.core.crypto.SignableData:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SignatureMetadata
    copy(net.corda.core.crypto.SecureHash, net.corda.core.crypto.SignatureMetadata):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SignableData
      params:
        txId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        signatureMetadata:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureMetadata
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getSignatureMetadata():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SignatureMetadata
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.crypto.SignatureMetadata:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations: []
      default: false
      type: public final
      returnType: int
    component2():
      annotations: []
      default: false
      type: public final
      returnType: int
    copy(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SignatureMetadata
      params:
        platformVersion:
          annotation: []
          type: int
        schemeNumberID:
          annotation: []
          type: int
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getPlatformVersion():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSchemeNumberID():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.crypto.SignatureScheme:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations: []
      default: false
      type: public final
      returnType: int
    component10():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.bouncycastle.asn1.x509.AlgorithmIdentifier
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<org.bouncycastle.asn1.x509.AlgorithmIdentifier>
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component6():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component7():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component8():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.security.spec.AlgorithmParameterSpec
    component9():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Integer
    ? copy(int, String, org.bouncycastle.asn1.x509.AlgorithmIdentifier, java.util.List<?
      extends org.bouncycastle.asn1.x509.AlgorithmIdentifier>, String, String, String,
      java.security.spec.AlgorithmParameterSpec, Integer, String)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SignatureScheme
      params:
        schemeNumberID:
          annotation: []
          type: int
        schemeCodeName:
          annotation:
            - NotNull
          type: String
        signatureOID:
          annotation:
            - NotNull
          type: org.bouncycastle.asn1.x509.AlgorithmIdentifier
        alternativeOIDs:
          annotation:
            - NotNull
          type: java.util.List<? extends org.bouncycastle.asn1.x509.AlgorithmIdentifier>
        providerName:
          annotation:
            - NotNull
          type: String
        algorithmName:
          annotation:
            - NotNull
          type: String
        signatureName:
          annotation:
            - NotNull
          type: String
        algSpec:
          annotation:
            - Nullable
          type: java.security.spec.AlgorithmParameterSpec
        keySize:
          annotation:
            - Nullable
          type: Integer
        desc:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAlgSpec():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.security.spec.AlgorithmParameterSpec
    getAlgorithmName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getAlternativeOIDs():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<org.bouncycastle.asn1.x509.AlgorithmIdentifier>
    getDesc():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getKeySize():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Integer
    getProviderName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getSchemeCodeName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getSchemeNumberID():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSignatureName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getSignatureOID():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.bouncycastle.asn1.x509.AlgorithmIdentifier
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.crypto.SignedData:
  annotations:
    - CordaSerializable
  type: public class
  extends: null
  implements: []
  interface: false
  methods:
    getRaw():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializedBytes<T>
    getSig():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigitalSignature$WithKey
    verified():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
    verifyData(T):
      annotations: []
      default: false
      type: protected
      returnType: void
      params:
        data:
          annotation:
            - NotNull
          type: T
net.corda.core.crypto.TransactionSignature:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Comparable<net.corda.core.utilities.ByteSequence>
  implements: []
  interface: false
  methods:
    compareTo(net.corda.core.utilities.ByteSequence):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
    copy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
    copyBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getBy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
    getBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    getOffset():
      annotations: []
      default: false
      type: public final
      returnType: int
    getPartialMerkleTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree
    getSignatureMetadata():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SignatureMetadata
    getSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isValid(net.corda.core.crypto.SecureHash):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        txId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[], int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
    of(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    open():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayInputStream
    putTo(java.nio.ByteBuffer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        buffer:
          annotation:
            - NotNull
          type: java.nio.ByteBuffer
    slice(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        start:
          annotation: []
          type: int
        end:
          annotation: []
          type: int
    subSequence(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    take(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        "n":
          annotation: []
          type: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    verify(net.corda.core.crypto.SecureHash):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        txId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    writeTo(java.io.OutputStream):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        output:
          annotation:
            - NotNull
          type: java.io.OutputStream
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.OpaqueBytes$Companion
net.corda.core.flows.AbstractStateReplacementFlow:
  annotations: []
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.flows.AbstractStateReplacementFlow$Acceptor:
  annotations: []
  type: public abstract static class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public
      returnType: Void
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getInitiatingSession():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    ? verifyProposal(net.corda.core.transactions.SignedTransaction, net.corda.core.flows.AbstractStateReplacementFlow$Proposal<?
      extends T>)
    : annotations: []
      default: false
      type: protected abstract
      returnType: void
      params:
        stx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
        proposal:
          annotation:
            - NotNull
          type: net.corda.core.flows.AbstractStateReplacementFlow$Proposal<? extends
            T>
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.AbstractStateReplacementFlow$Acceptor$Companion
net.corda.core.flows.AbstractStateReplacementFlow$Acceptor$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    tracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
net.corda.core.flows.AbstractStateReplacementFlow$Acceptor$Companion$APPROVING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.AbstractStateReplacementFlow$Acceptor$Companion$APPROVING
net.corda.core.flows.AbstractStateReplacementFlow$Acceptor$Companion$VERIFYING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.AbstractStateReplacementFlow$Acceptor$Companion$VERIFYING
net.corda.core.flows.AbstractStateReplacementFlow$Instigator:
  annotations: []
  type: public abstract static class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    assembleTx():
      annotations:
        - NotNull
      default: false
      type: protected abstract
      returnType: net.corda.core.flows.AbstractStateReplacementFlow$UpgradeTx
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.contracts.StateAndRef<T>
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getModification():
      annotations: []
      default: false
      type: public final
      returnType: M
    getOriginalState():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<S>
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getParticipantSessions():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.List<kotlin.Pair<net.corda.core.flows.FlowSession, java.util.List<net.corda.core.identity.AbstractParty>>>"
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.AbstractStateReplacementFlow$Instigator$Companion
net.corda.core.flows.AbstractStateReplacementFlow$Instigator$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    tracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
net.corda.core.flows.AbstractStateReplacementFlow$Instigator$Companion$NOTARY:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.AbstractStateReplacementFlow$Instigator$Companion$NOTARY
net.corda.core.flows.AbstractStateReplacementFlow$Instigator$Companion$SIGNING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.AbstractStateReplacementFlow$Instigator$Companion$SIGNING
net.corda.core.flows.AbstractStateReplacementFlow$Proposal:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    component2():
      annotations: []
      default: false
      type: public final
      returnType: M
    copy(net.corda.core.contracts.StateRef, M):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.AbstractStateReplacementFlow$Proposal<M>
      params:
        stateRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
        modification:
          annotation: []
          type: M
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getModification():
      annotations: []
      default: false
      type: public final
      returnType: M
    getStateRef():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.AbstractStateReplacementFlow$UpgradeTx:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    copy(net.corda.core.transactions.SignedTransaction):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.AbstractStateReplacementFlow$UpgradeTx
      params:
        stx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getStx():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.CollectSignatureFlow:
  annotations:
    - Suspendable
  type: public final class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getPartiallySignedTx():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    getProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    getSession():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
    getSigningKeys():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.security.PublicKey>
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowLogic$Companion
net.corda.core.flows.CollectSignaturesFlow:
  annotations: []
  type: public final class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getMyOptionalKeys():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Iterable<java.security.PublicKey>
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getPartiallySignedTx():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    getSessionsToCollectFrom():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Collection<net.corda.core.flows.FlowSession>
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    tracker():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ProgressTracker
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.CollectSignaturesFlow$Companion
net.corda.core.flows.CollectSignaturesFlow$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    tracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
net.corda.core.flows.CollectSignaturesFlow$Companion$COLLECTING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.CollectSignaturesFlow$Companion$COLLECTING
net.corda.core.flows.CollectSignaturesFlow$Companion$VERIFYING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.CollectSignaturesFlow$Companion$VERIFYING
net.corda.core.flows.ComparableRecoveryTimeWindow:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    component2():
      annotations: []
      default: false
      type: public final
      returnType: int
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    component4():
      annotations: []
      default: false
      type: public final
      returnType: int
    copy(java.time.Instant, int, java.time.Instant, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.ComparableRecoveryTimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
        fromTimestampDiscriminator:
          annotation: []
          type: int
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
        untilTimestampDiscriminator:
          annotation: []
          type: int
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getFromTime():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    getFromTimestampDiscriminator():
      annotations: []
      default: false
      type: public final
      returnType: int
    getUntilTime():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    getUntilTimestampDiscriminator():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.ComparableRecoveryTimeWindow$Companion
net.corda.core.flows.ComparableRecoveryTimeWindow$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    from(net.corda.core.flows.RecoveryTimeWindow):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.ComparableRecoveryTimeWindow
      params:
        timeWindow:
          annotation:
            - NotNull
          type: net.corda.core.flows.RecoveryTimeWindow
net.corda.core.flows.ContractUpgradeFlow:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods: {}
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.ContractUpgradeFlow
net.corda.core.flows.ContractUpgradeFlow$Authorise:
  annotations:
    - StartableByRPC
  type: public static final class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public
      returnType: Void
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    getStateAndRef():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<?>
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowLogic$Companion
net.corda.core.flows.ContractUpgradeFlow$Deauthorise:
  annotations:
    - StartableByRPC
  type: public static final class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public
      returnType: Void
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    getStateRef():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowLogic$Companion
net.corda.core.flows.ContractUpgradeFlow$Initiate:
  annotations:
    - InitiatingFlow
    - StartableByRPC
  type: public static final class
  extends: T>>
  implements: []
  interface: false
  methods:
    assembleTx():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: protected
      returnType: net.corda.core.flows.AbstractStateReplacementFlow$UpgradeTx
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.contracts.StateAndRef<T>
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getModification():
      annotations: []
      default: false
      type: public final
      returnType: M
    getOriginalState():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<S>
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getParticipantSessions():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.List<kotlin.Pair<net.corda.core.flows.FlowSession, java.util.List<net.corda.core.identity.AbstractParty>>>"
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.AbstractStateReplacementFlow$Instigator$Companion
net.corda.core.flows.DataVendingFlow:
  annotations: []
  type: public class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public
      returnType: Void
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOtherSessions():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.flows.FlowSession>
    getOtherSideSession():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getPayload():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Object
    getProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isFinality():
      annotations: []
      default: false
      type: protected
      returnType: boolean
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sendPayloadAndReceiveDataRequest(net.corda.core.flows.FlowSession, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: protected
      returnType: net.corda.core.utilities.UntrustworthyData<net.corda.core.internal.FetchDataFlow$Request>
      params:
        otherSideSession:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowSession
        payload:
          annotation:
            - NotNull
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    verifyDataRequest(net.corda.core.internal.FetchDataFlow$Request$Data):
      annotations:
        - Suspendable
      default: false
      type: protected
      returnType: void
      params:
        dataRequest:
          annotation:
            - NotNull
          type: net.corda.core.internal.FetchDataFlow$Request$Data
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowLogic$Companion
net.corda.core.flows.Destination:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods: {}
net.corda.core.flows.DistributionList:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.flows.DistributionList$ReceiverDistributionList:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.DistributionList
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.StatesToRecord
    copy(byte[], net.corda.core.node.StatesToRecord):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.DistributionList$ReceiverDistributionList
      params:
        opaqueData:
          annotation:
            - NotNull
          type: "byte[]"
        receiverStatesToRecord:
          annotation:
            - NotNull
          type: net.corda.core.node.StatesToRecord
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getOpaqueData():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    getReceiverStatesToRecord():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.StatesToRecord
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.DistributionList$SenderDistributionList:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.DistributionList
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.StatesToRecord
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.identity.CordaX500Name, net.corda.core.node.StatesToRecord>"
    ? copy(net.corda.core.node.StatesToRecord, java.util.Map<net.corda.core.identity.CordaX500Name,
      ? extends net.corda.core.node.StatesToRecord>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.DistributionList$SenderDistributionList
      params:
        senderStatesToRecord:
          annotation:
            - NotNull
          type: net.corda.core.node.StatesToRecord
        peersToStatesToRecord:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.identity.CordaX500Name, ? extends net.corda.core.node.StatesToRecord>"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getPeersToStatesToRecord():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.identity.CordaX500Name, net.corda.core.node.StatesToRecord>"
    getSenderStatesToRecord():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.StatesToRecord
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.DistributionRecord:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements:
    - net.corda.core.contracts.NamedByHash
  interface: false
  methods:
    getId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
    getPeerPartyId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
    getTimestamp():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.time.Instant
    getTimestampDiscriminator():
      annotations: []
      default: false
      type: public abstract
      returnType: int
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
net.corda.core.flows.DistributionRecordKey:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    component3():
      annotations: []
      default: false
      type: public final
      returnType: int
    copy(net.corda.core.crypto.SecureHash, java.time.Instant, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.DistributionRecordKey
      params:
        txnId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        timestamp:
          annotation:
            - NotNull
          type: java.time.Instant
        timestampDiscriminator:
          annotation: []
          type: int
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getTimestamp():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    getTimestampDiscriminator():
      annotations: []
      default: false
      type: public final
      returnType: int
    getTxnId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.DistributionRecordType:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.flows.DistributionRecordType>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.flows.DistributionRecordType
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.flows.DistributionRecordType[]"
net.corda.core.flows.DistributionRecords:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getReceiverRecords():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.flows.ReceiverDistributionRecord>
    getSenderRecords():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.flows.SenderDistributionRecord>
    getSize():
      annotations: []
      default: false
      type: public final
      returnType: int
net.corda.core.flows.FinalityFlow:
  annotations:
    - InitiatingFlow
  type: public final class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    getTransaction():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    tracker():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ProgressTracker
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FinalityFlow$Companion
net.corda.core.flows.FinalityFlow$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    tracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
net.corda.core.flows.FinalityFlow$Companion$BROADCASTING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FinalityFlow$Companion$BROADCASTING
net.corda.core.flows.FinalityFlow$Companion$BROADCASTING_NOTARY_ERROR:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FinalityFlow$Companion$BROADCASTING_NOTARY_ERROR
net.corda.core.flows.FinalityFlow$Companion$BROADCASTING_POST_NOTARISATION:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FinalityFlow$Companion$BROADCASTING_POST_NOTARISATION
net.corda.core.flows.FinalityFlow$Companion$BROADCASTING_PRE_NOTARISATION:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FinalityFlow$Companion$BROADCASTING_PRE_NOTARISATION
net.corda.core.flows.FinalityFlow$Companion$FINALISING_TRANSACTION:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FinalityFlow$Companion$FINALISING_TRANSACTION
net.corda.core.flows.FinalityFlow$Companion$NOTARISING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FinalityFlow$Companion$NOTARISING
net.corda.core.flows.FinalityFlow$Companion$RECORD_UNNOTARISED:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FinalityFlow$Companion$RECORD_UNNOTARISED
net.corda.core.flows.FinalityRecoveryFlow:
  annotations:
    - InitiatingFlow
    - StartableByRPC
  type: public final class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowTransactionInfo, Boolean>"
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowLogic$Companion
net.corda.core.flows.FlowException:
  annotations:
    - CordaSerializable
  type: public class
  extends: net.corda.core.CordaThrowable
  implements:
    - net.corda.core.flows.IdentifiableException
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.flows.FlowExternalAsyncOperation:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    execute(String):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.concurrent.CompletableFuture<R>
      params:
        deduplicationId:
          annotation:
            - NotNull
          type: String
net.corda.core.flows.FlowExternalOperation:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    execute(String):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: R
      params:
        deduplicationId:
          annotation:
            - NotNull
          type: String
net.corda.core.flows.FlowInfo:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations: []
      default: false
      type: public final
      returnType: int
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(int, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        flowVersion:
          annotation: []
          type: int
        appName:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAppName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getFlowVersion():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.FlowInitiator:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements:
    - java.security.Principal
  interface: false
  methods:
    getInvocationContext():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
net.corda.core.flows.FlowInitiator$Peer:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.security.Principal
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    copy(net.corda.core.identity.Party):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInitiator$Peer
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getInvocationContext():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
    getName():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getParty():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.FlowInitiator$RPC:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.security.Principal
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInitiator$RPC
      params:
        username:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getInvocationContext():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
    getName():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getUsername():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.FlowInitiator$Scheduled:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.security.Principal
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ScheduledStateRef
    copy(net.corda.core.contracts.ScheduledStateRef):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInitiator$Scheduled
      params:
        scheduledState:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ScheduledStateRef
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getInvocationContext():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
    getName():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getScheduledState():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ScheduledStateRef
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.FlowInitiator$Service:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.security.Principal
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInitiator$Service
      params:
        serviceClassName:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getInvocationContext():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
    getName():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getServiceClassName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.FlowInitiator$Shell:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.security.Principal
  implements: []
  interface: false
  methods:
    getInvocationContext():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
    getName():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowInitiator$Shell
net.corda.core.flows.FlowLogic:
  annotations: []
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
      default: false
      type: public abstract
      returnType: T
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowLogic$Companion
net.corda.core.flows.FlowLogic$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowLogic<?>
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
net.corda.core.flows.FlowLogicRef:
  annotations:
    - CordaSerializable
  type: public interface
  extends: []
  interface: true
  methods: {}
net.corda.core.flows.FlowLogicRefFactory:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    create(Class<? extends net.corda.core.flows.FlowLogic<?>>, Object[]):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.flows.FlowLogicRef
      params:
        flowClass:
          annotation:
            - NotNull
          type: Class<? extends net.corda.core.flows.FlowLogic<?>>
        args:
          annotation:
            - NotNull
          type: "Object[]"
    create(String, Object[]):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.flows.FlowLogicRef
      params:
        flowClassName:
          annotation:
            - NotNull
          type: String
        args:
          annotation:
            - NotNull
          type: "Object[]"
    toFlowLogic(net.corda.core.flows.FlowLogicRef):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.flows.FlowLogic<?>
      params:
        ref:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogicRef
net.corda.core.flows.FlowRecoveryException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.flows.FlowRecoveryQuery:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowTimeWindow
    component2():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.CordaX500Name>
    component3():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.CordaX500Name>
    ? copy(net.corda.core.flows.FlowTimeWindow, java.util.List<net.corda.core.identity.CordaX500Name>,
      java.util.List<net.corda.core.identity.CordaX500Name>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowRecoveryQuery
      params:
        timeframe:
          annotation:
            - Nullable
          type: net.corda.core.flows.FlowTimeWindow
        initiatedBy:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.identity.CordaX500Name>
        counterParties:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.identity.CordaX500Name>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCounterParties():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.CordaX500Name>
    getInitiatedBy():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.CordaX500Name>
    getTimeframe():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowTimeWindow
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.FlowSession:
  annotations: []
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods:
    close():
      annotations:
        - Suspendable
      default: false
      type: public abstract
      returnType: void
    getCounterparty():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.identity.Party
    getCounterpartyFlowInfo():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.flows.FlowInfo
    getCounterpartyFlowInfo(boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.flows.FlowInfo
      params:
        maySkipCheckpoint:
          annotation: []
          type: boolean
    getDestination():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.flows.Destination
    receive():
      annotations:
        - Suspendable
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
    receive(Class<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
    receive(Class<R>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    send(Object):
      annotations:
        - Suspendable
      default: false
      type: public abstract
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
    send(Object, boolean):
      annotations:
        - Suspendable
      default: false
      type: public abstract
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(Class<R>, Object, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        payload:
          annotation:
            - NotNull
          type: Object
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Object):
      annotations:
        - Suspendable
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
net.corda.core.flows.FlowStackSnapshot:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.flows.FlowStackSnapshot$Frame>
    copy(java.time.Instant, String, java.util.List<net.corda.core.flows.FlowStackSnapshot$Frame>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
      params:
        time:
          annotation:
            - NotNull
          type: java.time.Instant
        flowClass:
          annotation:
            - NotNull
          type: String
        stackFrames:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.flows.FlowStackSnapshot$Frame>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getFlowClass():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getStackFrames():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.flows.FlowStackSnapshot$Frame>
    getTime():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.FlowStackSnapshot$Frame:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: StackTraceElement
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<Object>
    copy(StackTraceElement, java.util.List<?>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot$Frame
      params:
        stackTraceElement:
          annotation:
            - NotNull
          type: StackTraceElement
        stackObjects:
          annotation:
            - NotNull
          type: java.util.List<?>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getStackObjects():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<Object>
    getStackTraceElement():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: StackTraceElement
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.FlowTimeWindow:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    between(java.time.Instant, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowTimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
    component1():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Instant
    component2():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Instant
    copy(java.time.Instant, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowTimeWindow
      params:
        fromTime:
          annotation:
            - Nullable
          type: java.time.Instant
        untilTime:
          annotation:
            - Nullable
          type: java.time.Instant
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    fromOnly(java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowTimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
    getFromTime():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Instant
    getUntilTime():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Instant
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    untilOnly(java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowTimeWindow
      params:
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowTimeWindow$Companion
net.corda.core.flows.FlowTimeWindow$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    between(java.time.Instant, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowTimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
    fromOnly(java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowTimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
    untilOnly(java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowTimeWindow
      params:
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
net.corda.core.flows.FlowTransactionInfo:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.TransactionStatus
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    component5():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.TransactionMetadata
    ? copy(net.corda.core.flows.StateMachineRunId, String, net.corda.core.node.services.TransactionStatus,
      java.time.Instant, net.corda.core.flows.TransactionMetadata)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowTransactionInfo
      params:
        stateMachineRunId:
          annotation:
            - NotNull
          type: net.corda.core.flows.StateMachineRunId
        txId:
          annotation:
            - NotNull
          type: String
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.TransactionStatus
        timestamp:
          annotation:
            - NotNull
          type: java.time.Instant
        metadata:
          annotation:
            - Nullable
          type: net.corda.core.flows.TransactionMetadata
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getMetadata():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.TransactionMetadata
    getStateMachineRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getStatus():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.TransactionStatus
    getTimestamp():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isInitiator(net.corda.core.identity.CordaX500Name):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        myCordaX500Name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.HospitalizeFlowException:
  annotations:
    - CordaSerializable
  type: public class
  extends: net.corda.core.CordaThrowable
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.flows.IdentifiableException:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getErrorId():
      annotations:
        - Nullable
      default: true
      type: public
      returnType: Long
net.corda.core.flows.IllegalFlowLogicException:
  annotations: []
  type: public final class
  extends: java.lang.IllegalArgumentException
  implements: []
  interface: false
  methods:
    getType():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
net.corda.core.flows.InitiatedBy:
  annotations: []
  type: public @interface
  interface: false
  methods:
    value():
      annotations: []
      default: false
      type: public abstract
      returnType: Class<? extends net.corda.core.flows.FlowLogic<?>>
net.corda.core.flows.InitiatingFlow:
  annotations: []
  type: public @interface
  interface: false
  methods:
    version():
      annotations: []
      default: false
      type: public abstract
      returnType: int
net.corda.core.flows.KilledFlowException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.CordaThrowable
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.flows.LedgerRecoveryException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.flows.LedgerRecoveryFlow:
  annotations:
    - StartableByRPC
  type: public final class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.flows.LedgerRecoveryResult
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowLogic$Companion
net.corda.core.flows.LedgerRecoveryParameters:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Collection<net.corda.core.identity.Party>
    component2():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.RecoveryTimeWindow
    component3():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    component4():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    component5():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    component6():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    component7():
      annotations: []
      default: false
      type: public final
      returnType: int
    component8():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    ? copy(java.util.Collection<net.corda.core.identity.Party>, net.corda.core.flows.RecoveryTimeWindow,
      boolean, boolean, boolean, boolean, int, boolean)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.LedgerRecoveryParameters
      params:
        recoveryPeers:
          annotation:
            - NotNull
          type: java.util.Collection<net.corda.core.identity.Party>
        timeWindow:
          annotation:
            - Nullable
          type: net.corda.core.flows.RecoveryTimeWindow
        useAllNetworkNodes:
          annotation: []
          type: boolean
        dryRun:
          annotation: []
          type: boolean
        useTimeWindowNarrowing:
          annotation: []
          type: boolean
        verboseLogging:
          annotation: []
          type: boolean
        recoveryBatchSize:
          annotation: []
          type: int
        alsoFinalize:
          annotation: []
          type: boolean
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAlsoFinalize():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    getDryRun():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    getRecoveryBatchSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    getRecoveryPeers():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Collection<net.corda.core.identity.Party>
    getTimeWindow():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.RecoveryTimeWindow
    getUseAllNetworkNodes():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    getUseTimeWindowNarrowing():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    getVerboseLogging():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.LedgerRecoveryResult:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations: []
      default: false
      type: public final
      returnType: long
    component2():
      annotations: []
      default: false
      type: public final
      returnType: long
    component3():
      annotations: []
      default: false
      type: public final
      returnType: long
    component4():
      annotations: []
      default: false
      type: public final
      returnType: long
    copy(long, long, long, long):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.LedgerRecoveryResult
      params:
        totalRecoveredRecords:
          annotation: []
          type: long
        totalRecoveredTransactions:
          annotation: []
          type: long
        totalRecoveredInFlightTransactions:
          annotation: []
          type: long
        totalErrors:
          annotation: []
          type: long
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getTotalErrors():
      annotations: []
      default: false
      type: public final
      returnType: long
    getTotalRecoveredInFlightTransactions():
      annotations: []
      default: false
      type: public final
      returnType: long
    getTotalRecoveredRecords():
      annotations: []
      default: false
      type: public final
      returnType: long
    getTotalRecoveredTransactions():
      annotations: []
      default: false
      type: public final
      returnType: long
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.MaybeSerializedSignedTransaction:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.contracts.NamedByHash
  interface: false
  methods:
    get():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getInFlight():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    getNonSerialised():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    getSerialized():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializedBytes<net.corda.core.transactions.SignedTransaction>
    isNull():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    payloadContentDescription():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    serializedByteCount():
      annotations: []
      default: false
      type: public final
      returnType: int
net.corda.core.flows.NotarisationPayload:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Object
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.NotarisationRequestSignature
    copy(Object, net.corda.core.flows.NotarisationRequestSignature):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.NotarisationPayload
      params:
        transaction:
          annotation:
            - NotNull
          type: Object
        requestSignature:
          annotation:
            - NotNull
          type: net.corda.core.flows.NotarisationRequestSignature
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCoreTransaction():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.CoreTransaction
    getRequestSignature():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.NotarisationRequestSignature
    getSignedTransaction():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    getTransaction():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Object
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.NotarisationRequest:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getStatesToConsume():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getTransactionId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotarisationRequest$Companion
net.corda.core.flows.NotarisationRequest$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.flows.NotarisationRequestSignature:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigitalSignature$WithKey
    component2():
      annotations: []
      default: false
      type: public final
      returnType: int
    copy(net.corda.core.crypto.DigitalSignature$WithKey, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.NotarisationRequestSignature
      params:
        digitalSignature:
          annotation:
            - NotNull
          type: net.corda.core.crypto.DigitalSignature$WithKey
        platformVersion:
          annotation: []
          type: int
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getDigitalSignature():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigitalSignature$WithKey
    getPlatformVersion():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.NotarisationResponse:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    copy(java.util.List<net.corda.core.crypto.TransactionSignature>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.NotarisationResponse
      params:
        signatures:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.crypto.TransactionSignature>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getSignatures():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.NotaryChangeFlow:
  annotations:
    - InitiatingFlow
  type: public final class
  extends: T>>
  implements: []
  interface: false
  methods:
    assembleTx():
      annotations:
        - NotNull
      default: false
      type: protected
      returnType: net.corda.core.flows.AbstractStateReplacementFlow$UpgradeTx
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.contracts.StateAndRef<T>
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getModification():
      annotations: []
      default: false
      type: public final
      returnType: M
    getOriginalState():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<S>
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getParticipantSessions():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.List<kotlin.Pair<net.corda.core.flows.FlowSession, java.util.List<net.corda.core.identity.AbstractParty>>>"
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.AbstractStateReplacementFlow$Instigator$Companion
net.corda.core.flows.NotaryError:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods: {}
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotaryError$Companion
    NUM_STATES:
      annotation: []
      type: public static final int
      initialised value: 5
net.corda.core.flows.NotaryError$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.flows.NotaryError$Conflict:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.NotaryError
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.contracts.StateRef, net.corda.core.flows.StateConsumptionDetails>"
    ? copy(net.corda.core.crypto.SecureHash, java.util.Map<net.corda.core.contracts.StateRef,
      net.corda.core.flows.StateConsumptionDetails>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.NotaryError$Conflict
      params:
        txId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        consumedStates:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.contracts.StateRef, net.corda.core.flows.StateConsumptionDetails>"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getConsumedStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.contracts.StateRef, net.corda.core.flows.StateConsumptionDetails>"
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotaryError$Companion
    NUM_STATES:
      annotation: []
      type: public static final int
      initialised value: 5
net.corda.core.flows.NotaryError$General:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.NotaryError
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Throwable
    copy(Throwable):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.NotaryError$General
      params:
        cause:
          annotation:
            - NotNull
          type: Throwable
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Throwable
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotaryError$Companion
    NUM_STATES:
      annotation: []
      type: public static final int
      initialised value: 5
net.corda.core.flows.NotaryError$RequestSignatureInvalid:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.NotaryError
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Throwable
    copy(Throwable):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.NotaryError$RequestSignatureInvalid
      params:
        cause:
          annotation:
            - NotNull
          type: Throwable
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Throwable
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotaryError$Companion
    NUM_STATES:
      annotation: []
      type: public static final int
      initialised value: 5
net.corda.core.flows.NotaryError$TimeWindowInvalid:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.NotaryError
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.TimeWindow
    copy(java.time.Instant, net.corda.core.contracts.TimeWindow):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.NotaryError$TimeWindowInvalid
      params:
        currentTime:
          annotation:
            - NotNull
          type: java.time.Instant
        txTimeWindow:
          annotation:
            - NotNull
          type: net.corda.core.contracts.TimeWindow
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCurrentTime():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    getTxTimeWindow():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.TimeWindow
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotaryError$TimeWindowInvalid$Companion
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotaryError$TimeWindowInvalid
    NUM_STATES:
      annotation: []
      type: public static final int
      initialised value: 5
net.corda.core.flows.NotaryError$TimeWindowInvalid$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.flows.NotaryError$TransactionInvalid:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.NotaryError
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Throwable
    copy(Throwable):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.NotaryError$TransactionInvalid
      params:
        cause:
          annotation:
            - NotNull
          type: Throwable
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Throwable
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotaryError$Companion
    NUM_STATES:
      annotation: []
      type: public static final int
      initialised value: 5
net.corda.core.flows.NotaryError$WrongNotary:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.flows.NotaryError
  implements: []
  interface: false
  methods: {}
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotaryError$WrongNotary
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotaryError$Companion
    NUM_STATES:
      annotation: []
      type: public static final int
      initialised value: 5
net.corda.core.flows.NotaryException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getError():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.NotaryError
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getTxId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.flows.NotaryFlow:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.flows.NotaryFlow$Client:
  annotations:
    - InitiatingFlow
  type: public static class
  extends: net.corda.core.internal.TimedFlow
  implements: []
  interface: false
  methods:
    applyWaitTimeUpdate(net.corda.core.flows.FlowSession, net.corda.core.flows.WaitTimeUpdate):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        session:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowSession
        update:
          annotation:
            - NotNull
          type: net.corda.core.flows.WaitTimeUpdate
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    checkTransaction():
      annotations:
        - NotNull
      default: false
      type: protected final
      returnType: net.corda.core.identity.Party
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    notarise(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: protected final
      returnType: net.corda.core.utilities.UntrustworthyData<net.corda.core.flows.NotarisationResponse>
      params:
        notaryParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    ? validateResponse(net.corda.core.utilities.UntrustworthyData<net.corda.core.flows.NotarisationResponse>,
      net.corda.core.identity.Party)
    : annotations:
        - NotNull
      default: false
      type: protected final
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
      params:
        response:
          annotation:
            - NotNull
          type: net.corda.core.utilities.UntrustworthyData<net.corda.core.flows.NotarisationResponse>
        notaryParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotaryFlow$Client$Companion
net.corda.core.flows.NotaryFlow$Client$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    tracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
net.corda.core.flows.NotaryFlow$Client$Companion$REQUESTING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotaryFlow$Client$Companion$REQUESTING
net.corda.core.flows.NotaryFlow$Client$Companion$VALIDATING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotaryFlow$Client$Companion$VALIDATING
net.corda.core.flows.NotarySigCheck:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    needsNotarySignature(net.corda.core.transactions.SignedTransaction):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        stx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.NotarySigCheck
net.corda.core.flows.ReceiveFinalityFlow:
  annotations: []
  type: public final class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowLogic$Companion
net.corda.core.flows.ReceiveStateAndRefFlow:
  annotations: []
  type: public final class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowLogic$Companion
net.corda.core.flows.ReceiveTransactionFlow:
  annotations: []
  type: public class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
    checkBeforeRecording(net.corda.core.transactions.SignedTransaction):
      annotations:
        - Suspendable
      default: false
      type: protected
      returnType: void
      params:
        stx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    resolvePayload(Object):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        payload:
          annotation:
            - NotNull
          type: Object
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowLogic$Companion
net.corda.core.flows.ReceiverDistributionRecord:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.contracts.NamedByHash
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    component4():
      annotations: []
      default: false
      type: public final
      returnType: int
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.OpaqueBytes
    component6():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.StatesToRecord
    ? copy(net.corda.core.crypto.SecureHash, net.corda.core.crypto.SecureHash, java.time.Instant,
      int, net.corda.core.utilities.OpaqueBytes, net.corda.core.node.StatesToRecord)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.ReceiverDistributionRecord
      params:
        txId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        peerPartyId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        timestamp:
          annotation:
            - NotNull
          type: java.time.Instant
        timestampDiscriminator:
          annotation: []
          type: int
        encryptedDistributionList:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
        receiverStatesToRecord:
          annotation:
            - NotNull
          type: net.corda.core.node.StatesToRecord
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getEncryptedDistributionList():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.OpaqueBytes
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getPeerPartyId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getReceiverStatesToRecord():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.StatesToRecord
    getTimestamp():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.time.Instant
    getTimestampDiscriminator():
      annotations: []
      default: false
      type: public
      returnType: int
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.RecoveryTimeWindow:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    between(java.time.Instant, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.flows.RecoveryTimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    copy(java.time.Instant, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.RecoveryTimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    fromOnly(java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.flows.RecoveryTimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
    getFromTime():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    getUntilTime():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    untilOnly(java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.flows.RecoveryTimeWindow
      params:
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.RecoveryTimeWindow$Companion
net.corda.core.flows.RecoveryTimeWindow$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    between(java.time.Instant, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.RecoveryTimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
    fromOnly(java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.RecoveryTimeWindow
      params:
        fromTime:
          annotation:
            - NotNull
          type: java.time.Instant
    untilOnly(java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.RecoveryTimeWindow
      params:
        untilTime:
          annotation:
            - NotNull
          type: java.time.Instant
net.corda.core.flows.ResultSerializationException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.CordaThrowable
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.flows.SchedulableFlow:
  annotations: []
  type: public @interface
  interface: false
  methods: {}
net.corda.core.flows.SendStateAndRefFlow:
  annotations: []
  type: public class
  extends: net.corda.core.flows.FlowLogic<java.lang.Void>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public
      returnType: Void
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOtherSessions():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.flows.FlowSession>
    getOtherSideSession():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getPayload():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Object
    getProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isFinality():
      annotations: []
      default: false
      type: protected
      returnType: boolean
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sendPayloadAndReceiveDataRequest(net.corda.core.flows.FlowSession, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: protected
      returnType: net.corda.core.utilities.UntrustworthyData<net.corda.core.internal.FetchDataFlow$Request>
      params:
        otherSideSession:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowSession
        payload:
          annotation:
            - NotNull
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    verifyDataRequest(net.corda.core.internal.FetchDataFlow$Request$Data):
      annotations:
        - Suspendable
      default: false
      type: protected
      returnType: void
      params:
        dataRequest:
          annotation:
            - NotNull
          type: net.corda.core.internal.FetchDataFlow$Request$Data
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.FlowLogic$Companion
net.corda.core.flows.SendTransactionFlow:
  annotations: []
  type: public class
  extends: net.corda.core.flows.FlowLogic<java.lang.Void>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public
      returnType: Void
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getObserverSessions():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.flows.FlowSession>
    getOtherSessions():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.flows.FlowSession>
    getOtherSideSession():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getParticipantSessions():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.flows.FlowSession>
    getPayload():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Object
    getProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getSenderStatesToRecord():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.StatesToRecord
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    getStx():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isFinality():
      annotations: []
      default: false
      type: protected
      returnType: boolean
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sendPayloadAndReceiveDataRequest(net.corda.core.flows.FlowSession, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: protected
      returnType: net.corda.core.utilities.UntrustworthyData<net.corda.core.internal.FetchDataFlow$Request>
      params:
        otherSideSession:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowSession
        payload:
          annotation:
            - NotNull
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    verifyDataRequest(net.corda.core.internal.FetchDataFlow$Request$Data):
      annotations:
        - Suspendable
      default: false
      type: protected
      returnType: void
      params:
        dataRequest:
          annotation:
            - NotNull
          type: net.corda.core.internal.FetchDataFlow$Request$Data
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.SendTransactionFlow$Companion
net.corda.core.flows.SendTransactionFlow$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    getDUMMY_PARTICIPANT_NAME():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
    ? makeMetaData(net.corda.core.transactions.SignedTransaction, boolean, net.corda.core.node.StatesToRecord,
      java.util.Set<? extends net.corda.core.flows.FlowSession>, java.util.Set<? extends
      net.corda.core.flows.FlowSession>)
    : annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.TransactionMetadata
      params:
        stx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
        recordMetaDataEvenIfNotFullySigned:
          annotation: []
          type: boolean
        senderStatesToRecord:
          annotation:
            - NotNull
          type: net.corda.core.node.StatesToRecord
        participantSessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        observerSessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
net.corda.core.flows.SenderDistributionRecord:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.contracts.NamedByHash
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    component4():
      annotations: []
      default: false
      type: public final
      returnType: int
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.StatesToRecord
    component6():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.StatesToRecord
    ? copy(net.corda.core.crypto.SecureHash, net.corda.core.crypto.SecureHash, java.time.Instant,
      int, net.corda.core.node.StatesToRecord, net.corda.core.node.StatesToRecord)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.SenderDistributionRecord
      params:
        txId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        peerPartyId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        timestamp:
          annotation:
            - NotNull
          type: java.time.Instant
        timestampDiscriminator:
          annotation: []
          type: int
        senderStatesToRecord:
          annotation:
            - NotNull
          type: net.corda.core.node.StatesToRecord
        receiverStatesToRecord:
          annotation:
            - NotNull
          type: net.corda.core.node.StatesToRecord
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getPeerPartyId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getReceiverStatesToRecord():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.StatesToRecord
    getSenderStatesToRecord():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.StatesToRecord
    getTimestamp():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.time.Instant
    getTimestampDiscriminator():
      annotations: []
      default: false
      type: public
      returnType: int
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.SignTransactionFlow:
  annotations: []
  type: public abstract class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    checkTransaction(net.corda.core.transactions.SignedTransaction):
      annotations:
        - Suspendable
      default: false
      type: protected abstract
      returnType: void
      params:
        stx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOtherSideSession():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    tracker():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ProgressTracker
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.SignTransactionFlow$Companion
net.corda.core.flows.SignTransactionFlow$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    tracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
net.corda.core.flows.SignTransactionFlow$Companion$RECEIVING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.SignTransactionFlow$Companion$RECEIVING
net.corda.core.flows.SignTransactionFlow$Companion$SIGNING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.SignTransactionFlow$Companion$SIGNING
net.corda.core.flows.SignTransactionFlow$Companion$VERIFYING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.SignTransactionFlow$Companion$VERIFYING
net.corda.core.flows.SignedTransactionWithDistributionList:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    component3():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    copy(net.corda.core.transactions.SignedTransaction, byte[], boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.SignedTransactionWithDistributionList
      params:
        stx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
        distributionList:
          annotation:
            - NotNull
          type: "byte[]"
        isFinality:
          annotation: []
          type: boolean
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getDistributionList():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    getStx():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isFinality():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.StackFrameDataToken:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StackFrameDataToken
      params:
        className:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getClassName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.StartableByRPC:
  annotations: []
  type: public @interface
  interface: false
  methods: {}
net.corda.core.flows.StartableByService:
  annotations: []
  type: public @interface
  interface: false
  methods: {}
net.corda.core.flows.StateConsumptionDetails:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateConsumptionDetails$ConsumedStateType
    copy(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateConsumptionDetails
      params:
        hashOfTransactionId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    copy(net.corda.core.crypto.SecureHash, net.corda.core.flows.StateConsumptionDetails$ConsumedStateType):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateConsumptionDetails
      params:
        hashOfTransactionId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        type:
          annotation:
            - NotNull
          type: net.corda.core.flows.StateConsumptionDetails$ConsumedStateType
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getHashOfTransactionId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getType():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateConsumptionDetails$ConsumedStateType
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.StateConsumptionDetails$ConsumedStateType:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.flows.StateConsumptionDetails$ConsumedStateType>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.flows.StateConsumptionDetails$ConsumedStateType
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.flows.StateConsumptionDetails$ConsumedStateType[]"
net.corda.core.flows.StateMachineRunId:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.UUID
    copy(java.util.UUID):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
      params:
        uuid:
          annotation:
            - NotNull
          type: java.util.UUID
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getUuid():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.UUID
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.StateMachineRunId$Companion
net.corda.core.flows.StateMachineRunId$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    createRandom():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
net.corda.core.flows.StateReplacementException:
  annotations:
    - CordaSerializable
  type: public class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.flows.TransactionMetadata:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.DistributionList
    copy(net.corda.core.identity.CordaX500Name, net.corda.core.flows.DistributionList):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.TransactionMetadata
      params:
        initiator:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
        distributionList:
          annotation:
            - NotNull
          type: net.corda.core.flows.DistributionList
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getDistributionList():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.DistributionList
    getInitiator():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.UnexpectedFlowEndException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.CordaThrowable
  implements:
    - net.corda.core.flows.IdentifiableException
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.flows.WaitTimeUpdate:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Duration
    copy(java.time.Duration):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.WaitTimeUpdate
      params:
        waitTime:
          annotation:
            - NotNull
          type: java.time.Duration
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getWaitTime():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Duration
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.flows.WithReferencedStatesFlow:
  annotations: []
  type: public final class
  extends: net.corda.core.flows.FlowLogic<T>
  implements: []
  interface: false
  methods:
    await(net.corda.core.flows.FlowExternalAsyncOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalAsyncOperation<R>
    await(net.corda.core.flows.FlowExternalOperation<R>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: R
      params:
        operation:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowExternalOperation<R>
    call():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: T
    checkFlowIsNotKilled():
      annotations: []
      default: false
      type: public final
      returnType: void
    checkFlowIsNotKilled(kotlin.jvm.functions.Function0<?>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        lazyMessage:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<?>
    checkFlowPermission(String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        permissionName:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    close(net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        sessions:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.flows.FlowSession>
    flowStackSnapshot():
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowStackSnapshot
    getCurrentTopLevel():
      annotations:
        - Nullable
      default: false
      type: public static final
      returnType: net.corda.core.flows.FlowLogic<?>
    getFlowInfo(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInfo
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getLogger():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: org.slf4j.Logger
    getOurIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOurIdentityAndCert():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    getRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.ServiceHub
    initiateFlow(net.corda.core.flows.Destination):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        destination:
          annotation:
            - NotNull
          type: net.corda.core.flows.Destination
    initiateFlow(net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowSession
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isKilled():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    persistFlowStackSnapshot():
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
    receive(Class<R>, net.corda.core.identity.Party):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    receive(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: net.corda.core.identity.Party
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
    receiveAll(Class<R>, java.util.List<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.UntrustworthyData<R>>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        sessions:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
    receiveAllMap(java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<net.corda.core.flows.FlowSession, net.corda.core.utilities.UntrustworthyData<Object>>"
      params:
        sessions:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ? extends Class<?>>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    recordAuditEvent(String, String, java.util.Map<String, String>):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        eventType:
          annotation:
            - NotNull
          type: String
        comment:
          annotation:
            - NotNull
          type: String
        extraAuditData:
          annotation:
            - NotNull
          type: "java.util.Map<String, String>"
    send(net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: void
      params:
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
    sendAll(Object, java.util.Set<? extends net.corda.core.flows.FlowSession>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payload:
          annotation:
            - NotNull
          type: Object
        sessions:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.flows.FlowSession>
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
    sendAllMap(java.util.Map<net.corda.core.flows.FlowSession, ?>, boolean):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        payloadsPerSession:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.flows.FlowSession, ?>"
        maySkipCheckpoint:
          annotation: []
          type: boolean
    sendAndReceive(Class<R>, net.corda.core.identity.Party, Object):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        receiveType:
          annotation:
            - NotNull
          type: Class<R>
        otherParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        payload:
          annotation:
            - NotNull
          type: Object
    sendAndReceive(net.corda.core.identity.Party, Object):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.utilities.UntrustworthyData<R>
      params:
        "null":
          annotation: []
          type: Object
    sleep(java.time.Duration):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
    sleep(java.time.Duration, boolean):
      annotations:
        - Suspendable
      default: false
      type: public static final
      returnType: void
      params:
        duration:
          annotation:
            - NotNull
          type: java.time.Duration
        maySkipCheckpoint:
          annotation: []
          type: boolean
    subFlow(net.corda.core.flows.FlowLogic<? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public
      returnType: R
      params:
        subLogic:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends R>
    track():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    trackStepsTree():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    trackStepsTreeIndex():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    tracker():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ProgressTracker
    waitForLedgerCommit(net.corda.core.crypto.SecureHash):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    waitForLedgerCommit(net.corda.core.crypto.SecureHash, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        maySkipCheckpoint:
          annotation: []
          type: boolean
    waitForStateConsumption(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: void
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.WithReferencedStatesFlow$Companion
net.corda.core.flows.WithReferencedStatesFlow$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    tracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
net.corda.core.flows.WithReferencedStatesFlow$Companion$ATTEMPT:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.WithReferencedStatesFlow$Companion$ATTEMPT
net.corda.core.flows.WithReferencedStatesFlow$Companion$RETRYING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.WithReferencedStatesFlow$Companion$RETRYING
net.corda.core.flows.WithReferencedStatesFlow$Companion$SUCCESS:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.flows.WithReferencedStatesFlow$Companion$SUCCESS
net.corda.core.flows.WrappedFlowExternalAsyncOperation:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.internal.FlowAsyncOperation
  interface: false
  methods:
    execute(String):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.concurrent.CordaFuture<R>
      params:
        deduplicationId:
          annotation:
            - NotNull
          type: String
    getOperation():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowExternalAsyncOperation<R>
net.corda.core.flows.WrappedFlowExternalOperation:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.internal.FlowAsyncOperation
  interface: false
  methods:
    execute(String):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.concurrent.CordaFuture<R>
      params:
        deduplicationId:
          annotation:
            - NotNull
          type: String
    getOperation():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowExternalOperation<R>
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.internal.ServiceHubCoreInternal
net.corda.core.identity.AbstractParty:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements:
    - net.corda.core.flows.Destination
  interface: false
  methods:
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getOwningKey():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    nameOrNull():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.CordaX500Name
    ref(byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PartyAndReference
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    ref(net.corda.core.utilities.OpaqueBytes):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.PartyAndReference
      params:
        bytes:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.identity.AbstractParty$Companion
net.corda.core.identity.AnonymousParty:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.flows.Destination
  implements:
    - net.corda.core.flows.Destination
  interface: false
  methods:
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getOwningKey():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    nameOrNull():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.identity.CordaX500Name
    ref(byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PartyAndReference
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    ref(net.corda.core.utilities.OpaqueBytes):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.contracts.PartyAndReference
      params:
        bytes:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.identity.AnonymousParty$Companion
net.corda.core.identity.AnonymousParty$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    create(java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.AnonymousParty
      params:
        owningKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
net.corda.core.identity.CordaX500Name:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    build(javax.security.auth.x500.X500Principal):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.identity.CordaX500Name
      params:
        principal:
          annotation:
            - NotNull
          type: javax.security.auth.x500.X500Principal
    component1():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    component2():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component5():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    component6():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(String, String, String, String, String, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
      params:
        commonName:
          annotation:
            - Nullable
          type: String
        organisationUnit:
          annotation:
            - Nullable
          type: String
        organisation:
          annotation:
            - NotNull
          type: String
        locality:
          annotation:
            - NotNull
          type: String
        state:
          annotation:
            - Nullable
          type: String
        country:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCommonName():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    getCountry():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getLocality():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getOrganisation():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getOrganisationUnit():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    getState():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    getX500Principal():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: javax.security.auth.x500.X500Principal
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    parse(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.identity.CordaX500Name
      params:
        name:
          annotation:
            - NotNull
          type: String
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.identity.CordaX500Name$Companion
    LENGTH_COUNTRY:
      annotation: []
      type: public static final int
      initialised value: 2
    MAX_LENGTH_ORGANISATION:
      annotation: []
      type: public static final int
      initialised value: 128
    MAX_LENGTH_LOCALITY:
      annotation: []
      type: public static final int
      initialised value: 64
    MAX_LENGTH_STATE:
      annotation: []
      type: public static final int
      initialised value: 64
    MAX_LENGTH_ORGANISATION_UNIT:
      annotation: []
      type: public static final int
      initialised value: 64
    MAX_LENGTH_COMMON_NAME:
      annotation: []
      type: public static final int
      initialised value: 64
net.corda.core.identity.CordaX500Name$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements:
    - net.corda.core.internal.utilities.Internable
  interface: false
  methods:
    build(javax.security.auth.x500.X500Principal):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
      params:
        principal:
          annotation:
            - NotNull
          type: javax.security.auth.x500.X500Principal
    getInterner():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.internal.utilities.PrivateInterner<net.corda.core.identity.CordaX500Name>
    parse(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
      params:
        name:
          annotation:
            - NotNull
          type: String
net.corda.core.identity.IdentityUtils:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    excludeHostNode(net.corda.core.node.ServiceHub, java.util.Map<net.corda.core.identity.Party, ? extends T>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "java.util.Map<net.corda.core.identity.Party, T>"
      params:
        serviceHub:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
        map:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.identity.Party, ? extends T>"
    excludeNotary(java.util.Map<net.corda.core.identity.Party, ? extends T>, net.corda.core.transactions.SignedTransaction):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "java.util.Map<net.corda.core.identity.Party, T>"
      params:
        map:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.identity.Party, ? extends T>"
        stx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
    ? groupAbstractPartyByWellKnownParty(net.corda.core.node.ServiceHub, java.util.Collection<?
      extends net.corda.core.identity.AbstractParty>)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "java.util.Map<net.corda.core.identity.Party, java.util.List<net.corda.core.identity.AbstractParty>>"
      params:
        serviceHub:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
        parties:
          annotation:
            - NotNull
          type: java.util.Collection<? extends net.corda.core.identity.AbstractParty>
    ? groupAbstractPartyByWellKnownParty(net.corda.core.node.ServiceHub, java.util.Collection<?
      extends net.corda.core.identity.AbstractParty>, boolean)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "java.util.Map<net.corda.core.identity.Party, java.util.List<net.corda.core.identity.AbstractParty>>"
      params:
        serviceHub:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
        parties:
          annotation:
            - NotNull
          type: java.util.Collection<? extends net.corda.core.identity.AbstractParty>
        ignoreUnrecognisedParties:
          annotation: []
          type: boolean
    groupPublicKeysByWellKnownParty(net.corda.core.node.ServiceHub, java.util.Collection<? extends java.security.PublicKey>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "java.util.Map<net.corda.core.identity.Party, java.util.List<java.security.PublicKey>>"
      params:
        serviceHub:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
        publicKeys:
          annotation:
            - NotNull
          type: java.util.Collection<? extends java.security.PublicKey>
    ? groupPublicKeysByWellKnownParty(net.corda.core.node.ServiceHub, java.util.Collection<?
      extends java.security.PublicKey>, boolean)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "java.util.Map<net.corda.core.identity.Party, java.util.List<java.security.PublicKey>>"
      params:
        serviceHub:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
        publicKeys:
          annotation:
            - NotNull
          type: java.util.Collection<? extends java.security.PublicKey>
        ignoreUnrecognisedParties:
          annotation: []
          type: boolean
    x500Matches(String, boolean, net.corda.core.identity.CordaX500Name):
      annotations: []
      default: false
      type: public static final
      returnType: boolean
      params:
        query:
          annotation:
            - NotNull
          type: String
        exactMatch:
          annotation: []
          type: boolean
        x500name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
net.corda.core.identity.Party:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.flows.Destination
  implements:
    - net.corda.core.flows.Destination
  interface: false
  methods:
    anonymise():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.AnonymousParty
    description():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
    getOwningKey():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    nameOrNull():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.identity.CordaX500Name
    ref(byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PartyAndReference
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    ref(net.corda.core.utilities.OpaqueBytes):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.contracts.PartyAndReference
      params:
        bytes:
          annotation:
            - NotNull
          type: net.corda.core.utilities.OpaqueBytes
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.identity.Party$Companion
net.corda.core.identity.Party$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    create(java.security.cert.X509Certificate):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
      params:
        certificate:
          annotation:
            - NotNull
          type: java.security.cert.X509Certificate
    create(net.corda.core.identity.CordaX500Name, java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
        owningKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
net.corda.core.identity.PartyAndCertificate:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.cert.X509Certificate
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCertPath():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.cert.CertPath
    getCertificate():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.cert.X509Certificate
    getName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.CordaX500Name
    getOwningKey():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.PublicKey
    getParty():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    verify(java.security.cert.TrustAnchor):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.cert.PKIXCertPathValidatorResult
      params:
        trustAnchor:
          annotation:
            - NotNull
          type: java.security.cert.TrustAnchor
    verify(java.util.Set<? extends java.security.cert.TrustAnchor>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.security.cert.PKIXCertPathValidatorResult
      params:
        trustAnchors:
          annotation:
            - NotNull
          type: java.util.Set<? extends java.security.cert.TrustAnchor>
net.corda.core.messaging.AllPossibleRecipients:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.messaging.MessageRecipients
  interface: true
  methods: {}
net.corda.core.messaging.ClientRpcSslOptions:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.file.Path
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(java.nio.file.Path, String, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.ClientRpcSslOptions
      params:
        trustStorePath:
          annotation:
            - NotNull
          type: java.nio.file.Path
        trustStorePassword:
          annotation:
            - NotNull
          type: String
        trustStoreProvider:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getTrustStorePassword():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getTrustStorePath():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.file.Path
    getTrustStoreProvider():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.messaging.CordaRPCOps:
  annotations: []
  type: public interface
  extends:
    - net.corda.core.messaging.RPCOps
  interface: true
  methods:
    acceptNewNetworkParameters(net.corda.core.crypto.SecureHash):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        parametersHash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    addVaultTransactionNote(net.corda.core.crypto.SecureHash, String):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        txnId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        txnNote:
          annotation:
            - NotNull
          type: String
    attachmentExists(net.corda.core.crypto.SecureHash):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    clearNetworkMapCache():
      annotations: []
      default: false
      type: public abstract
      returnType: void
    currentNodeTime():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.time.Instant
    finishedFlowsWithClientIds():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "java.util.Map<String, Boolean>"
    finishedFlowsWithClientIdsAsAdmin():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "java.util.Map<String, Boolean>"
    getNetworkParameters():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.NetworkParameters
    getProtocolVersion():
      annotations: []
      default: false
      type: public abstract
      returnType: int
    getVaultTransactionNotes(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Iterable<String>
      params:
        txnId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    internalVerifiedTransactionsFeed():
      annotations:
        - RPCReturnsObservables
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<net.corda.core.transactions.SignedTransaction>,\
        \ net.corda.core.transactions.SignedTransaction>"
    internalVerifiedTransactionsSnapshot():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.transactions.SignedTransaction>
    isFlowsDrainingModeEnabled():
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
    isWaitingForShutdown():
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
    killFlow(net.corda.core.flows.StateMachineRunId):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.flows.StateMachineRunId
    networkMapFeed():
      annotations:
        - RPCReturnsObservables
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<net.corda.core.node.NodeInfo>,\
        \ net.corda.core.node.services.NetworkMapCache$MapChange>"
    networkMapSnapshot():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.node.NodeInfo>
    networkParametersFeed():
      annotations:
        - RPCReturnsObservables
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.messaging.ParametersUpdateInfo,\
        \ net.corda.core.messaging.ParametersUpdateInfo>"
    nodeDiagnosticInfo():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.NodeDiagnosticInfo
    nodeInfo():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.NodeInfo
    nodeInfoFromParty(net.corda.core.identity.AbstractParty):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.node.NodeInfo
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.AbstractParty
    notaryIdentities():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.identity.Party>
    notaryPartyFromX500Name(net.corda.core.identity.CordaX500Name):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.Party
      params:
        x500Name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    openAttachment(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.io.InputStream
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    partiesFromName(String, boolean):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Set<net.corda.core.identity.Party>
      params:
        query:
          annotation:
            - NotNull
          type: String
        exactMatch:
          annotation: []
          type: boolean
    partyFromKey(java.security.PublicKey):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.Party
      params:
        key:
          annotation:
            - NotNull
          type: java.security.PublicKey
    queryAttachments(net.corda.core.node.services.vault.AttachmentQueryCriteria, net.corda.core.node.services.vault.AttachmentSort):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
      params:
        query:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentQueryCriteria
        sorting:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.AttachmentSort
    reattachFlowWithClientId(String):
      annotations:
        - RPCReturnsObservables
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.messaging.FlowHandleWithClientId<T>
      params:
        clientId:
          annotation:
            - NotNull
          type: String
    refreshNetworkMapCache():
      annotations: []
      default: false
      type: public abstract
      returnType: void
    registeredFlows():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<String>
    removeClientId(String):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        clientId:
          annotation:
            - NotNull
          type: String
    removeClientIdAsAdmin(String):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        clientId:
          annotation:
            - NotNull
          type: String
    setFlowsDrainingModeEnabled(boolean):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        enabled:
          annotation: []
          type: boolean
    shutdown():
      annotations: []
      default: false
      type: public abstract
      returnType: void
    startFlowDynamic(Class<? extends net.corda.core.flows.FlowLogic<? extends T>>, Object[]):
      annotations:
        - RPCReturnsObservables
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.messaging.FlowHandle<T>
      params:
        logicType:
          annotation:
            - NotNull
          type: Class<? extends net.corda.core.flows.FlowLogic<? extends T>>
        args:
          annotation:
            - NotNull
          type: "Object[]"
    startFlowDynamicWithClientId(String, Class<? extends net.corda.core.flows.FlowLogic<? extends T>>, Object[]):
      annotations:
        - RPCReturnsObservables
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.messaging.FlowHandleWithClientId<T>
      params:
        clientId:
          annotation:
            - NotNull
          type: String
        logicType:
          annotation:
            - NotNull
          type: Class<? extends net.corda.core.flows.FlowLogic<? extends T>>
        args:
          annotation:
            - NotNull
          type: "Object[]"
    startTrackedFlowDynamic(Class<? extends net.corda.core.flows.FlowLogic<? extends T>>, Object[]):
      annotations:
        - RPCReturnsObservables
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.messaging.FlowProgressHandle<T>
      params:
        logicType:
          annotation:
            - NotNull
          type: Class<? extends net.corda.core.flows.FlowLogic<? extends T>>
        args:
          annotation:
            - NotNull
          type: "Object[]"
    stateMachineRecordedTransactionMappingFeed():
      annotations:
        - RPCReturnsObservables
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<net.corda.core.messaging.StateMachineTransactionMapping>,\
        \ net.corda.core.messaging.StateMachineTransactionMapping>"
    stateMachineRecordedTransactionMappingSnapshot():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.messaging.StateMachineTransactionMapping>
    stateMachinesFeed():
      annotations:
        - RPCReturnsObservables
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<net.corda.core.messaging.StateMachineInfo>,\
        \ net.corda.core.messaging.StateMachineUpdate>"
    stateMachinesSnapshot():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.messaging.StateMachineInfo>
    terminate(boolean):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        drainPendingFlows:
          annotation: []
          type: boolean
    uploadAttachment(java.io.InputStream):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
      params:
        jar:
          annotation:
            - NotNull
          type: java.io.InputStream
    uploadAttachmentWithMetadata(java.io.InputStream, String, String):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
      params:
        jar:
          annotation:
            - NotNull
          type: java.io.InputStream
        uploader:
          annotation:
            - NotNull
          type: String
        filename:
          annotation:
            - NotNull
          type: String
    vaultQuery(Class<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
    ? vaultQueryBy(net.corda.core.node.services.vault.QueryCriteria, net.corda.core.node.services.vault.PageSpecification,
      net.corda.core.node.services.vault.Sort, Class<? extends T>)
    : annotations:
        - RPCReturnsObservables
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        paging:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.PageSpecification
        sorting:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
    vaultQueryByCriteria(net.corda.core.node.services.vault.QueryCriteria, Class<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
    ? vaultQueryByWithPagingSpec(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.PageSpecification)
    : annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        paging:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.PageSpecification
    ? vaultQueryByWithSorting(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.Sort)
    : annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        sorting:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort
    vaultTrack(Class<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
    ? vaultTrackBy(net.corda.core.node.services.vault.QueryCriteria, net.corda.core.node.services.vault.PageSpecification,
      net.corda.core.node.services.vault.Sort, Class<? extends T>)
    : annotations:
        - RPCReturnsObservables
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        paging:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.PageSpecification
        sorting:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
    vaultTrackByCriteria(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    ? vaultTrackByWithPagingSpec(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.PageSpecification)
    : annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        paging:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.PageSpecification
    ? vaultTrackByWithSorting(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.Sort)
    : annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        sorting:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort
    waitUntilNetworkReady():
      annotations:
        - RPCReturnsObservables
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.concurrent.CordaFuture<Void>
    wellKnownPartyFromAnonymous(net.corda.core.identity.AbstractParty):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.Party
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.AbstractParty
    wellKnownPartyFromX500Name(net.corda.core.identity.CordaX500Name):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.Party
      params:
        x500Name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
net.corda.core.messaging.CordaRPCOpsKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    pendingFlowsCount(net.corda.core.messaging.CordaRPCOps):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.messaging.DataFeed<Integer, kotlin.Pair<Integer,\
        \ Integer>>"
      params:
        $this$pendingFlowsCount:
          annotation:
            - NotNull
          type: net.corda.core.messaging.CordaRPCOps
    startFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function0<? extends R>):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandle<T>
      params:
        "null":
          annotation: []
          type: kotlin.jvm.functions.Function0<? extends R>
    startFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function1<? super A, ? extends R>, A):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandle<T>
      params:
        "null":
          annotation: []
          type: A
    startFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function2<? super A, ? super B, ? extends R>, A, B):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandle<T>
      params:
        "null":
          annotation: []
          type: B
    ? startFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function3<?
      super A, ? super B, ? super C, ? extends R>, A, B, C)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandle<T>
      params:
        "null":
          annotation: []
          type: C
    ? startFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function4<?
      super A, ? super B, ? super C, ? super D, ? extends R>, A, B, C, D)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandle<T>
      params:
        "null":
          annotation: []
          type: D
    ? startFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function5<?
      super A, ? super B, ? super C, ? super D, ? super E, ? extends R>, A, B, C,
      D, E)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandle<T>
      params:
        "null":
          annotation: []
          type: E
    ? startFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function6<?
      super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends R>,
      A, B, C, D, E, F)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandle<T>
      params:
        "null":
          annotation: []
          type: F
    startFlowWithClientId(net.corda.core.messaging.CordaRPCOps, String, kotlin.jvm.functions.Function0<? extends R>):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandleWithClientId<T>
      params:
        "null":
          annotation: []
          type: kotlin.jvm.functions.Function0<? extends R>
    startFlowWithClientId(net.corda.core.messaging.CordaRPCOps, String, kotlin.jvm.functions.Function1<? super A, ? extends R>, A):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandleWithClientId<T>
      params:
        "null":
          annotation: []
          type: A
    ? startFlowWithClientId(net.corda.core.messaging.CordaRPCOps, String, kotlin.jvm.functions.Function2<?
      super A, ? super B, ? extends R>, A, B)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandleWithClientId<T>
      params:
        "null":
          annotation: []
          type: B
    ? startFlowWithClientId(net.corda.core.messaging.CordaRPCOps, String, kotlin.jvm.functions.Function3<?
      super A, ? super B, ? super C, ? extends R>, A, B, C)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandleWithClientId<T>
      params:
        "null":
          annotation: []
          type: C
    ? startFlowWithClientId(net.corda.core.messaging.CordaRPCOps, String, kotlin.jvm.functions.Function4<?
      super A, ? super B, ? super C, ? super D, ? extends R>, A, B, C, D)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandleWithClientId<T>
      params:
        "null":
          annotation: []
          type: D
    ? startFlowWithClientId(net.corda.core.messaging.CordaRPCOps, String, kotlin.jvm.functions.Function5<?
      super A, ? super B, ? super C, ? super D, ? super E, ? extends R>, A, B, C,
      D, E)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandleWithClientId<T>
      params:
        "null":
          annotation: []
          type: E
    ? startFlowWithClientId(net.corda.core.messaging.CordaRPCOps, String, kotlin.jvm.functions.Function6<?
      super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends R>,
      A, B, C, D, E, F)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowHandleWithClientId<T>
      params:
        "null":
          annotation: []
          type: F
    startTrackedFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function0<? extends R>):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowProgressHandle<T>
      params:
        "null":
          annotation: []
          type: kotlin.jvm.functions.Function0<? extends R>
    startTrackedFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function1<? super A, ? extends R>, A):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowProgressHandle<T>
      params:
        "null":
          annotation: []
          type: A
    startTrackedFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function2<? super A, ? super B, ? extends R>, A, B):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowProgressHandle<T>
      params:
        "null":
          annotation: []
          type: B
    ? startTrackedFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function3<?
      super A, ? super B, ? super C, ? extends R>, A, B, C)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowProgressHandle<T>
      params:
        "null":
          annotation: []
          type: C
    ? startTrackedFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function4<?
      super A, ? super B, ? super C, ? super D, ? extends R>, A, B, C, D)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowProgressHandle<T>
      params:
        "null":
          annotation: []
          type: D
    ? startTrackedFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function5<?
      super A, ? super B, ? super C, ? super D, ? super E, ? extends R>, A, B, C,
      D, E)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowProgressHandle<T>
      params:
        "null":
          annotation: []
          type: E
    ? startTrackedFlow(net.corda.core.messaging.CordaRPCOps, kotlin.jvm.functions.Function6<?
      super A, ? super B, ? super C, ? super D, ? super E, ? super F, ? extends R>,
      A, B, C, D, E, F)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.messaging.FlowProgressHandle<T>
      params:
        "null":
          annotation: []
          type: F
    ? vaultQueryBy(net.corda.core.messaging.CordaRPCOps, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.PageSpecification, net.corda.core.node.services.vault.Sort)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.vault.Sort
    ? vaultTrackBy(net.corda.core.messaging.CordaRPCOps, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.PageSpecification, net.corda.core.node.services.vault.Sort)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.vault.Sort
net.corda.core.messaging.DataFeed:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations: []
      default: false
      type: public final
      returnType: A
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: rx.Observable<B>
    copy(A, rx.Observable<B>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<A, B>"
      params:
        snapshot:
          annotation: []
          type: A
        updates:
          annotation:
            - NotNull
          type: rx.Observable<B>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getSnapshot():
      annotations: []
      default: false
      type: public final
      returnType: A
    getUpdates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: rx.Observable<B>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.messaging.FlowHandle:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - java.lang.AutoCloseable
  interface: true
  methods:
    close():
      annotations: []
      default: false
      type: public abstract
      returnType: void
    getId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.flows.StateMachineRunId
    getReturnValue():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.concurrent.CordaFuture<A>
net.corda.core.messaging.FlowHandleImpl:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.messaging.FlowHandle
  interface: false
  methods:
    close():
      annotations: []
      default: false
      type: public
      returnType: void
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.concurrent.CordaFuture<A>
    copy(net.corda.core.flows.StateMachineRunId, net.corda.core.concurrent.CordaFuture<A>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.FlowHandleImpl<A>
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.flows.StateMachineRunId
        returnValue:
          annotation:
            - NotNull
          type: net.corda.core.concurrent.CordaFuture<A>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.flows.StateMachineRunId
    getReturnValue():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.concurrent.CordaFuture<A>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.messaging.FlowHandleWithClientId:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.messaging.FlowHandle
  interface: true
  methods:
    close():
      annotations: []
      default: false
      type: public abstract
      returnType: void
    getClientId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: String
    getId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.flows.StateMachineRunId
    getReturnValue():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.concurrent.CordaFuture<A>
net.corda.core.messaging.FlowHandleWithClientIdImpl:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.messaging.FlowHandleWithClientId
  interface: false
  methods:
    close():
      annotations: []
      default: false
      type: public
      returnType: void
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.concurrent.CordaFuture<A>
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(net.corda.core.flows.StateMachineRunId, net.corda.core.concurrent.CordaFuture<A>, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.FlowHandleWithClientIdImpl<A>
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.flows.StateMachineRunId
        returnValue:
          annotation:
            - NotNull
          type: net.corda.core.concurrent.CordaFuture<A>
        clientId:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getClientId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.flows.StateMachineRunId
    getReturnValue():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.concurrent.CordaFuture<A>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.messaging.FlowProgressHandle:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.messaging.FlowHandle
  interface: true
  methods:
    close():
      annotations: []
      default: false
      type: public abstract
      returnType: void
    getId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.flows.StateMachineRunId
    getProgress():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: rx.Observable<String>
    getReturnValue():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.concurrent.CordaFuture<A>
    getStepsTreeFeed():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    getStepsTreeIndexFeed():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
net.corda.core.messaging.FlowProgressHandleImpl:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.messaging.FlowProgressHandle
  interface: false
  methods:
    close():
      annotations: []
      default: false
      type: public
      returnType: void
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.concurrent.CordaFuture<A>
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: rx.Observable<String>
    component4():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    component5():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    copy(net.corda.core.flows.StateMachineRunId, net.corda.core.concurrent.CordaFuture<A>, rx.Observable<String>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.FlowProgressHandleImpl<A>
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.flows.StateMachineRunId
        returnValue:
          annotation:
            - NotNull
          type: net.corda.core.concurrent.CordaFuture<A>
        progress:
          annotation:
            - NotNull
          type: rx.Observable<String>
    ? copy(net.corda.core.flows.StateMachineRunId, net.corda.core.concurrent.CordaFuture<A>,
      rx.Observable<String>, net.corda.core.messaging.DataFeed<Integer, Integer>,
      net.corda.core.messaging.DataFeed<? extends java.util.List<kotlin.Pair<Integer,
      String>>, java.util.List<kotlin.Pair<Integer, String>>>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.FlowProgressHandleImpl<A>
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.flows.StateMachineRunId
        returnValue:
          annotation:
            - NotNull
          type: net.corda.core.concurrent.CordaFuture<A>
        progress:
          annotation:
            - NotNull
          type: rx.Observable<String>
        stepsTreeIndexFeed:
          annotation:
            - Nullable
          type: "net.corda.core.messaging.DataFeed<Integer, Integer>"
        stepsTreeFeed:
          annotation:
            - Nullable
          type: "net.corda.core.messaging.DataFeed<? extends java.util.List<kotlin.Pair<Integer,\
            \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.flows.StateMachineRunId
    getProgress():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<String>
    getReturnValue():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.concurrent.CordaFuture<A>
    getStepsTreeFeed():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<kotlin.Pair<Integer,\
        \ String>>, java.util.List<kotlin.Pair<Integer, String>>>"
    getStepsTreeIndexFeed():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: "net.corda.core.messaging.DataFeed<Integer, Integer>"
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.messaging.MessageRecipientGroup:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.messaging.MessageRecipients
  interface: true
  methods: {}
net.corda.core.messaging.MessageRecipients:
  annotations:
    - CordaSerializable
  type: public interface
  extends: []
  interface: true
  methods: {}
net.corda.core.messaging.ParametersUpdateInfo:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NetworkParameters
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    copy(net.corda.core.crypto.SecureHash, net.corda.core.node.NetworkParameters, String, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.ParametersUpdateInfo
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        parameters:
          annotation:
            - NotNull
          type: net.corda.core.node.NetworkParameters
        description:
          annotation:
            - NotNull
          type: String
        updateDeadline:
          annotation:
            - NotNull
          type: java.time.Instant
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getDescription():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getParameters():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NetworkParameters
    getUpdateDeadline():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.messaging.RPCOps:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getProtocolVersion():
      annotations: []
      default: false
      type: public abstract
      returnType: int
net.corda.core.messaging.RPCReturnsObservables:
  annotations: []
  type: public @interface
  interface: false
  methods: {}
net.corda.core.messaging.SingleMessageRecipient:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.messaging.MessageRecipients
  interface: true
  methods: {}
net.corda.core.messaging.StateMachineInfo:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInitiator
    component4():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
    ? copy(net.corda.core.flows.StateMachineRunId, String, net.corda.core.flows.FlowInitiator,
      net.corda.core.messaging.DataFeed<String, String>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.StateMachineInfo
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.flows.StateMachineRunId
        flowLogicClassName:
          annotation:
            - NotNull
          type: String
        initiator:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowInitiator
        progressTrackerStepAndUpdates:
          annotation:
            - Nullable
          type: "net.corda.core.messaging.DataFeed<String, String>"
    ? copy(net.corda.core.flows.StateMachineRunId, String, net.corda.core.flows.FlowInitiator,
      net.corda.core.messaging.DataFeed<String, String>, net.corda.core.context.InvocationContext)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.StateMachineInfo
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.flows.StateMachineRunId
        flowLogicClassName:
          annotation:
            - NotNull
          type: String
        initiator:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowInitiator
        progressTrackerStepAndUpdates:
          annotation:
            - Nullable
          type: "net.corda.core.messaging.DataFeed<String, String>"
        invocationContext:
          annotation:
            - NotNull
          type: net.corda.core.context.InvocationContext
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getFlowLogicClassName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getInitiator():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.FlowInitiator
    getInvocationContext():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.context.InvocationContext
    getProgressTrackerStepAndUpdates():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "net.corda.core.messaging.DataFeed<String, String>"
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.messaging.StateMachineTransactionMapping:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    copy(net.corda.core.flows.StateMachineRunId, net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.StateMachineTransactionMapping
      params:
        stateMachineRunId:
          annotation:
            - NotNull
          type: net.corda.core.flows.StateMachineRunId
        transactionId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getStateMachineRunId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    getTransactionId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.messaging.StateMachineUpdate:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods:
    getId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.flows.StateMachineRunId
net.corda.core.messaging.StateMachineUpdate$Added:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.messaging.StateMachineUpdate
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.StateMachineInfo
    copy(net.corda.core.messaging.StateMachineInfo):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.StateMachineUpdate$Added
      params:
        stateMachineInfo:
          annotation:
            - NotNull
          type: net.corda.core.messaging.StateMachineInfo
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.flows.StateMachineRunId
    getStateMachineInfo():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.StateMachineInfo
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.messaging.StateMachineUpdate$Removed:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.messaging.StateMachineUpdate
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.flows.StateMachineRunId
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<?>
    copy(net.corda.core.flows.StateMachineRunId, net.corda.core.utilities.Try<?>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.messaging.StateMachineUpdate$Removed
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.flows.StateMachineRunId
        result:
          annotation:
            - NotNull
          type: net.corda.core.utilities.Try<?>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.flows.StateMachineRunId
    getResult():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<?>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.messaging.flows.FlowManagerRPCOps:
  annotations: []
  type: public interface
  extends:
    - net.corda.core.messaging.RPCOps
  interface: true
  methods:
    debugCheckpoints():
      annotations: []
      default: false
      type: public abstract
      returnType: void
    dumpCheckpoints():
      annotations: []
      default: false
      type: public abstract
      returnType: void
    getProtocolVersion():
      annotations: []
      default: false
      type: public abstract
      returnType: int
net.corda.core.node.AppServiceHub:
  annotations: []
  type: public interface
  extends:
    - net.corda.core.node.ServiceHub
  interface: true
  methods:
    addSignature(net.corda.core.transactions.SignedTransaction):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        signedTransaction:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
    addSignature(net.corda.core.transactions.SignedTransaction, java.security.PublicKey):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        signedTransaction:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    cordaService(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: T
      params:
        type:
          annotation:
            - NotNull
          type: Class<T>
    cordaTelemetryComponent(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: T
      params:
        type:
          annotation:
            - NotNull
          type: Class<T>
    createSignature(net.corda.core.transactions.FilteredTransaction):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.crypto.TransactionSignature
      params:
        filteredTransaction:
          annotation:
            - NotNull
          type: net.corda.core.transactions.FilteredTransaction
    createSignature(net.corda.core.transactions.FilteredTransaction, java.security.PublicKey):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.crypto.TransactionSignature
      params:
        filteredTransaction:
          annotation:
            - NotNull
          type: net.corda.core.transactions.FilteredTransaction
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    createSignature(net.corda.core.transactions.SignedTransaction):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.crypto.TransactionSignature
      params:
        signedTransaction:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
    createSignature(net.corda.core.transactions.SignedTransaction, java.security.PublicKey):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.crypto.TransactionSignature
      params:
        signedTransaction:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    getAppContext():
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.cordapp.CordappContext
    getAttachments():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.AttachmentStorage
    getClock():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.time.Clock
    getContractUpgradeService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.ContractUpgradeService
    getCordappProvider():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.cordapp.CordappProvider
    getDatabase():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.vault.CordaTransactionSupport
    getDiagnosticsService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.diagnostics.DiagnosticsService
    getIdentityService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.IdentityService
    getKeyManagementService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.KeyManagementService
    getMyInfo():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.NodeInfo
    getNetworkMapCache():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.NetworkMapCache
    getNetworkParameters():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.NetworkParameters
    getNetworkParametersService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.NetworkParametersService
    getTelemetryService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.TelemetryService
    getValidatedTransactions():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.TransactionStorage
    getVaultService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.VaultService
    jdbcSession():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.sql.Connection
    loadContractAttachment(net.corda.core.contracts.StateRef):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.Attachment
      params:
        stateRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
    loadState(net.corda.core.contracts.StateRef):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.TransactionState<?>
      params:
        stateRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
    loadStates(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Set<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
    recordTransactions(Iterable<net.corda.core.transactions.SignedTransaction>):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        txs:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.transactions.SignedTransaction>
    recordTransactions(boolean, Iterable<net.corda.core.transactions.SignedTransaction>):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        notifyVault:
          annotation: []
          type: boolean
        txs:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.transactions.SignedTransaction>
    recordTransactions(boolean, net.corda.core.transactions.SignedTransaction, net.corda.core.transactions.SignedTransaction[]):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        notifyVault:
          annotation: []
          type: boolean
        first:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
        remaining:
          annotation:
            - NotNull
          type: "net.corda.core.transactions.SignedTransaction[]"
    recordTransactions(net.corda.core.node.StatesToRecord, Iterable<net.corda.core.transactions.SignedTransaction>):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        statesToRecord:
          annotation:
            - NotNull
          type: net.corda.core.node.StatesToRecord
        txs:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.transactions.SignedTransaction>
    recordTransactions(net.corda.core.transactions.SignedTransaction, net.corda.core.transactions.SignedTransaction[]):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        first:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
        remaining:
          annotation:
            - NotNull
          type: "net.corda.core.transactions.SignedTransaction[]"
    register(int, kotlin.jvm.functions.Function1<? super net.corda.core.node.services.ServiceLifecycleEvent, ? extends T>):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        priority:
          annotation: []
          type: int
        func:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super net.corda.core.node.services.ServiceLifecycleEvent,\
            \ ? extends T>"
    register(int, net.corda.core.node.services.ServiceLifecycleObserver):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        priority:
          annotation: []
          type: int
        observer:
          annotation:
            - NotNull
          type: net.corda.core.node.services.ServiceLifecycleObserver
    registerUnloadHandler(kotlin.jvm.functions.Function0<kotlin.Unit>):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        runOnStop:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<kotlin.Unit>
    signInitialTransaction(net.corda.core.transactions.TransactionBuilder):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        builder:
          annotation:
            - NotNull
          type: net.corda.core.transactions.TransactionBuilder
    signInitialTransaction(net.corda.core.transactions.TransactionBuilder, Iterable<? extends java.security.PublicKey>):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        builder:
          annotation:
            - NotNull
          type: net.corda.core.transactions.TransactionBuilder
        signingPubKeys:
          annotation:
            - NotNull
          type: Iterable<? extends java.security.PublicKey>
    signInitialTransaction(net.corda.core.transactions.TransactionBuilder, java.security.PublicKey):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        builder:
          annotation:
            - NotNull
          type: net.corda.core.transactions.TransactionBuilder
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    specialise(net.corda.core.transactions.LedgerTransaction):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.LedgerTransaction
      params:
        ltx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.LedgerTransaction
    startFlow(net.corda.core.flows.FlowLogic<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.messaging.FlowHandle<T>
      params:
        flow:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends T>
    startTrackedFlow(net.corda.core.flows.FlowLogic<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.messaging.FlowProgressHandle<T>
      params:
        flow:
          annotation:
            - NotNull
          type: net.corda.core.flows.FlowLogic<? extends T>
    toStateAndRef(net.corda.core.contracts.StateRef):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        stateRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
    withEntityManager(java.util.function.Consumer<javax.persistence.EntityManager>):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        block:
          annotation:
            - NotNull
          type: java.util.function.Consumer<javax.persistence.EntityManager>
    withEntityManager(kotlin.jvm.functions.Function1<? super javax.persistence.EntityManager, ? extends T>):
      annotations: []
      default: false
      type: public abstract
      returnType: T
      params:
        block:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super javax.persistence.EntityManager,\
            \ ? extends T>"
net.corda.core.node.AppServiceHub$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods: {}
  fields:
    SERVICE_PRIORITY_HIGH:
      annotation: []
      type: public static final int
      initialised value: 200
    SERVICE_PRIORITY_NORMAL:
      annotation: []
      type: public static final int
      initialised value: 100
    SERVICE_PRIORITY_LOW:
      annotation: []
      type: public static final int
      initialised value: 20
net.corda.core.node.AutoAcceptable:
  annotations: []
  type: public @interface
  interface: false
  methods: {}
net.corda.core.node.NetworkParameters:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations: []
      default: false
      type: public final
      returnType: int
    component10():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Duration
    component11():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Duration
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.node.NotaryInfo>
    component3():
      annotations: []
      default: false
      type: public final
      returnType: int
    component4():
      annotations: []
      default: false
      type: public final
      returnType: int
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    component6():
      annotations: []
      default: false
      type: public final
      returnType: int
    component7():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<String, java.util.List<net.corda.core.crypto.SecureHash>>"
    component8():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Duration
    component9():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<String, java.security.PublicKey>"
    ? copy(int, java.util.List<net.corda.core.node.NotaryInfo>, int, int, java.time.Instant,
      int, java.util.Map<String, ? extends java.util.List<? extends net.corda.core.crypto.SecureHash>>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NetworkParameters
      params:
        minimumPlatformVersion:
          annotation: []
          type: int
        notaries:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.node.NotaryInfo>
        maxMessageSize:
          annotation: []
          type: int
        maxTransactionSize:
          annotation: []
          type: int
        modifiedTime:
          annotation:
            - NotNull
          type: java.time.Instant
        epoch:
          annotation: []
          type: int
        whitelistedContractImplementations:
          annotation:
            - NotNull
          type: "java.util.Map<String, ? extends java.util.List<? extends net.corda.core.crypto.SecureHash>>"
    ? copy(int, java.util.List<net.corda.core.node.NotaryInfo>, int, int, java.time.Instant,
      int, java.util.Map<String, ? extends java.util.List<? extends net.corda.core.crypto.SecureHash>>,
      java.time.Duration)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NetworkParameters
      params:
        minimumPlatformVersion:
          annotation: []
          type: int
        notaries:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.node.NotaryInfo>
        maxMessageSize:
          annotation: []
          type: int
        maxTransactionSize:
          annotation: []
          type: int
        modifiedTime:
          annotation:
            - NotNull
          type: java.time.Instant
        epoch:
          annotation: []
          type: int
        whitelistedContractImplementations:
          annotation:
            - NotNull
          type: "java.util.Map<String, ? extends java.util.List<? extends net.corda.core.crypto.SecureHash>>"
        eventHorizon:
          annotation:
            - NotNull
          type: java.time.Duration
    ? copy(int, java.util.List<net.corda.core.node.NotaryInfo>, int, int, java.time.Instant,
      int, java.util.Map<String, ? extends java.util.List<? extends net.corda.core.crypto.SecureHash>>,
      java.time.Duration, java.util.Map<String, ? extends java.security.PublicKey>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NetworkParameters
      params:
        minimumPlatformVersion:
          annotation: []
          type: int
        notaries:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.node.NotaryInfo>
        maxMessageSize:
          annotation: []
          type: int
        maxTransactionSize:
          annotation: []
          type: int
        modifiedTime:
          annotation:
            - NotNull
          type: java.time.Instant
        epoch:
          annotation: []
          type: int
        whitelistedContractImplementations:
          annotation:
            - NotNull
          type: "java.util.Map<String, ? extends java.util.List<? extends net.corda.core.crypto.SecureHash>>"
        eventHorizon:
          annotation:
            - NotNull
          type: java.time.Duration
        packageOwnership:
          annotation:
            - NotNull
          type: "java.util.Map<String, ? extends java.security.PublicKey>"
    ? copy(int, java.util.List<net.corda.core.node.NotaryInfo>, int, int, java.time.Instant,
      int, java.util.Map<String, ? extends java.util.List<? extends net.corda.core.crypto.SecureHash>>,
      java.time.Duration, java.util.Map<String, ? extends java.security.PublicKey>,
      java.time.Duration, java.time.Duration)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NetworkParameters
      params:
        minimumPlatformVersion:
          annotation: []
          type: int
        notaries:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.node.NotaryInfo>
        maxMessageSize:
          annotation: []
          type: int
        maxTransactionSize:
          annotation: []
          type: int
        modifiedTime:
          annotation:
            - NotNull
          type: java.time.Instant
        epoch:
          annotation: []
          type: int
        whitelistedContractImplementations:
          annotation:
            - NotNull
          type: "java.util.Map<String, ? extends java.util.List<? extends net.corda.core.crypto.SecureHash>>"
        eventHorizon:
          annotation:
            - NotNull
          type: java.time.Duration
        packageOwnership:
          annotation:
            - NotNull
          type: "java.util.Map<String, ? extends java.security.PublicKey>"
        recoveryMaximumBackupInterval:
          annotation:
            - Nullable
          type: java.time.Duration
        confidentialIdentityMinimumBackupInterval:
          annotation:
            - Nullable
          type: java.time.Duration
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getConfidentialIdentityMinimumBackupInterval():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Duration
    getEpoch():
      annotations: []
      default: false
      type: public final
      returnType: int
    getEventHorizon():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Duration
    getMaxMessageSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    getMaxTransactionSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    getMinimumPlatformVersion():
      annotations: []
      default: false
      type: public final
      returnType: int
    getModifiedTime():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    getNotaries():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.node.NotaryInfo>
    getPackageOwnership():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<String, java.security.PublicKey>"
    getRecoveryMaximumBackupInterval():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Duration
    getWhitelistedContractImplementations():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<String, java.util.List<net.corda.core.crypto.SecureHash>>"
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toImmutable():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NetworkParameters
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.NetworkParametersKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.node.NodeDiagnosticInfo:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations: []
      default: false
      type: public final
      returnType: int
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.cordapp.CordappInfo>
    copy(String, String, int, String, java.util.List<net.corda.core.cordapp.CordappInfo>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NodeDiagnosticInfo
      params:
        version:
          annotation:
            - NotNull
          type: String
        revision:
          annotation:
            - NotNull
          type: String
        platformVersion:
          annotation: []
          type: int
        vendor:
          annotation:
            - NotNull
          type: String
        cordapps:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.cordapp.CordappInfo>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCordapps():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.cordapp.CordappInfo>
    getPlatformVersion():
      annotations: []
      default: false
      type: public final
      returnType: int
    getRevision():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getVendor():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getVersion():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.NodeInfo:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.NetworkHostAndPort>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.PartyAndCertificate>
    component3():
      annotations: []
      default: false
      type: public final
      returnType: int
    component4():
      annotations: []
      default: false
      type: public final
      returnType: long
    ? copy(java.util.List<net.corda.core.utilities.NetworkHostAndPort>, java.util.List<net.corda.core.identity.PartyAndCertificate>,
      int, long)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NodeInfo
      params:
        addresses:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.utilities.NetworkHostAndPort>
        legalIdentitiesAndCerts:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.identity.PartyAndCertificate>
        platformVersion:
          annotation: []
          type: int
        serial:
          annotation: []
          type: long
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAddresses():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.NetworkHostAndPort>
    getLegalIdentities():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.Party>
    getLegalIdentitiesAndCerts():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.PartyAndCertificate>
    getPlatformVersion():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSerial():
      annotations: []
      default: false
      type: public final
      returnType: long
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    identityAndCertFromX500Name(net.corda.core.identity.CordaX500Name):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.PartyAndCertificate
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    identityFromX500Name(net.corda.core.identity.CordaX500Name):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    isLegalIdentity(net.corda.core.identity.CordaX500Name):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    isLegalIdentity(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.NotaryInfo:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    component2():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    copy(net.corda.core.identity.Party, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NotaryInfo
      params:
        identity:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        validating:
          annotation: []
          type: boolean
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getIdentity():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getValidating():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.ServiceHub:
  annotations: []
  type: public interface
  extends:
    - net.corda.core.node.ServicesForResolution
  interface: true
  methods:
    addSignature(net.corda.core.transactions.SignedTransaction):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        signedTransaction:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
    addSignature(net.corda.core.transactions.SignedTransaction, java.security.PublicKey):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        signedTransaction:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    cordaService(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: T
      params:
        type:
          annotation:
            - NotNull
          type: Class<T>
    cordaTelemetryComponent(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: T
      params:
        type:
          annotation:
            - NotNull
          type: Class<T>
    createSignature(net.corda.core.transactions.FilteredTransaction):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.crypto.TransactionSignature
      params:
        filteredTransaction:
          annotation:
            - NotNull
          type: net.corda.core.transactions.FilteredTransaction
    createSignature(net.corda.core.transactions.FilteredTransaction, java.security.PublicKey):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.crypto.TransactionSignature
      params:
        filteredTransaction:
          annotation:
            - NotNull
          type: net.corda.core.transactions.FilteredTransaction
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    createSignature(net.corda.core.transactions.SignedTransaction):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.crypto.TransactionSignature
      params:
        signedTransaction:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
    createSignature(net.corda.core.transactions.SignedTransaction, java.security.PublicKey):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.crypto.TransactionSignature
      params:
        signedTransaction:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    getAppContext():
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.cordapp.CordappContext
    getAttachments():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.AttachmentStorage
    getClock():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.time.Clock
    getContractUpgradeService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.ContractUpgradeService
    getCordappProvider():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.cordapp.CordappProvider
    getDiagnosticsService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.diagnostics.DiagnosticsService
    getIdentityService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.IdentityService
    getKeyManagementService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.KeyManagementService
    getMyInfo():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.NodeInfo
    getNetworkMapCache():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.NetworkMapCache
    getNetworkParameters():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.NetworkParameters
    getNetworkParametersService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.NetworkParametersService
    getTelemetryService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.TelemetryService
    getValidatedTransactions():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.TransactionStorage
    getVaultService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.VaultService
    jdbcSession():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.sql.Connection
    loadContractAttachment(net.corda.core.contracts.StateRef):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.Attachment
      params:
        stateRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
    loadState(net.corda.core.contracts.StateRef):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.TransactionState<?>
      params:
        stateRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
    loadStates(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Set<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
    recordTransactions(Iterable<net.corda.core.transactions.SignedTransaction>):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        txs:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.transactions.SignedTransaction>
    recordTransactions(boolean, Iterable<net.corda.core.transactions.SignedTransaction>):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        notifyVault:
          annotation: []
          type: boolean
        txs:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.transactions.SignedTransaction>
    recordTransactions(boolean, net.corda.core.transactions.SignedTransaction, net.corda.core.transactions.SignedTransaction[]):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        notifyVault:
          annotation: []
          type: boolean
        first:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
        remaining:
          annotation:
            - NotNull
          type: "net.corda.core.transactions.SignedTransaction[]"
    recordTransactions(net.corda.core.node.StatesToRecord, Iterable<net.corda.core.transactions.SignedTransaction>):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        statesToRecord:
          annotation:
            - NotNull
          type: net.corda.core.node.StatesToRecord
        txs:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.transactions.SignedTransaction>
    recordTransactions(net.corda.core.transactions.SignedTransaction, net.corda.core.transactions.SignedTransaction[]):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        first:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
        remaining:
          annotation:
            - NotNull
          type: "net.corda.core.transactions.SignedTransaction[]"
    registerUnloadHandler(kotlin.jvm.functions.Function0<kotlin.Unit>):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        runOnStop:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<kotlin.Unit>
    signInitialTransaction(net.corda.core.transactions.TransactionBuilder):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        builder:
          annotation:
            - NotNull
          type: net.corda.core.transactions.TransactionBuilder
    signInitialTransaction(net.corda.core.transactions.TransactionBuilder, Iterable<? extends java.security.PublicKey>):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        builder:
          annotation:
            - NotNull
          type: net.corda.core.transactions.TransactionBuilder
        signingPubKeys:
          annotation:
            - NotNull
          type: Iterable<? extends java.security.PublicKey>
    signInitialTransaction(net.corda.core.transactions.TransactionBuilder, java.security.PublicKey):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        builder:
          annotation:
            - NotNull
          type: net.corda.core.transactions.TransactionBuilder
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    specialise(net.corda.core.transactions.LedgerTransaction):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.LedgerTransaction
      params:
        ltx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.LedgerTransaction
    toStateAndRef(net.corda.core.contracts.StateRef):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        stateRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
    withEntityManager(java.util.function.Consumer<javax.persistence.EntityManager>):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        block:
          annotation:
            - NotNull
          type: java.util.function.Consumer<javax.persistence.EntityManager>
    withEntityManager(kotlin.jvm.functions.Function1<? super javax.persistence.EntityManager, ? extends T>):
      annotations: []
      default: false
      type: public abstract
      returnType: T
      params:
        block:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super javax.persistence.EntityManager,\
            \ ? extends T>"
net.corda.core.node.ServicesForResolution:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getAttachments():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.AttachmentStorage
    getCordappProvider():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.cordapp.CordappProvider
    getIdentityService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.IdentityService
    getNetworkParameters():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.NetworkParameters
    getNetworkParametersService():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.NetworkParametersService
    loadContractAttachment(net.corda.core.contracts.StateRef):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.Attachment
      params:
        stateRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
    loadState(net.corda.core.contracts.StateRef):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.TransactionState<?>
      params:
        stateRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
    loadStates(java.util.Set<net.corda.core.contracts.StateRef>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Set<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.contracts.StateRef>
    specialise(net.corda.core.transactions.LedgerTransaction):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.transactions.LedgerTransaction
      params:
        ltx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.LedgerTransaction
net.corda.core.node.StatesToRecord:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.StatesToRecord>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.StatesToRecord
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.StatesToRecord[]"
net.corda.core.node.ZoneVersionTooLowException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.CordaThrowable
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.node.services.AttachmentStorage:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getLatestContractAttachments(String, int):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
      params:
        contractClassName:
          annotation:
            - NotNull
          type: String
        minContractVersion:
          annotation: []
          type: int
    hasAttachment(net.corda.core.crypto.SecureHash):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        attachmentId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    importAttachment(java.io.InputStream):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
      params:
        jar:
          annotation:
            - NotNull
          type: java.io.InputStream
    importAttachment(java.io.InputStream, String, String):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
      params:
        jar:
          annotation:
            - NotNull
          type: java.io.InputStream
        uploader:
          annotation:
            - NotNull
          type: String
        filename:
          annotation:
            - Nullable
          type: String
    importOrGetAttachment(java.io.InputStream):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
      params:
        jar:
          annotation:
            - NotNull
          type: java.io.InputStream
    openAttachment(net.corda.core.crypto.SecureHash):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.contracts.Attachment
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    queryAttachments(net.corda.core.node.services.vault.AttachmentQueryCriteria):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentQueryCriteria
    queryAttachments(net.corda.core.node.services.vault.AttachmentQueryCriteria, net.corda.core.node.services.vault.AttachmentSort):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentQueryCriteria
        sorting:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.AttachmentSort
net.corda.core.node.services.AttachmentStorageKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.node.services.ContractUpgradeService:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getAuthorisedContractUpgrade(net.corda.core.contracts.StateRef):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: String
      params:
        ref:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
    removeAuthorisedContractUpgrade(net.corda.core.contracts.StateRef):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        ref:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
    ? storeAuthorisedContractUpgrade(net.corda.core.contracts.StateRef, Class<? extends
      net.corda.core.contracts.UpgradedContract<?, ?>>)
    : annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        ref:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
        upgradedContractClass:
          annotation:
            - NotNull
          type: "Class<? extends net.corda.core.contracts.UpgradedContract<?, ?>>"
net.corda.core.node.services.CordaService:
  annotations: []
  type: public @interface
  interface: false
  methods: {}
net.corda.core.node.services.CordaServiceCriticalFailureException:
  annotations: []
  type: public final class
  extends: java.lang.Exception
  implements: []
  interface: false
  methods: {}
net.corda.core.node.services.IdentityService:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    assertOwnership(net.corda.core.identity.Party, net.corda.core.identity.AnonymousParty):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        anonymousParty:
          annotation:
            - NotNull
          type: net.corda.core.identity.AnonymousParty
    certificateFromKey(java.security.PublicKey):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.PartyAndCertificate
      params:
        owningKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    externalIdForPublicKey(java.security.PublicKey):
      annotations:
        - Suspendable
        - Nullable
      default: false
      type: public abstract
      returnType: java.util.UUID
      params:
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    getAllIdentities():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Iterable<net.corda.core.identity.PartyAndCertificate>
    getCaCertStore():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.security.cert.CertStore
    getTrustAnchor():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.security.cert.TrustAnchor
    getTrustRoot():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.security.cert.X509Certificate
    partiesFromName(String, boolean):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Set<net.corda.core.identity.Party>
      params:
        query:
          annotation:
            - NotNull
          type: String
        exactMatch:
          annotation: []
          type: boolean
    partyFromKey(java.security.PublicKey):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.Party
      params:
        key:
          annotation:
            - NotNull
          type: java.security.PublicKey
    publicKeysForExternalId(java.util.UUID):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Iterable<java.security.PublicKey>
      params:
        externalId:
          annotation:
            - NotNull
          type: java.util.UUID
    registerKey(java.security.PublicKey, net.corda.core.identity.Party, java.util.UUID):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        externalId:
          annotation:
            - Nullable
          type: java.util.UUID
    requireWellKnownPartyFromAnonymous(net.corda.core.identity.AbstractParty):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.identity.Party
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.AbstractParty
    verifyAndRegisterIdentity(net.corda.core.identity.PartyAndCertificate):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.PartyAndCertificate
      params:
        identity:
          annotation:
            - NotNull
          type: net.corda.core.identity.PartyAndCertificate
    wellKnownPartyFromAnonymous(net.corda.core.contracts.PartyAndReference):
      annotations:
        - Nullable
      default: true
      type: public
      returnType: net.corda.core.identity.Party
      params:
        partyRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.PartyAndReference
    wellKnownPartyFromAnonymous(net.corda.core.identity.AbstractParty):
      annotations:
        - Nullable
      default: true
      type: public
      returnType: net.corda.core.identity.Party
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.AbstractParty
    wellKnownPartyFromX500Name(net.corda.core.identity.CordaX500Name):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.Party
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
net.corda.core.node.services.IdentityService$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.node.services.KeyManagementService:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    filterMyKeys(Iterable<? extends java.security.PublicKey>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Iterable<java.security.PublicKey>
      params:
        candidateKeys:
          annotation:
            - NotNull
          type: Iterable<? extends java.security.PublicKey>
    freshKey():
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: java.security.PublicKey
    freshKey(java.util.UUID):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: java.security.PublicKey
      params:
        externalId:
          annotation:
            - NotNull
          type: java.util.UUID
    freshKeyAndCert(net.corda.core.identity.PartyAndCertificate, boolean):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.identity.PartyAndCertificate
      params:
        identity:
          annotation:
            - NotNull
          type: net.corda.core.identity.PartyAndCertificate
        revocationEnabled:
          annotation: []
          type: boolean
    freshKeyAndCert(net.corda.core.identity.PartyAndCertificate, boolean, java.util.UUID):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.identity.PartyAndCertificate
      params:
        identity:
          annotation:
            - NotNull
          type: net.corda.core.identity.PartyAndCertificate
        revocationEnabled:
          annotation: []
          type: boolean
        externalId:
          annotation:
            - NotNull
          type: java.util.UUID
    getKeys():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Set<java.security.PublicKey>
    sign(byte[], java.security.PublicKey):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.DigitalSignature$WithKey
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    sign(net.corda.core.crypto.SignableData, java.security.PublicKey):
      annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.TransactionSignature
      params:
        signableData:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignableData
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
net.corda.core.node.services.NetworkMapCache:
  annotations: []
  type: public interface
  extends:
    - net.corda.core.node.services.NetworkMapCacheBase
  interface: true
  methods:
    clearNetworkMapCache():
      annotations: []
      default: false
      type: public abstract
      returnType: void
    getAllNodes():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.node.NodeInfo>
    getChanged():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: rx.Observable<net.corda.core.node.services.NetworkMapCache$MapChange>
    getNodeByAddress(net.corda.core.utilities.NetworkHostAndPort):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.node.NodeInfo
      params:
        address:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NetworkHostAndPort
    getNodeByLegalIdentity(net.corda.core.identity.AbstractParty):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.node.NodeInfo
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.AbstractParty
    getNodeByLegalName(net.corda.core.identity.CordaX500Name):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.node.NodeInfo
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    getNodeReady():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.concurrent.CordaFuture<Void>
    getNodesByLegalIdentityKey(java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.node.NodeInfo>
      params:
        identityKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    getNodesByLegalName(net.corda.core.identity.CordaX500Name):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.node.NodeInfo>
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    getNotary(net.corda.core.identity.CordaX500Name):
      annotations:
        - Nullable
      default: true
      type: public
      returnType: net.corda.core.identity.Party
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    getNotaryIdentities():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.identity.Party>
    getPartyInfo(net.corda.core.identity.Party):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.PartyInfo
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getPeerByLegalName(net.corda.core.identity.CordaX500Name):
      annotations:
        - Nullable
      default: true
      type: public
      returnType: net.corda.core.identity.Party
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    getPeerCertificateByLegalName(net.corda.core.identity.CordaX500Name):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.PartyAndCertificate
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    isNotary(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isValidatingNotary(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    track():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<net.corda.core.node.NodeInfo>,\
        \ net.corda.core.node.services.NetworkMapCache$MapChange>"
net.corda.core.node.services.NetworkMapCache$MapChange:
  annotations:
    - CordaSerializable
  type: public abstract static class
  extends: null
  implements: []
  interface: false
  methods:
    getNode():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.NodeInfo
net.corda.core.node.services.NetworkMapCache$MapChange$Added:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.NetworkMapCache$MapChange
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NodeInfo
    copy(net.corda.core.node.NodeInfo):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.NetworkMapCache$MapChange$Added
      params:
        node:
          annotation:
            - NotNull
          type: net.corda.core.node.NodeInfo
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getNode():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.NodeInfo
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.NetworkMapCache$MapChange$Modified:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.NetworkMapCache$MapChange
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NodeInfo
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NodeInfo
    copy(net.corda.core.node.NodeInfo, net.corda.core.node.NodeInfo):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.NetworkMapCache$MapChange$Modified
      params:
        node:
          annotation:
            - NotNull
          type: net.corda.core.node.NodeInfo
        previousNode:
          annotation:
            - NotNull
          type: net.corda.core.node.NodeInfo
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getNode():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.NodeInfo
    getPreviousNode():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NodeInfo
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.NetworkMapCache$MapChange$Removed:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.NetworkMapCache$MapChange
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NodeInfo
    copy(net.corda.core.node.NodeInfo):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.NetworkMapCache$MapChange$Removed
      params:
        node:
          annotation:
            - NotNull
          type: net.corda.core.node.NodeInfo
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getNode():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.NodeInfo
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.NetworkMapCacheBase:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    clearNetworkMapCache():
      annotations: []
      default: false
      type: public abstract
      returnType: void
    getAllNodes():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.node.NodeInfo>
    getChanged():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: rx.Observable<net.corda.core.node.services.NetworkMapCache$MapChange>
    getNodeByAddress(net.corda.core.utilities.NetworkHostAndPort):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.node.NodeInfo
      params:
        address:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NetworkHostAndPort
    getNodeByLegalName(net.corda.core.identity.CordaX500Name):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.node.NodeInfo
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    getNodeReady():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.concurrent.CordaFuture<Void>
    getNodesByLegalIdentityKey(java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.node.NodeInfo>
      params:
        identityKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    getNodesByLegalName(net.corda.core.identity.CordaX500Name):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.node.NodeInfo>
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    getNotary(net.corda.core.identity.CordaX500Name):
      annotations:
        - Nullable
      default: true
      type: public
      returnType: net.corda.core.identity.Party
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    getNotaryIdentities():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.identity.Party>
    getPartyInfo(net.corda.core.identity.Party):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.PartyInfo
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    getPeerByLegalName(net.corda.core.identity.CordaX500Name):
      annotations:
        - Nullable
      default: true
      type: public
      returnType: net.corda.core.identity.Party
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    getPeerCertificateByLegalName(net.corda.core.identity.CordaX500Name):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.PartyAndCertificate
      params:
        name:
          annotation:
            - NotNull
          type: net.corda.core.identity.CordaX500Name
    isNotary(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    isValidatingNotary(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    track():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<net.corda.core.node.NodeInfo>,\
        \ net.corda.core.node.services.NetworkMapCache$MapChange>"
net.corda.core.node.services.NetworkParametersService:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getCurrentHash():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
    getDefaultHash():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
    lookup(net.corda.core.crypto.SecureHash):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.node.NetworkParameters
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
net.corda.core.node.services.PartyInfo:
  annotations: []
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods:
    getParty():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.identity.Party
net.corda.core.node.services.PartyInfo$DistributedNode:
  annotations: []
  type: public static final class
  extends: net.corda.core.node.services.PartyInfo
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    copy(net.corda.core.identity.Party):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.PartyInfo$DistributedNode
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getParty():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.identity.Party
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.PartyInfo$SingleNode:
  annotations: []
  type: public static final class
  extends: net.corda.core.node.services.PartyInfo
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.NetworkHostAndPort>
    copy(net.corda.core.identity.Party, java.util.List<net.corda.core.utilities.NetworkHostAndPort>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.PartyInfo$SingleNode
      params:
        party:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        addresses:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.utilities.NetworkHostAndPort>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAddresses():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.NetworkHostAndPort>
    getParty():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.identity.Party
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.ServiceLifecycleEvent:
  annotations: []
  type: public final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.ServiceLifecycleEvent>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.ServiceLifecycleEvent
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.ServiceLifecycleEvent[]"
net.corda.core.node.services.ServiceLifecycleObserver:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    onServiceLifecycleEvent(net.corda.core.node.services.ServiceLifecycleEvent):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        event:
          annotation:
            - NotNull
          type: net.corda.core.node.services.ServiceLifecycleEvent
net.corda.core.node.services.SignedTransactionWithStatus:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.contracts.NamedByHash
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.TransactionStatus
    copy(net.corda.core.transactions.SignedTransaction, net.corda.core.node.services.TransactionStatus):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.SignedTransactionWithStatus
      params:
        stx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.SignedTransaction
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.TransactionStatus
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getStatus():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.TransactionStatus
    getStx():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.StatesNotAvailableException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.TelemetryService:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getTelemetryHandle(Class<T>):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: T
      params:
        telemetryClass:
          annotation:
            - NotNull
          type: Class<T>
net.corda.core.node.services.TimeWindowChecker:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getClock():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Clock
    isValid(net.corda.core.contracts.TimeWindow):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        timeWindow:
          annotation:
            - NotNull
          type: net.corda.core.contracts.TimeWindow
net.corda.core.node.services.TransactionStatus:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.TransactionStatus>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.TransactionStatus
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.TransactionStatus[]"
net.corda.core.node.services.TransactionStorage:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getTransaction(net.corda.core.crypto.SecureHash):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    getTransactionWithStatus(net.corda.core.crypto.SecureHash):
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.SignedTransactionWithStatus
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    getUpdates():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: rx.Observable<net.corda.core.transactions.SignedTransaction>
    track():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<java.util.List<net.corda.core.transactions.SignedTransaction>,\
        \ net.corda.core.transactions.SignedTransaction>"
    trackTransaction(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.concurrent.CordaFuture<net.corda.core.transactions.SignedTransaction>
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
net.corda.core.node.services.UnknownAnonymousPartyException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.CordaThrowable
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.node.services.Vault:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Iterable<net.corda.core.contracts.StateAndRef<T>>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.node.services.Vault$Companion
net.corda.core.node.services.Vault$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    getNoNotaryUpdate():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$Update<net.corda.core.contracts.ContractState>
    getNoUpdate():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$Update<net.corda.core.contracts.ContractState>
net.corda.core.node.services.Vault$ConstraintInfo:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.AttachmentConstraint
    copy(net.corda.core.contracts.AttachmentConstraint):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$ConstraintInfo
      params:
        constraint:
          annotation:
            - NotNull
          type: net.corda.core.contracts.AttachmentConstraint
    data():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "byte[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getConstraint():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.AttachmentConstraint
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    type():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$ConstraintInfo$Type
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.node.services.Vault$ConstraintInfo$Companion
net.corda.core.node.services.Vault$ConstraintInfo$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    constraintInfo(net.corda.core.node.services.Vault$ConstraintInfo$Type, byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$ConstraintInfo
      params:
        type:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$ConstraintInfo$Type
        data:
          annotation:
            - Nullable
          type: "byte[]"
net.corda.core.node.services.Vault$ConstraintInfo$Type:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.Vault$ConstraintInfo$Type>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.Vault$ConstraintInfo$Type
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.Vault$ConstraintInfo$Type[]"
net.corda.core.node.services.Vault$Page:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.node.services.Vault$StateMetadata>
    component3():
      annotations: []
      default: false
      type: public final
      returnType: long
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$StateStatus
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<Object>
    component6():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    ? copy(java.util.List<? extends net.corda.core.contracts.StateAndRef<? extends
      T>>, java.util.List<net.corda.core.node.services.Vault$StateMetadata>, long,
      net.corda.core.node.services.Vault$StateStatus, java.util.List<?>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        states:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.contracts.StateAndRef<? extends
            T>>
        statesMetadata:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.node.services.Vault$StateMetadata>
        totalStatesAvailable:
          annotation: []
          type: long
        stateTypes:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        otherResults:
          annotation:
            - NotNull
          type: java.util.List<?>
    ? copy(java.util.List<? extends net.corda.core.contracts.StateAndRef<? extends
      T>>, java.util.List<net.corda.core.node.services.Vault$StateMetadata>, long,
      net.corda.core.node.services.Vault$StateStatus, java.util.List<?>, net.corda.core.contracts.StateRef)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        states:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.contracts.StateAndRef<? extends
            T>>
        statesMetadata:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.node.services.Vault$StateMetadata>
        totalStatesAvailable:
          annotation: []
          type: long
        stateTypes:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        otherResults:
          annotation:
            - NotNull
          type: java.util.List<?>
        previousPageAnchor:
          annotation:
            - Nullable
          type: net.corda.core.contracts.StateRef
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getOtherResults():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<Object>
    getPreviousPageAnchor():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    getStateTypes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$StateStatus
    getStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    getStatesMetadata():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.node.services.Vault$StateMetadata>
    getTotalStatesAvailable():
      annotations: []
      default: false
      type: public final
      returnType: long
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.Vault$RelevancyStatus:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.Vault$RelevancyStatus>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.Vault$RelevancyStatus[]"
net.corda.core.node.services.Vault$StateMetadata:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    component10():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$ConstraintInfo
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    component4():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Instant
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$StateStatus
    component6():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.identity.AbstractParty
    component7():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    component8():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Instant
    component9():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    ? copy(net.corda.core.contracts.StateRef, String, java.time.Instant, java.time.Instant,
      net.corda.core.node.services.Vault$StateStatus, net.corda.core.identity.AbstractParty,
      String, java.time.Instant)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$StateMetadata
      params:
        ref:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
        contractStateClassName:
          annotation:
            - NotNull
          type: String
        recordedTime:
          annotation:
            - NotNull
          type: java.time.Instant
        consumedTime:
          annotation:
            - Nullable
          type: java.time.Instant
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        notary:
          annotation:
            - Nullable
          type: net.corda.core.identity.AbstractParty
        lockId:
          annotation:
            - Nullable
          type: String
        lockUpdateTime:
          annotation:
            - Nullable
          type: java.time.Instant
    ? copy(net.corda.core.contracts.StateRef, String, java.time.Instant, java.time.Instant,
      net.corda.core.node.services.Vault$StateStatus, net.corda.core.identity.AbstractParty,
      String, java.time.Instant, net.corda.core.node.services.Vault$RelevancyStatus)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$StateMetadata
      params:
        ref:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
        contractStateClassName:
          annotation:
            - NotNull
          type: String
        recordedTime:
          annotation:
            - NotNull
          type: java.time.Instant
        consumedTime:
          annotation:
            - Nullable
          type: java.time.Instant
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        notary:
          annotation:
            - Nullable
          type: net.corda.core.identity.AbstractParty
        lockId:
          annotation:
            - Nullable
          type: String
        lockUpdateTime:
          annotation:
            - Nullable
          type: java.time.Instant
        relevancyStatus:
          annotation:
            - Nullable
          type: net.corda.core.node.services.Vault$RelevancyStatus
    ? copy(net.corda.core.contracts.StateRef, String, java.time.Instant, java.time.Instant,
      net.corda.core.node.services.Vault$StateStatus, net.corda.core.identity.AbstractParty,
      String, java.time.Instant, net.corda.core.node.services.Vault$RelevancyStatus,
      net.corda.core.node.services.Vault$ConstraintInfo)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$StateMetadata
      params:
        ref:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
        contractStateClassName:
          annotation:
            - NotNull
          type: String
        recordedTime:
          annotation:
            - NotNull
          type: java.time.Instant
        consumedTime:
          annotation:
            - Nullable
          type: java.time.Instant
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        notary:
          annotation:
            - Nullable
          type: net.corda.core.identity.AbstractParty
        lockId:
          annotation:
            - Nullable
          type: String
        lockUpdateTime:
          annotation:
            - Nullable
          type: java.time.Instant
        relevancyStatus:
          annotation:
            - Nullable
          type: net.corda.core.node.services.Vault$RelevancyStatus
        constraintInfo:
          annotation:
            - Nullable
          type: net.corda.core.node.services.Vault$ConstraintInfo
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getConstraintInfo():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$ConstraintInfo
    getConsumedTime():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Instant
    getContractStateClassName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getLockId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    getLockUpdateTime():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.time.Instant
    getNotary():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.identity.AbstractParty
    getRecordedTime():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    getRef():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    getRelevancyStatus():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    getStatus():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$StateStatus
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.Vault$StateStatus:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.Vault$StateStatus>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.Vault$StateStatus
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.Vault$StateStatus[]"
net.corda.core.node.services.Vault$Update:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.contracts.StateAndRef<U>>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.contracts.StateAndRef<U>>
    component3():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.UUID
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$UpdateType
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.contracts.StateAndRef<U>>
    component6():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.contracts.StateRef, net.corda.core.crypto.SecureHash>"
    containsType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: boolean
    containsType(Class<T>, net.corda.core.node.services.Vault$StateStatus):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
    ? copy(java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
      U>>, java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
      U>>, java.util.UUID, net.corda.core.node.services.Vault$UpdateType)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$Update<U>
      params:
        consumed:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
            U>>
        produced:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
            U>>
        flowId:
          annotation:
            - Nullable
          type: java.util.UUID
        type:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$UpdateType
    ? copy(java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
      U>>, java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
      U>>, java.util.UUID, net.corda.core.node.services.Vault$UpdateType, java.util.Set<?
      extends net.corda.core.contracts.StateAndRef<? extends U>>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$Update<U>
      params:
        consumed:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
            U>>
        produced:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
            U>>
        flowId:
          annotation:
            - Nullable
          type: java.util.UUID
        type:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$UpdateType
        references:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
            U>>
    ? copy(java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
      U>>, java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
      U>>, java.util.UUID, net.corda.core.node.services.Vault$UpdateType, java.util.Set<?
      extends net.corda.core.contracts.StateAndRef<? extends U>>, java.util.Map<net.corda.core.contracts.StateRef,
      ? extends net.corda.core.crypto.SecureHash>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$Update<U>
      params:
        consumed:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
            U>>
        produced:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
            U>>
        flowId:
          annotation:
            - Nullable
          type: java.util.UUID
        type:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$UpdateType
        references:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.contracts.StateAndRef<? extends
            U>>
        consumingTxIds:
          annotation:
            - NotNull
          type: "java.util.Map<net.corda.core.contracts.StateRef, ? extends net.corda.core.crypto.SecureHash>"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getConsumed():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.contracts.StateAndRef<U>>
    getConsumingTxIds():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<net.corda.core.contracts.StateRef, net.corda.core.crypto.SecureHash>"
    getFlowId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.UUID
    getProduced():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.contracts.StateAndRef<U>>
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.contracts.StateAndRef<U>>
    getType():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$UpdateType
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isEmpty():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    plus(net.corda.core.node.services.Vault$Update<U>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$Update<U>
      params:
        rhs:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$Update<U>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.Vault$UpdateType:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.Vault$UpdateType>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.Vault$UpdateType
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.Vault$UpdateType[]"
net.corda.core.node.services.VaultQueryException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.node.services.VaultService:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    ? _queryBy(net.corda.core.node.services.vault.QueryCriteria, net.corda.core.node.services.vault.PageSpecification,
      net.corda.core.node.services.vault.Sort, Class<? extends T>)
    : annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        paging:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.PageSpecification
        sorting:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
    ? _trackBy(net.corda.core.node.services.vault.QueryCriteria, net.corda.core.node.services.vault.PageSpecification,
      net.corda.core.node.services.vault.Sort, Class<? extends T>)
    : annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        paging:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.PageSpecification
        sorting:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
    addNoteToTransaction(net.corda.core.crypto.SecureHash, String):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        txnId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        noteText:
          annotation:
            - NotNull
          type: String
    getRawUpdates():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: rx.Observable<net.corda.core.node.services.Vault$Update<net.corda.core.contracts.ContractState>>
    getTransactionNotes(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Iterable<String>
      params:
        txnId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    getUpdates():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: rx.Observable<net.corda.core.node.services.Vault$Update<net.corda.core.contracts.ContractState>>
    queryBy(Class<? extends T>):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
    queryBy(Class<? extends T>, net.corda.core.node.services.vault.PageSpecification):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        paging:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.PageSpecification
    queryBy(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    ? queryBy(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.PageSpecification)
    : annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        paging:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.PageSpecification
    ? queryBy(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.PageSpecification, net.corda.core.node.services.vault.Sort)
    : annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        paging:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.PageSpecification
        sorting:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort
    queryBy(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria, net.corda.core.node.services.vault.Sort):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        sorting:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort
    softLockRelease(java.util.UUID, net.corda.core.utilities.NonEmptySet<net.corda.core.contracts.StateRef>):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        lockId:
          annotation:
            - NotNull
          type: java.util.UUID
        stateRefs:
          annotation:
            - Nullable
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.contracts.StateRef>
    softLockReserve(java.util.UUID, net.corda.core.utilities.NonEmptySet<net.corda.core.contracts.StateRef>):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        lockId:
          annotation:
            - NotNull
          type: java.util.UUID
        stateRefs:
          annotation:
            - NotNull
          type: net.corda.core.utilities.NonEmptySet<net.corda.core.contracts.StateRef>
    trackBy(Class<? extends T>):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
    trackBy(Class<? extends T>, net.corda.core.node.services.vault.PageSpecification):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        paging:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.PageSpecification
    trackBy(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    ? trackBy(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.PageSpecification)
    : annotations:
        - NotNull
      default: true
      type: public
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        paging:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.PageSpecification
    ? trackBy(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.PageSpecification, net.corda.core.node.services.vault.Sort)
    : annotations:
        - NotNull
      default: true
      type: public
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        paging:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.PageSpecification
        sorting:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort
    trackBy(Class<? extends T>, net.corda.core.node.services.vault.QueryCriteria, net.corda.core.node.services.vault.Sort):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        sorting:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort
    ? tryLockFungibleStatesForSpending(java.util.UUID, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.contracts.Amount<?>, Class<? extends T>)
    : annotations:
        - Suspendable
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        lockId:
          annotation:
            - NotNull
          type: java.util.UUID
        eligibleStatesQuery:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
        amount:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Amount<?>
        contractStateType:
          annotation:
            - NotNull
          type: Class<? extends T>
    whenConsumed(net.corda.core.contracts.StateRef):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: net.corda.core.concurrent.CordaFuture<net.corda.core.node.services.Vault$Update<net.corda.core.contracts.ContractState>>
      params:
        ref:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
net.corda.core.node.services.VaultServiceKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    queryBy(net.corda.core.node.services.VaultService):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.VaultService
    queryBy(net.corda.core.node.services.VaultService, net.corda.core.node.services.vault.PageSpecification):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.vault.PageSpecification
    queryBy(net.corda.core.node.services.VaultService, net.corda.core.node.services.vault.QueryCriteria):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.vault.QueryCriteria
    ? queryBy(net.corda.core.node.services.VaultService, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.PageSpecification)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.vault.PageSpecification
    ? queryBy(net.corda.core.node.services.VaultService, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.PageSpecification, net.corda.core.node.services.vault.Sort)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.vault.Sort
    ? queryBy(net.corda.core.node.services.VaultService, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.Sort)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.node.services.Vault$Page<T>
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.vault.Sort
    trackBy(net.corda.core.node.services.VaultService):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.VaultService
    trackBy(net.corda.core.node.services.VaultService, net.corda.core.node.services.vault.PageSpecification):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.vault.PageSpecification
    trackBy(net.corda.core.node.services.VaultService, net.corda.core.node.services.vault.QueryCriteria):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.vault.QueryCriteria
    ? trackBy(net.corda.core.node.services.VaultService, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.PageSpecification)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.vault.PageSpecification
    ? trackBy(net.corda.core.node.services.VaultService, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.PageSpecification, net.corda.core.node.services.vault.Sort)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.vault.Sort
    ? trackBy(net.corda.core.node.services.VaultService, net.corda.core.node.services.vault.QueryCriteria,
      net.corda.core.node.services.vault.Sort)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: "net.corda.core.messaging.DataFeed<net.corda.core.node.services.Vault$Page<T>,\
        \ net.corda.core.node.services.Vault$Update<T>>"
      params:
        "null":
          annotation: []
          type: net.corda.core.node.services.vault.Sort
  fields:
    MAX_CONSTRAINT_DATA_SIZE:
      annotation: []
      type: public static final int
      initialised value: 20000
net.corda.core.node.services.diagnostics.DiagnosticsService:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    nodeVersionInfo():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.diagnostics.NodeVersionInfo
net.corda.core.node.services.diagnostics.NodeVersionInfo:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component3():
      annotations: []
      default: false
      type: public final
      returnType: int
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(String, String, int, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.diagnostics.NodeVersionInfo
      params:
        releaseVersion:
          annotation:
            - NotNull
          type: String
        revision:
          annotation:
            - NotNull
          type: String
        platformVersion:
          annotation: []
          type: int
        vendor:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getPlatformVersion():
      annotations: []
      default: false
      type: public final
      returnType: int
    getReleaseVersion():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getRevision():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getVendor():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.AggregateFunctionType:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.AggregateFunctionType>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.AggregateFunctionType
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.AggregateFunctionType[]"
net.corda.core.node.services.vault.AttachmentQueryCriteria:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements:
    - net.corda.core.node.services.vault.GenericQueryCriteria
    - net.corda.core.node.services.vault.GenericQueryCriteria$ChainableQueryCriteria
  interface: false
  methods:
    and(net.corda.core.node.services.vault.AttachmentQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentQueryCriteria
    or(net.corda.core.node.services.vault.AttachmentQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentQueryCriteria
    visit(P):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: P
net.corda.core.node.services.vault.AttachmentQueryCriteria$AndComposition:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.AttachmentsQueryCriteriaParser>
  implements:
    - net.corda.core.node.services.vault.GenericQueryCriteria$ChainableQueryCriteria$AndVisitor
  interface: false
  methods:
    and(net.corda.core.node.services.vault.AttachmentQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentQueryCriteria
    getA():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria
    getB():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria
    or(net.corda.core.node.services.vault.AttachmentQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentQueryCriteria
    visit(P):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: P
net.corda.core.node.services.vault.AttachmentQueryCriteria$AttachmentsQueryCriteria:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.AttachmentsQueryCriteriaParser>
  implements: []
  interface: false
  methods:
    and(net.corda.core.node.services.vault.AttachmentQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentQueryCriteria
    component1():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<String>
    component2():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<String>
    component3():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<java.time.Instant>
    component4():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<java.util.List<String>>
    component5():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<java.util.List<java.security.PublicKey>>
    component6():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<Boolean>
    component7():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<Integer>
    ? copy(net.corda.core.node.services.vault.ColumnPredicate<String>, net.corda.core.node.services.vault.ColumnPredicate<String>,
      net.corda.core.node.services.vault.ColumnPredicate<java.time.Instant>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria$AttachmentsQueryCriteria
      params:
        uploaderCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<String>
        filenameCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<String>
        uploadDateCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<java.time.Instant>
    ? copy(net.corda.core.node.services.vault.ColumnPredicate<String>, net.corda.core.node.services.vault.ColumnPredicate<String>,
      net.corda.core.node.services.vault.ColumnPredicate<java.time.Instant>, net.corda.core.node.services.vault.ColumnPredicate<java.util.List<String>>,
      net.corda.core.node.services.vault.ColumnPredicate<java.util.List<java.security.PublicKey>>,
      net.corda.core.node.services.vault.ColumnPredicate<Boolean>, net.corda.core.node.services.vault.ColumnPredicate<Integer>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria$AttachmentsQueryCriteria
      params:
        uploaderCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<String>
        filenameCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<String>
        uploadDateCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<java.time.Instant>
        contractClassNamesCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<java.util.List<String>>
        signersCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<java.util.List<java.security.PublicKey>>
        isSignedCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<Boolean>
        versionCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<Integer>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getContractClassNamesCondition():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<java.util.List<String>>
    getFilenameCondition():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<String>
    getSignersCondition():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<java.util.List<java.security.PublicKey>>
    getUploadDateCondition():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<java.time.Instant>
    getUploaderCondition():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<String>
    getVersionCondition():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<Integer>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isSigned(net.corda.core.node.services.vault.ColumnPredicate<Boolean>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria$AttachmentsQueryCriteria
      params:
        isSignedPredicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<Boolean>
    isSignedCondition():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<Boolean>
    or(net.corda.core.node.services.vault.AttachmentQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentQueryCriteria
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    visit(net.corda.core.node.services.vault.AttachmentsQueryCriteriaParser):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentsQueryCriteriaParser
    withContractClassNames(net.corda.core.node.services.vault.ColumnPredicate<java.util.List<String>>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria$AttachmentsQueryCriteria
      params:
        contractClassNamesPredicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<java.util.List<String>>
    withFilename(net.corda.core.node.services.vault.ColumnPredicate<String>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria$AttachmentsQueryCriteria
      params:
        filenamePredicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<String>
    withSigners(net.corda.core.node.services.vault.ColumnPredicate<java.util.List<java.security.PublicKey>>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria$AttachmentsQueryCriteria
      params:
        signersPredicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<java.util.List<java.security.PublicKey>>
    withUploadDate(net.corda.core.node.services.vault.ColumnPredicate<java.time.Instant>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria$AttachmentsQueryCriteria
      params:
        uploadDatePredicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<java.time.Instant>
    withUploader(net.corda.core.node.services.vault.ColumnPredicate<String>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria$AttachmentsQueryCriteria
      params:
        uploaderPredicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<String>
    withVersion(net.corda.core.node.services.vault.ColumnPredicate<Integer>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria$AttachmentsQueryCriteria
      params:
        versionPredicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<Integer>
net.corda.core.node.services.vault.AttachmentQueryCriteria$OrComposition:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.AttachmentsQueryCriteriaParser>
  implements:
    - net.corda.core.node.services.vault.GenericQueryCriteria$ChainableQueryCriteria$OrVisitor
  interface: false
  methods:
    and(net.corda.core.node.services.vault.AttachmentQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentQueryCriteria
    getA():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria
    getB():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria
    or(net.corda.core.node.services.vault.AttachmentQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.AttachmentQueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentQueryCriteria
    visit(P):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: P
net.corda.core.node.services.vault.AttachmentSort:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.node.services.vault.BaseSort
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Collection<net.corda.core.node.services.vault.AttachmentSort$AttachmentSortColumn>
    copy(java.util.Collection<net.corda.core.node.services.vault.AttachmentSort$AttachmentSortColumn>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentSort
      params:
        columns:
          annotation:
            - NotNull
          type: java.util.Collection<net.corda.core.node.services.vault.AttachmentSort$AttachmentSortColumn>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getColumns():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Collection<net.corda.core.node.services.vault.AttachmentSort$AttachmentSortColumn>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.AttachmentSort$AttachmentSortAttribute:
  annotations: []
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getColumnName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.AttachmentSort$AttachmentSortAttribute>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.AttachmentSort$AttachmentSortAttribute
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.AttachmentSort$AttachmentSortAttribute[]"
net.corda.core.node.services.vault.AttachmentSort$AttachmentSortColumn:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentSort$AttachmentSortAttribute
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.Sort$Direction
    ? copy(net.corda.core.node.services.vault.AttachmentSort$AttachmentSortAttribute,
      net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentSort$AttachmentSortColumn
      params:
        sortAttribute:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentSort$AttachmentSortAttribute
        direction:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort$Direction
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getDirection():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.Sort$Direction
    getSortAttribute():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AttachmentSort$AttachmentSortAttribute
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.AttachmentsQueryCriteriaParser:
  annotations: []
  type: public interface
  extends:
    - net.corda.core.node.services.vault.BaseQueryCriteriaParser
  interface: true
  methods:
    parse(Q, S):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        criteria:
          annotation:
            - NotNull
          type: Q
        sorting:
          annotation:
            - Nullable
          type: S
    parseAnd(Q, Q):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        left:
          annotation:
            - NotNull
          type: Q
        right:
          annotation:
            - NotNull
          type: Q
    parseCriteria(net.corda.core.node.services.vault.AttachmentQueryCriteria$AttachmentsQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AttachmentQueryCriteria$AttachmentsQueryCriteria
    parseOr(Q, Q):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        left:
          annotation:
            - NotNull
          type: Q
        right:
          annotation:
            - NotNull
          type: Q
net.corda.core.node.services.vault.BaseQueryCriteriaParser:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    parse(Q, S):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        criteria:
          annotation:
            - NotNull
          type: Q
        sorting:
          annotation:
            - Nullable
          type: S
    parseAnd(Q, Q):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        left:
          annotation:
            - NotNull
          type: Q
        right:
          annotation:
            - NotNull
          type: Q
    parseOr(Q, Q):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        left:
          annotation:
            - NotNull
          type: Q
        right:
          annotation:
            - NotNull
          type: Q
net.corda.core.node.services.vault.BaseSort:
  annotations: []
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.node.services.vault.BinaryComparisonOperator:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Enum
  implements:
    - net.corda.core.node.services.vault.Operator
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.BinaryComparisonOperator>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.BinaryComparisonOperator
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.BinaryComparisonOperator[]"
net.corda.core.node.services.vault.BinaryLogicalOperator:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Enum
  implements:
    - net.corda.core.node.services.vault.Operator
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.BinaryLogicalOperator>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.BinaryLogicalOperator
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.BinaryLogicalOperator[]"
net.corda.core.node.services.vault.Builder:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    ? avg(kotlin.reflect.KProperty1<O, ? extends R>, java.util.List<? extends kotlin.reflect.KProperty1<O,
      ? extends R>>, net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<O,\
        \ R>"
      params:
        $this$avg:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        groupByColumns:
          annotation:
            - Nullable
          type: "java.util.List<? extends kotlin.reflect.KProperty1<O, ? extends R>>"
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    avg(net.corda.core.node.services.vault.FieldInfo):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$avg:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
    avg(net.corda.core.node.services.vault.FieldInfo, java.util.List<net.corda.core.node.services.vault.FieldInfo>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$avg:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.node.services.vault.FieldInfo>
    ? avg(net.corda.core.node.services.vault.FieldInfo, java.util.List<net.corda.core.node.services.vault.FieldInfo>,
      net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$avg:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.node.services.vault.FieldInfo>
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    avg(reflect.Field):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$avg:
          annotation:
            - NotNull
          type: reflect.Field
    avg(reflect.Field, java.util.List<reflect.Field>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$avg:
          annotation:
            - NotNull
          type: reflect.Field
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<reflect.Field>
    avg(reflect.Field, java.util.List<reflect.Field>, net.corda.core.node.services.vault.Sort$Direction):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$avg:
          annotation:
            - NotNull
          type: reflect.Field
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<reflect.Field>
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    between(R, R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$Between<R>
      params:
        from:
          annotation:
            - NotNull
          type: R
        to:
          annotation:
            - NotNull
          type: R
    between(kotlin.reflect.KProperty1<O, ? extends R>, R, R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$between:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        from:
          annotation:
            - NotNull
          type: R
        to:
          annotation:
            - NotNull
          type: R
    between(net.corda.core.node.services.vault.FieldInfo, R, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$between:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        from:
          annotation:
            - NotNull
          type: R
        to:
          annotation:
            - NotNull
          type: R
    between(reflect.Field, R, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$between:
          annotation:
            - NotNull
          type: reflect.Field
        from:
          annotation:
            - NotNull
          type: R
        to:
          annotation:
            - NotNull
          type: R
    compare(net.corda.core.node.services.vault.BinaryComparisonOperator, R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$BinaryComparison<R>
      params:
        operator:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.BinaryComparisonOperator
        value:
          annotation:
            - NotNull
          type: R
    comparePredicate(kotlin.reflect.KProperty1<O, ? extends R>, net.corda.core.node.services.vault.BinaryComparisonOperator, R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$comparePredicate:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        operator:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.BinaryComparisonOperator
        value:
          annotation:
            - NotNull
          type: R
    comparePredicate(net.corda.core.node.services.vault.FieldInfo, net.corda.core.node.services.vault.BinaryComparisonOperator, R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$comparePredicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        operator:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.BinaryComparisonOperator
        value:
          annotation:
            - NotNull
          type: R
    comparePredicate(reflect.Field, net.corda.core.node.services.vault.BinaryComparisonOperator, R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$comparePredicate:
          annotation:
            - NotNull
          type: reflect.Field
        operator:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.BinaryComparisonOperator
        value:
          annotation:
            - NotNull
          type: R
    count(kotlin.reflect.KProperty1<O, ? extends R>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<O,\
        \ R>"
      params:
        $this$count:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
    count(net.corda.core.node.services.vault.FieldInfo):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ Object>"
      params:
        $this$count:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
    count(reflect.Field):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ Object>"
      params:
        $this$count:
          annotation:
            - NotNull
          type: reflect.Field
    equal(R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$EqualityComparison<R>
      params:
        value:
          annotation: []
          type: R
    equal(R, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$EqualityComparison<R>
      params:
        value:
          annotation: []
          type: R
        exactMatch:
          annotation: []
          type: boolean
    equal(kotlin.reflect.KProperty1<O, ? extends R>, R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$equal:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        value:
          annotation: []
          type: R
    equal(kotlin.reflect.KProperty1<O, ? extends R>, R, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$equal:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        value:
          annotation: []
          type: R
        exactMatch:
          annotation: []
          type: boolean
    equal(net.corda.core.node.services.vault.FieldInfo, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$equal:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        value:
          annotation: []
          type: R
    equal(net.corda.core.node.services.vault.FieldInfo, R, boolean):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$equal:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        value:
          annotation: []
          type: R
        exactMatch:
          annotation: []
          type: boolean
    equal(reflect.Field, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$equal:
          annotation:
            - NotNull
          type: reflect.Field
        value:
          annotation: []
          type: R
    equal(reflect.Field, R, boolean):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$equal:
          annotation:
            - NotNull
          type: reflect.Field
        value:
          annotation: []
          type: R
        exactMatch:
          annotation: []
          type: boolean
    ? functionPredicate(kotlin.reflect.KProperty1<O, ? extends R>, net.corda.core.node.services.vault.ColumnPredicate<R>,
      java.util.List<? extends net.corda.core.node.services.vault.Column<O, ? extends
      R>>, net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<O,\
        \ R>"
      params:
        $this$functionPredicate:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        predicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<R>
        groupByColumns:
          annotation:
            - Nullable
          type: "java.util.List<? extends net.corda.core.node.services.vault.Column<O,\
            \ ? extends R>>"
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    ? functionPredicate(net.corda.core.node.services.vault.FieldInfo, net.corda.core.node.services.vault.ColumnPredicate<R>,
      java.util.List<? extends net.corda.core.node.services.vault.Column<Object, ?
      extends R>>, net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$functionPredicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        predicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<R>
        groupByColumns:
          annotation:
            - Nullable
          type: "java.util.List<? extends net.corda.core.node.services.vault.Column<Object,\
            \ ? extends R>>"
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    ? functionPredicate(reflect.Field, net.corda.core.node.services.vault.ColumnPredicate<R>,
      java.util.List<? extends net.corda.core.node.services.vault.Column<Object, ?
      extends R>>, net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$functionPredicate:
          annotation:
            - NotNull
          type: reflect.Field
        predicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<R>
        groupByColumns:
          annotation:
            - Nullable
          type: "java.util.List<? extends net.corda.core.node.services.vault.Column<Object,\
            \ ? extends R>>"
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    greaterThan(R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$BinaryComparison<R>
      params:
        value:
          annotation:
            - NotNull
          type: R
    greaterThan(kotlin.reflect.KProperty1<O, ? extends R>, R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$greaterThan:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        value:
          annotation:
            - NotNull
          type: R
    greaterThan(net.corda.core.node.services.vault.FieldInfo, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$greaterThan:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        value:
          annotation:
            - NotNull
          type: R
    greaterThan(reflect.Field, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$greaterThan:
          annotation:
            - NotNull
          type: reflect.Field
        value:
          annotation:
            - NotNull
          type: R
    greaterThanOrEqual(R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$BinaryComparison<R>
      params:
        value:
          annotation:
            - NotNull
          type: R
    greaterThanOrEqual(kotlin.reflect.KProperty1<O, ? extends R>, R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$greaterThanOrEqual:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        value:
          annotation:
            - NotNull
          type: R
    greaterThanOrEqual(net.corda.core.node.services.vault.FieldInfo, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$greaterThanOrEqual:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        value:
          annotation:
            - NotNull
          type: R
    greaterThanOrEqual(reflect.Field, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$greaterThanOrEqual:
          annotation:
            - NotNull
          type: reflect.Field
        value:
          annotation:
            - NotNull
          type: R
    in(java.util.Collection<? extends R>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$CollectionExpression<R>
      params:
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
    in(java.util.Collection<? extends R>, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$CollectionExpression<R>
      params:
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
        exactMatch:
          annotation: []
          type: boolean
    in(kotlin.reflect.KProperty1<O, ? extends R>, java.util.Collection<? extends R>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$in:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
    in(kotlin.reflect.KProperty1<O, ? extends R>, java.util.Collection<? extends R>, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$in:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
        exactMatch:
          annotation: []
          type: boolean
    in(net.corda.core.node.services.vault.FieldInfo, java.util.Collection<? extends R>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$in:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
    in(net.corda.core.node.services.vault.FieldInfo, java.util.Collection<? extends R>, boolean):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$in:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
        exactMatch:
          annotation: []
          type: boolean
    in(reflect.Field, java.util.Collection<? extends R>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$in:
          annotation:
            - NotNull
          type: reflect.Field
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
    in(reflect.Field, java.util.Collection<? extends R>, boolean):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$in:
          annotation:
            - NotNull
          type: reflect.Field
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
        exactMatch:
          annotation: []
          type: boolean
    isNotNull():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$NullExpression<R>
    isNull():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$NullExpression<R>
    isNull(kotlin.reflect.KProperty1<O, ? extends R>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$isNull:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
    isNull(net.corda.core.node.services.vault.FieldInfo):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ Object>"
      params:
        $this$isNull:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
    isNull(reflect.Field):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ Object>"
      params:
        $this$isNull:
          annotation:
            - NotNull
          type: reflect.Field
    lessThan(R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$BinaryComparison<R>
      params:
        value:
          annotation:
            - NotNull
          type: R
    lessThan(kotlin.reflect.KProperty1<O, ? extends R>, R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$lessThan:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        value:
          annotation:
            - NotNull
          type: R
    lessThan(net.corda.core.node.services.vault.FieldInfo, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$lessThan:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        value:
          annotation:
            - NotNull
          type: R
    lessThan(reflect.Field, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$lessThan:
          annotation:
            - NotNull
          type: reflect.Field
        value:
          annotation:
            - NotNull
          type: R
    lessThanOrEqual(R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$BinaryComparison<R>
      params:
        value:
          annotation:
            - NotNull
          type: R
    lessThanOrEqual(kotlin.reflect.KProperty1<O, ? extends R>, R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$lessThanOrEqual:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        value:
          annotation:
            - NotNull
          type: R
    lessThanOrEqual(net.corda.core.node.services.vault.FieldInfo, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$lessThanOrEqual:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        value:
          annotation:
            - NotNull
          type: R
    lessThanOrEqual(reflect.Field, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$lessThanOrEqual:
          annotation:
            - NotNull
          type: reflect.Field
        value:
          annotation:
            - NotNull
          type: R
    like(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$Likeness
      params:
        string:
          annotation:
            - NotNull
          type: String
    like(String, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$Likeness
      params:
        string:
          annotation:
            - NotNull
          type: String
        exactMatch:
          annotation: []
          type: boolean
    like(kotlin.reflect.KProperty1<O, String>, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ String>"
      params:
        $this$like:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, String>"
        string:
          annotation:
            - NotNull
          type: String
    like(kotlin.reflect.KProperty1<O, String>, String, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ String>"
      params:
        $this$like:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, String>"
        string:
          annotation:
            - NotNull
          type: String
        exactMatch:
          annotation: []
          type: boolean
    like(net.corda.core.node.services.vault.FieldInfo, String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ String>"
      params:
        $this$like:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        string:
          annotation:
            - NotNull
          type: String
    like(net.corda.core.node.services.vault.FieldInfo, String, boolean):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ String>"
      params:
        $this$like:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        string:
          annotation:
            - NotNull
          type: String
        exactMatch:
          annotation: []
          type: boolean
    like(reflect.Field, String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ String>"
      params:
        $this$like:
          annotation:
            - NotNull
          type: reflect.Field
        string:
          annotation:
            - NotNull
          type: String
    like(reflect.Field, String, boolean):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ String>"
      params:
        $this$like:
          annotation:
            - NotNull
          type: reflect.Field
        string:
          annotation:
            - NotNull
          type: String
        exactMatch:
          annotation: []
          type: boolean
    ? max(kotlin.reflect.KProperty1<O, ? extends R>, java.util.List<? extends kotlin.reflect.KProperty1<O,
      ? extends R>>, net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<O,\
        \ R>"
      params:
        $this$max:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        groupByColumns:
          annotation:
            - Nullable
          type: "java.util.List<? extends kotlin.reflect.KProperty1<O, ? extends R>>"
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    max(net.corda.core.node.services.vault.FieldInfo):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$max:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
    max(net.corda.core.node.services.vault.FieldInfo, java.util.List<net.corda.core.node.services.vault.FieldInfo>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$max:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.node.services.vault.FieldInfo>
    ? max(net.corda.core.node.services.vault.FieldInfo, java.util.List<net.corda.core.node.services.vault.FieldInfo>,
      net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$max:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.node.services.vault.FieldInfo>
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    max(reflect.Field):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$max:
          annotation:
            - NotNull
          type: reflect.Field
    max(reflect.Field, java.util.List<reflect.Field>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$max:
          annotation:
            - NotNull
          type: reflect.Field
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<reflect.Field>
    max(reflect.Field, java.util.List<reflect.Field>, net.corda.core.node.services.vault.Sort$Direction):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$max:
          annotation:
            - NotNull
          type: reflect.Field
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<reflect.Field>
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    ? min(kotlin.reflect.KProperty1<O, ? extends R>, java.util.List<? extends kotlin.reflect.KProperty1<O,
      ? extends R>>, net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<O,\
        \ R>"
      params:
        $this$min:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        groupByColumns:
          annotation:
            - Nullable
          type: "java.util.List<? extends kotlin.reflect.KProperty1<O, ? extends R>>"
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    min(net.corda.core.node.services.vault.FieldInfo):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$min:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
    min(net.corda.core.node.services.vault.FieldInfo, java.util.List<net.corda.core.node.services.vault.FieldInfo>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$min:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.node.services.vault.FieldInfo>
    ? min(net.corda.core.node.services.vault.FieldInfo, java.util.List<net.corda.core.node.services.vault.FieldInfo>,
      net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$min:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.node.services.vault.FieldInfo>
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    min(reflect.Field):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$min:
          annotation:
            - NotNull
          type: reflect.Field
    min(reflect.Field, java.util.List<reflect.Field>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$min:
          annotation:
            - NotNull
          type: reflect.Field
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<reflect.Field>
    min(reflect.Field, java.util.List<reflect.Field>, net.corda.core.node.services.vault.Sort$Direction):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$min:
          annotation:
            - NotNull
          type: reflect.Field
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<reflect.Field>
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    notEqual(R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$EqualityComparison<R>
      params:
        value:
          annotation: []
          type: R
    notEqual(R, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$EqualityComparison<R>
      params:
        value:
          annotation: []
          type: R
        exactMatch:
          annotation: []
          type: boolean
    notEqual(kotlin.reflect.KProperty1<O, ? extends R>, R):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$notEqual:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        value:
          annotation: []
          type: R
    notEqual(kotlin.reflect.KProperty1<O, ? extends R>, R, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$notEqual:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        value:
          annotation: []
          type: R
        exactMatch:
          annotation: []
          type: boolean
    notEqual(net.corda.core.node.services.vault.FieldInfo, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$notEqual:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        value:
          annotation: []
          type: R
    notEqual(net.corda.core.node.services.vault.FieldInfo, R, boolean):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$notEqual:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        value:
          annotation: []
          type: R
        exactMatch:
          annotation: []
          type: boolean
    notEqual(reflect.Field, R):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$notEqual:
          annotation:
            - NotNull
          type: reflect.Field
        value:
          annotation: []
          type: R
    notEqual(reflect.Field, R, boolean):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$notEqual:
          annotation:
            - NotNull
          type: reflect.Field
        value:
          annotation: []
          type: R
        exactMatch:
          annotation: []
          type: boolean
    notIn(java.util.Collection<? extends R>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$CollectionExpression<R>
      params:
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
    notIn(java.util.Collection<? extends R>, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$CollectionExpression<R>
      params:
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
        exactMatch:
          annotation: []
          type: boolean
    notIn(kotlin.reflect.KProperty1<O, ? extends R>, java.util.Collection<? extends R>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$notIn:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
    notIn(kotlin.reflect.KProperty1<O, ? extends R>, java.util.Collection<? extends R>, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$notIn:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
        exactMatch:
          annotation: []
          type: boolean
    notIn(net.corda.core.node.services.vault.FieldInfo, java.util.Collection<? extends R>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$notIn:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
    notIn(net.corda.core.node.services.vault.FieldInfo, java.util.Collection<? extends R>, boolean):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$notIn:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
        exactMatch:
          annotation: []
          type: boolean
    notIn(reflect.Field, java.util.Collection<? extends R>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$notIn:
          annotation:
            - NotNull
          type: reflect.Field
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
    notIn(reflect.Field, java.util.Collection<? extends R>, boolean):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$notIn:
          annotation:
            - NotNull
          type: reflect.Field
        collection:
          annotation:
            - NotNull
          type: java.util.Collection<? extends R>
        exactMatch:
          annotation: []
          type: boolean
    notLike(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$Likeness
      params:
        string:
          annotation:
            - NotNull
          type: String
    notLike(String, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$Likeness
      params:
        string:
          annotation:
            - NotNull
          type: String
        exactMatch:
          annotation: []
          type: boolean
    notLike(kotlin.reflect.KProperty1<O, String>, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ String>"
      params:
        $this$notLike:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, String>"
        string:
          annotation:
            - NotNull
          type: String
    notLike(kotlin.reflect.KProperty1<O, String>, String, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ String>"
      params:
        $this$notLike:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, String>"
        string:
          annotation:
            - NotNull
          type: String
        exactMatch:
          annotation: []
          type: boolean
    notLike(net.corda.core.node.services.vault.FieldInfo, String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ String>"
      params:
        $this$notLike:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        string:
          annotation:
            - NotNull
          type: String
    notLike(net.corda.core.node.services.vault.FieldInfo, String, boolean):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ String>"
      params:
        $this$notLike:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        string:
          annotation:
            - NotNull
          type: String
        exactMatch:
          annotation: []
          type: boolean
    notLike(reflect.Field, String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ String>"
      params:
        $this$notLike:
          annotation:
            - NotNull
          type: reflect.Field
        string:
          annotation:
            - NotNull
          type: String
    notLike(reflect.Field, String, boolean):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ String>"
      params:
        $this$notLike:
          annotation:
            - NotNull
          type: reflect.Field
        string:
          annotation:
            - NotNull
          type: String
        exactMatch:
          annotation: []
          type: boolean
    notNull(kotlin.reflect.KProperty1<O, ? extends R>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$notNull:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
    notNull(net.corda.core.node.services.vault.FieldInfo):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ Object>"
      params:
        $this$notNull:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
    notNull(reflect.Field):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ Object>"
      params:
        $this$notNull:
          annotation:
            - NotNull
          type: reflect.Field
    predicate(kotlin.reflect.KProperty1<O, ? extends R>, net.corda.core.node.services.vault.ColumnPredicate<R>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ R>"
      params:
        $this$predicate:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        predicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<R>
    predicate(net.corda.core.node.services.vault.FieldInfo, net.corda.core.node.services.vault.ColumnPredicate<R>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$predicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        predicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<R>
    predicate(reflect.Field, net.corda.core.node.services.vault.ColumnPredicate<R>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<Object,\
        \ R>"
      params:
        $this$predicate:
          annotation:
            - NotNull
          type: reflect.Field
        predicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<R>
    ? sum(kotlin.reflect.KProperty1<O, ? extends R>, java.util.List<? extends kotlin.reflect.KProperty1<O,
      ? extends R>>, net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<O,\
        \ R>"
      params:
        $this$sum:
          annotation:
            - NotNull
          type: "kotlin.reflect.KProperty1<O, ? extends R>"
        groupByColumns:
          annotation:
            - Nullable
          type: "java.util.List<? extends kotlin.reflect.KProperty1<O, ? extends R>>"
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    sum(net.corda.core.node.services.vault.FieldInfo):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$sum:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
    sum(net.corda.core.node.services.vault.FieldInfo, java.util.List<net.corda.core.node.services.vault.FieldInfo>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$sum:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.node.services.vault.FieldInfo>
    ? sum(net.corda.core.node.services.vault.FieldInfo, java.util.List<net.corda.core.node.services.vault.FieldInfo>,
      net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$sum:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.FieldInfo
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.node.services.vault.FieldInfo>
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    sum(reflect.Field):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$sum:
          annotation:
            - NotNull
          type: reflect.Field
    sum(reflect.Field, java.util.List<reflect.Field>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$sum:
          annotation:
            - NotNull
          type: reflect.Field
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<reflect.Field>
    sum(reflect.Field, java.util.List<reflect.Field>, net.corda.core.node.services.vault.Sort$Direction):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<Object,\
        \ R>"
      params:
        $this$sum:
          annotation:
            - NotNull
          type: reflect.Field
        groupByColumns:
          annotation:
            - Nullable
          type: java.util.List<reflect.Field>
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.node.services.vault.Builder
net.corda.core.node.services.vault.CollectionOperator:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Enum
  implements:
    - net.corda.core.node.services.vault.Operator
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.CollectionOperator>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.CollectionOperator
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.CollectionOperator[]"
net.corda.core.node.services.vault.Column:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getDeclaringClass():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Class<?>
    getName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
net.corda.core.node.services.vault.ColumnPredicate:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.node.services.vault.ColumnPredicate$AggregateFunction:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.ColumnPredicate<C>
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AggregateFunctionType
    copy(net.corda.core.node.services.vault.AggregateFunctionType):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$AggregateFunction<C>
      params:
        type:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.AggregateFunctionType
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getType():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.AggregateFunctionType
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.ColumnPredicate$Between:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.ColumnPredicate<C>
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: C
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: C
    copy(C, C):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$Between<C>
      params:
        rightFromLiteral:
          annotation:
            - NotNull
          type: C
        rightToLiteral:
          annotation:
            - NotNull
          type: C
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getRightFromLiteral():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: C
    getRightToLiteral():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: C
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.ColumnPredicate$BinaryComparison:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.ColumnPredicate<C>
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.BinaryComparisonOperator
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: C
    copy(net.corda.core.node.services.vault.BinaryComparisonOperator, C):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$BinaryComparison<C>
      params:
        operator:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.BinaryComparisonOperator
        rightLiteral:
          annotation:
            - NotNull
          type: C
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getOperator():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.BinaryComparisonOperator
    getRightLiteral():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: C
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.ColumnPredicate$CollectionExpression:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.ColumnPredicate<C>
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.CollectionOperator
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Collection<C>
    copy(net.corda.core.node.services.vault.CollectionOperator, java.util.Collection<? extends C>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$CollectionExpression<C>
      params:
        operator:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.CollectionOperator
        rightLiteral:
          annotation:
            - NotNull
          type: java.util.Collection<? extends C>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getOperator():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.CollectionOperator
    getRightLiteral():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Collection<C>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.ColumnPredicate$EqualityComparison:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.ColumnPredicate<C>
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.EqualityComparisonOperator
    component2():
      annotations: []
      default: false
      type: public final
      returnType: C
    copy(net.corda.core.node.services.vault.EqualityComparisonOperator, C):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$EqualityComparison<C>
      params:
        operator:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.EqualityComparisonOperator
        rightLiteral:
          annotation: []
          type: C
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getOperator():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.EqualityComparisonOperator
    getRightLiteral():
      annotations: []
      default: false
      type: public final
      returnType: C
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.ColumnPredicate$Likeness:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.ColumnPredicate<C>
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.LikenessOperator
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(net.corda.core.node.services.vault.LikenessOperator, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$Likeness
      params:
        operator:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.LikenessOperator
        rightLiteral:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getOperator():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.LikenessOperator
    getRightLiteral():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.ColumnPredicate$NullExpression:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.ColumnPredicate<C>
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.NullOperator
    copy(net.corda.core.node.services.vault.NullOperator):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate$NullExpression<C>
      params:
        operator:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.NullOperator
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getOperator():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.NullOperator
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.CordaTransactionSupport:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    transaction(kotlin.jvm.functions.Function1<? super net.corda.core.node.services.vault.SessionScope, ? extends T>):
      annotations: []
      default: false
      type: public abstract
      returnType: T
      params:
        statement:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super net.corda.core.node.services.vault.SessionScope,\
            \ ? extends T>"
net.corda.core.node.services.vault.CriteriaExpression:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: T>
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.Column<O, C>"
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<C>
    component3():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "java.util.List<net.corda.core.node.services.vault.Column<O, C>>"
    component4():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.Sort$Direction
    ? copy(net.corda.core.node.services.vault.Column<O, ? extends C>, net.corda.core.node.services.vault.ColumnPredicate<C>,
      java.util.List<? extends net.corda.core.node.services.vault.Column<O, ? extends
      C>>, net.corda.core.node.services.vault.Sort$Direction)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$AggregateFunctionExpression<O,\
        \ C>"
      params:
        column:
          annotation:
            - NotNull
          type: "net.corda.core.node.services.vault.Column<O, ? extends C>"
        predicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<C>
        groupByColumns:
          annotation:
            - Nullable
          type: "java.util.List<? extends net.corda.core.node.services.vault.Column<O,\
            \ ? extends C>>"
        orderBy:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.Sort$Direction
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getColumn():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.Column<O, C>"
    getGroupByColumns():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: "java.util.List<net.corda.core.node.services.vault.Column<O, C>>"
    getOrderBy():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.Sort$Direction
    getPredicate():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<C>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.CriteriaExpression$BinaryLogical:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: T>
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression<O, Boolean>"
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression<O, Boolean>"
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.BinaryLogicalOperator
    ? copy(net.corda.core.node.services.vault.CriteriaExpression<O, Boolean>, net.corda.core.node.services.vault.CriteriaExpression<O,
      Boolean>, net.corda.core.node.services.vault.BinaryLogicalOperator)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.CriteriaExpression$BinaryLogical<O>
      params:
        left:
          annotation:
            - NotNull
          type: "net.corda.core.node.services.vault.CriteriaExpression<O, Boolean>"
        right:
          annotation:
            - NotNull
          type: "net.corda.core.node.services.vault.CriteriaExpression<O, Boolean>"
        operator:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.BinaryLogicalOperator
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getLeft():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression<O, Boolean>"
    getOperator():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.BinaryLogicalOperator
    getRight():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression<O, Boolean>"
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: T>
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.Column<O, C>"
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<C>
    copy(net.corda.core.node.services.vault.Column<O, ? extends C>, net.corda.core.node.services.vault.ColumnPredicate<C>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression$ColumnPredicateExpression<O,\
        \ C>"
      params:
        column:
          annotation:
            - NotNull
          type: "net.corda.core.node.services.vault.Column<O, ? extends C>"
        predicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<C>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getColumn():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.Column<O, C>"
    getPredicate():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<C>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.CriteriaExpression$Not:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: T>
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression<O, Boolean>"
    copy(net.corda.core.node.services.vault.CriteriaExpression<O, Boolean>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.CriteriaExpression$Not<O>
      params:
        expression:
          annotation:
            - NotNull
          type: "net.corda.core.node.services.vault.CriteriaExpression<O, Boolean>"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getExpression():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression<O, Boolean>"
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.EqualityComparisonOperator:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Enum
  implements:
    - net.corda.core.node.services.vault.Operator
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.EqualityComparisonOperator>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.EqualityComparisonOperator
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.EqualityComparisonOperator[]"
net.corda.core.node.services.vault.FieldInfo:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getEntityClass():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Class<?>
    getName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
net.corda.core.node.services.vault.GenericQueryCriteria:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    visit(P):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: P
net.corda.core.node.services.vault.GenericQueryCriteria$ChainableQueryCriteria:
  annotations: []
  type: public static interface
  extends: []
  interface: true
  methods:
    and(Q):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Q
      params:
        criteria:
          annotation:
            - NotNull
          type: Q
    or(Q):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Q
      params:
        criteria:
          annotation:
            - NotNull
          type: Q
net.corda.core.node.services.vault.GenericQueryCriteria$ChainableQueryCriteria$AndVisitor:
  annotations: []
  type: public static interface
  extends:
    - net.corda.core.node.services.vault.GenericQueryCriteria
  interface: true
  methods:
    getA():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Q
    getB():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Q
    visit(P):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: P
net.corda.core.node.services.vault.GenericQueryCriteria$ChainableQueryCriteria$OrVisitor:
  annotations: []
  type: public static interface
  extends:
    - net.corda.core.node.services.vault.GenericQueryCriteria
  interface: true
  methods:
    getA():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Q
    getB():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Q
    visit(P):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: P
net.corda.core.node.services.vault.IQueryCriteriaParser:
  annotations: []
  type: public interface
  extends:
    - net.corda.core.node.services.vault.BaseQueryCriteriaParser
  interface: true
  methods:
    parse(Q, S):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        criteria:
          annotation:
            - NotNull
          type: Q
        sorting:
          annotation:
            - Nullable
          type: S
    parseAnd(Q, Q):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        left:
          annotation:
            - NotNull
          type: Q
        right:
          annotation:
            - NotNull
          type: Q
    parseCriteria(net.corda.core.node.services.vault.QueryCriteria$CommonQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria$CommonQueryCriteria
    parseCriteria(net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
    parseCriteria(net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria
    parseCriteria(net.corda.core.node.services.vault.QueryCriteria$VaultCustomQueryCriteria<L>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria$VaultCustomQueryCriteria<L>
    parseCriteria(net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
    parseOr(Q, Q):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        left:
          annotation:
            - NotNull
          type: Q
        right:
          annotation:
            - NotNull
          type: Q
net.corda.core.node.services.vault.LikenessOperator:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Enum
  implements:
    - net.corda.core.node.services.vault.Operator
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.LikenessOperator>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.LikenessOperator
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.LikenessOperator[]"
net.corda.core.node.services.vault.NullOperator:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Enum
  implements:
    - net.corda.core.node.services.vault.Operator
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.NullOperator>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.NullOperator
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.NullOperator[]"
net.corda.core.node.services.vault.Operator:
  annotations:
    - CordaSerializable
  type: public interface
  extends: []
  interface: true
  methods: {}
net.corda.core.node.services.vault.PageSpecification:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations: []
      default: false
      type: public final
      returnType: int
    component2():
      annotations: []
      default: false
      type: public final
      returnType: int
    copy(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.PageSpecification
      params:
        pageNumber:
          annotation: []
          type: int
        pageSize:
          annotation: []
          type: int
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getPageNumber():
      annotations: []
      default: false
      type: public final
      returnType: int
    getPageSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isDefault():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.QueryCriteria:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements:
    - net.corda.core.node.services.vault.GenericQueryCriteria
    - net.corda.core.node.services.vault.GenericQueryCriteria$ChainableQueryCriteria
  interface: false
  methods:
    and(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    or(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    visit(P):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: P
net.corda.core.node.services.vault.QueryCriteria$AndComposition:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.IQueryCriteriaParser>
  implements:
    - net.corda.core.node.services.vault.GenericQueryCriteria$ChainableQueryCriteria$AndVisitor
  interface: false
  methods:
    and(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    getA():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
    getB():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
    or(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    visit(P):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: P
net.corda.core.node.services.vault.QueryCriteria$CommonQueryCriteria:
  annotations:
    - CordaSerializable
  type: public abstract static class
  extends: net.corda.core.node.services.vault.IQueryCriteriaParser>
  implements: []
  interface: false
  methods:
    and(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    getConstraintTypes():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo$Type>
    getConstraints():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>
    getContractStateTypes():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: java.util.Set<Class<? extends net.corda.core.contracts.ContractState>>
    getExactParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getExternalIds():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<java.util.UUID>
    getParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getRelevancyStatus():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    getStatus():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.services.Vault$StateStatus
    or(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    visit(net.corda.core.node.services.vault.IQueryCriteriaParser):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.IQueryCriteriaParser
net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.IQueryCriteriaParser>
  implements: []
  interface: false
  methods:
    and(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    component1():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    component2():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    component3():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<Long>
    component4():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    component5():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.OpaqueBytes>
    component6():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$StateStatus
    component7():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.Set<Class<? extends net.corda.core.contracts.ContractState>>
    component8():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    component9():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    ? copy(java.util.List<? extends net.corda.core.identity.AbstractParty>, java.util.List<?
      extends net.corda.core.identity.AbstractParty>, net.corda.core.node.services.vault.ColumnPredicate<Long>,
      java.util.List<? extends net.corda.core.identity.AbstractParty>, java.util.List<?
      extends net.corda.core.utilities.OpaqueBytes>, net.corda.core.node.services.Vault$StateStatus,
      java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
      params:
        participants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        owner:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        quantity:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<Long>
        issuer:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        issuerRef:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.utilities.OpaqueBytes>
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
    ? copy(java.util.List<? extends net.corda.core.identity.AbstractParty>, java.util.List<?
      extends net.corda.core.identity.AbstractParty>, net.corda.core.node.services.vault.ColumnPredicate<Long>,
      java.util.List<? extends net.corda.core.identity.AbstractParty>, java.util.List<?
      extends net.corda.core.utilities.OpaqueBytes>, net.corda.core.node.services.Vault$StateStatus,
      java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>,
      net.corda.core.node.services.Vault$RelevancyStatus)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
      params:
        participants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        owner:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        quantity:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<Long>
        issuer:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        issuerRef:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.utilities.OpaqueBytes>
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
    ? copy(java.util.List<? extends net.corda.core.identity.AbstractParty>, java.util.List<?
      extends net.corda.core.identity.AbstractParty>, net.corda.core.node.services.vault.ColumnPredicate<Long>,
      java.util.List<? extends net.corda.core.identity.AbstractParty>, java.util.List<?
      extends net.corda.core.utilities.OpaqueBytes>, net.corda.core.node.services.Vault$StateStatus,
      java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>,
      net.corda.core.node.services.Vault$RelevancyStatus, java.util.List<? extends
      net.corda.core.identity.AbstractParty>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
      params:
        participants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        owner:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        quantity:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<Long>
        issuer:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        issuerRef:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.utilities.OpaqueBytes>
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
        exactParticipants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getConstraintTypes():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo$Type>
    getConstraints():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>
    getContractStateTypes():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.Set<Class<? extends net.corda.core.contracts.ContractState>>
    getExactParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getExternalIds():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<java.util.UUID>
    getIssuer():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getIssuerRef():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.OpaqueBytes>
    getOwner():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getQuantity():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<Long>
    getRelevancyStatus():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    getStatus():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.Vault$StateStatus
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    or(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    visit(net.corda.core.node.services.vault.IQueryCriteriaParser):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.IQueryCriteriaParser
    withContractStateTypes(java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
      params:
        contractStateTypes:
          annotation:
            - NotNull
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
    withExactParticipants(java.util.List<? extends net.corda.core.identity.AbstractParty>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
      params:
        exactParticipants:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    withIssuer(java.util.List<? extends net.corda.core.identity.AbstractParty>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
      params:
        issuer:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    withOwner(java.util.List<? extends net.corda.core.identity.AbstractParty>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
      params:
        owner:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    withParticipants(java.util.List<? extends net.corda.core.identity.AbstractParty>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
      params:
        participants:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    withQuantity(net.corda.core.node.services.vault.ColumnPredicate<Long>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
      params:
        quantity:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<Long>
    withRelevancyStatus(net.corda.core.node.services.Vault$RelevancyStatus):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
      params:
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
    withStatus(net.corda.core.node.services.Vault$StateStatus):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
      params:
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
    withissuerRef(java.util.List<? extends net.corda.core.utilities.OpaqueBytes>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleAssetQueryCriteria
      params:
        issuerRef:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.utilities.OpaqueBytes>
net.corda.core.node.services.vault.QueryCriteria$FungibleStateQueryCriteria:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.IQueryCriteriaParser>
  implements: []
  interface: false
  methods:
    and(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    component1():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    component2():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<Long>
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$StateStatus
    component4():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.Set<Class<? extends net.corda.core.contracts.ContractState>>
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    ? copy(java.util.List<? extends net.corda.core.identity.AbstractParty>, net.corda.core.node.services.vault.ColumnPredicate<Long>,
      net.corda.core.node.services.Vault$StateStatus, java.util.Set<? extends Class<?
      extends net.corda.core.contracts.ContractState>>, net.corda.core.node.services.Vault$RelevancyStatus)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleStateQueryCriteria
      params:
        participants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        quantity:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.ColumnPredicate<Long>
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getConstraintTypes():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo$Type>
    getConstraints():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>
    getContractStateTypes():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.Set<Class<? extends net.corda.core.contracts.ContractState>>
    getExactParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getExternalIds():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<java.util.UUID>
    getParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getQuantity():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<Long>
    getRelevancyStatus():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    getStatus():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.Vault$StateStatus
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    or(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    visit(net.corda.core.node.services.vault.IQueryCriteriaParser):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.IQueryCriteriaParser
    withContractStateTypes(java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleStateQueryCriteria
      params:
        contractStateTypes:
          annotation:
            - NotNull
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
    withParticipants(java.util.List<? extends net.corda.core.identity.AbstractParty>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleStateQueryCriteria
      params:
        participants:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    withQuantity(net.corda.core.node.services.vault.ColumnPredicate<Long>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleStateQueryCriteria
      params:
        quantity:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<Long>
    withRelevancyStatus(net.corda.core.node.services.Vault$RelevancyStatus):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleStateQueryCriteria
      params:
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
    withStatus(net.corda.core.node.services.Vault$StateStatus):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$FungibleStateQueryCriteria
      params:
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.IQueryCriteriaParser>
  implements: []
  interface: false
  methods:
    and(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    component1():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    component2():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<java.util.UUID>
    component3():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<String>
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$StateStatus
    component5():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.Set<Class<? extends net.corda.core.contracts.ContractState>>
    component6():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    component7():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    ? copy(java.util.List<? extends net.corda.core.identity.AbstractParty>, java.util.List<java.util.UUID>,
      java.util.List<String>, net.corda.core.node.services.Vault$StateStatus, java.util.Set<?
      extends Class<? extends net.corda.core.contracts.ContractState>>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria
      params:
        participants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        uuid:
          annotation:
            - Nullable
          type: java.util.List<java.util.UUID>
        externalId:
          annotation:
            - Nullable
          type: java.util.List<String>
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
    ? copy(java.util.List<? extends net.corda.core.identity.AbstractParty>, java.util.List<java.util.UUID>,
      java.util.List<String>, net.corda.core.node.services.Vault$StateStatus, java.util.Set<?
      extends Class<? extends net.corda.core.contracts.ContractState>>, net.corda.core.node.services.Vault$RelevancyStatus)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria
      params:
        participants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        uuid:
          annotation:
            - Nullable
          type: java.util.List<java.util.UUID>
        externalId:
          annotation:
            - Nullable
          type: java.util.List<String>
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
    ? copy(java.util.List<? extends net.corda.core.identity.AbstractParty>, java.util.List<java.util.UUID>,
      java.util.List<String>, net.corda.core.node.services.Vault$StateStatus, java.util.Set<?
      extends Class<? extends net.corda.core.contracts.ContractState>>, net.corda.core.node.services.Vault$RelevancyStatus,
      java.util.List<? extends net.corda.core.identity.AbstractParty>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria
      params:
        participants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        uuid:
          annotation:
            - Nullable
          type: java.util.List<java.util.UUID>
        externalId:
          annotation:
            - Nullable
          type: java.util.List<String>
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
        exactParticipants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getConstraintTypes():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo$Type>
    getConstraints():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>
    getContractStateTypes():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.Set<Class<? extends net.corda.core.contracts.ContractState>>
    getExactParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getExternalId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<String>
    getExternalIds():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<java.util.UUID>
    getParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getRelevancyStatus():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    getStatus():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.Vault$StateStatus
    getUuid():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<java.util.UUID>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    or(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    visit(net.corda.core.node.services.vault.IQueryCriteriaParser):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.IQueryCriteriaParser
    withContractStateTypes(java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria
      params:
        contractStateTypes:
          annotation:
            - NotNull
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
    withExactParticipants(java.util.List<? extends net.corda.core.identity.AbstractParty>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria
      params:
        exactParticipants:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    withExternalId(java.util.List<String>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria
      params:
        externalId:
          annotation:
            - NotNull
          type: java.util.List<String>
    withParticipants(java.util.List<? extends net.corda.core.identity.AbstractParty>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria
      params:
        participants:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    withRelevancyStatus(net.corda.core.node.services.Vault$RelevancyStatus):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria
      params:
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
    withStatus(net.corda.core.node.services.Vault$StateStatus):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria
      params:
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
    withUuid(java.util.List<java.util.UUID>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$LinearStateQueryCriteria
      params:
        uuid:
          annotation:
            - NotNull
          type: java.util.List<java.util.UUID>
net.corda.core.node.services.vault.QueryCriteria$OrComposition:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.IQueryCriteriaParser>
  implements:
    - net.corda.core.node.services.vault.GenericQueryCriteria$ChainableQueryCriteria$OrVisitor
  interface: false
  methods:
    and(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    getA():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
    getB():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
    or(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    visit(P):
      annotations:
        - NotNull
      default: true
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: P
net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$SoftLockingType
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.util.UUID>
    copy(net.corda.core.node.services.vault.QueryCriteria$SoftLockingType, java.util.List<java.util.UUID>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition
      params:
        type:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria$SoftLockingType
        lockIds:
          annotation:
            - NotNull
          type: java.util.List<java.util.UUID>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getLockIds():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.util.UUID>
    getType():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$SoftLockingType
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.QueryCriteria$SoftLockingType:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.QueryCriteria$SoftLockingType>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.QueryCriteria$SoftLockingType
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.QueryCriteria$SoftLockingType[]"
net.corda.core.node.services.vault.QueryCriteria$TimeCondition:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$TimeInstantType
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<java.time.Instant>
    ? copy(net.corda.core.node.services.vault.QueryCriteria$TimeInstantType, net.corda.core.node.services.vault.ColumnPredicate<java.time.Instant>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$TimeCondition
      params:
        type:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria$TimeInstantType
        predicate:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.ColumnPredicate<java.time.Instant>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getPredicate():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.ColumnPredicate<java.time.Instant>
    getType():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$TimeInstantType
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.QueryCriteria$TimeInstantType:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.QueryCriteria$TimeInstantType>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.QueryCriteria$TimeInstantType
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.QueryCriteria$TimeInstantType[]"
net.corda.core.node.services.vault.QueryCriteria$VaultCustomQueryCriteria:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.IQueryCriteriaParser>
  implements: []
  interface: false
  methods:
    and(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression<L, Boolean>"
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$StateStatus
    component3():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.Set<Class<? extends net.corda.core.contracts.ContractState>>
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    ? copy(net.corda.core.node.services.vault.CriteriaExpression<L, Boolean>, net.corda.core.node.services.Vault$StateStatus,
      java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultCustomQueryCriteria<L>
      params:
        expression:
          annotation:
            - NotNull
          type: "net.corda.core.node.services.vault.CriteriaExpression<L, Boolean>"
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
    ? copy(net.corda.core.node.services.vault.CriteriaExpression<L, Boolean>, net.corda.core.node.services.Vault$StateStatus,
      java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>,
      net.corda.core.node.services.Vault$RelevancyStatus)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultCustomQueryCriteria<L>
      params:
        expression:
          annotation:
            - NotNull
          type: "net.corda.core.node.services.vault.CriteriaExpression<L, Boolean>"
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getConstraintTypes():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo$Type>
    getConstraints():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>
    getContractStateTypes():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.Set<Class<? extends net.corda.core.contracts.ContractState>>
    getExactParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getExpression():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.node.services.vault.CriteriaExpression<L, Boolean>"
    getExternalIds():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<java.util.UUID>
    getParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getRelevancyStatus():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    getStatus():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.Vault$StateStatus
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    or(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    visit(net.corda.core.node.services.vault.IQueryCriteriaParser):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.IQueryCriteriaParser
    withContractStateTypes(java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultCustomQueryCriteria<L>
      params:
        contractStateTypes:
          annotation:
            - NotNull
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
    withExpression(net.corda.core.node.services.vault.CriteriaExpression<L, Boolean>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultCustomQueryCriteria<L>
      params:
        expression:
          annotation:
            - NotNull
          type: "net.corda.core.node.services.vault.CriteriaExpression<L, Boolean>"
    withRelevancyStatus(net.corda.core.node.services.Vault$RelevancyStatus):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultCustomQueryCriteria<L>
      params:
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
    withStatus(net.corda.core.node.services.Vault$StateStatus):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultCustomQueryCriteria<L>
      params:
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.IQueryCriteriaParser>
  implements: []
  interface: false
  methods:
    and(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$StateStatus
    component10():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    component11():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.util.UUID>
    component12():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    component2():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.Set<Class<? extends net.corda.core.contracts.ContractState>>
    component3():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    component4():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    component5():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition
    component6():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$TimeCondition
    component7():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    component8():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo$Type>
    component9():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>
    ? copy(net.corda.core.node.services.Vault$StateStatus, java.util.Set<? extends
      Class<? extends net.corda.core.contracts.ContractState>>, java.util.List<net.corda.core.contracts.StateRef>,
      java.util.List<? extends net.corda.core.identity.AbstractParty>, net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition,
      net.corda.core.node.services.vault.QueryCriteria$TimeCondition)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
        stateRefs:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.contracts.StateRef>
        notary:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        softLockingCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition
        timeCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.QueryCriteria$TimeCondition
    ? copy(net.corda.core.node.services.Vault$StateStatus, java.util.Set<? extends
      Class<? extends net.corda.core.contracts.ContractState>>, java.util.List<net.corda.core.contracts.StateRef>,
      java.util.List<? extends net.corda.core.identity.AbstractParty>, net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition,
      net.corda.core.node.services.vault.QueryCriteria$TimeCondition, net.corda.core.node.services.Vault$RelevancyStatus,
      java.util.Set<? extends net.corda.core.node.services.Vault$ConstraintInfo$Type>,
      java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>, java.util.List<?
      extends net.corda.core.identity.AbstractParty>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
        stateRefs:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.contracts.StateRef>
        notary:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        softLockingCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition
        timeCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.QueryCriteria$TimeCondition
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
        constraintTypes:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.node.services.Vault$ConstraintInfo$Type>
        constraints:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>
        participants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    ? copy(net.corda.core.node.services.Vault$StateStatus, java.util.Set<? extends
      Class<? extends net.corda.core.contracts.ContractState>>, java.util.List<net.corda.core.contracts.StateRef>,
      java.util.List<? extends net.corda.core.identity.AbstractParty>, net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition,
      net.corda.core.node.services.vault.QueryCriteria$TimeCondition, net.corda.core.node.services.Vault$RelevancyStatus,
      java.util.Set<? extends net.corda.core.node.services.Vault$ConstraintInfo$Type>,
      java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>, java.util.List<?
      extends net.corda.core.identity.AbstractParty>, java.util.List<java.util.UUID>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
        stateRefs:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.contracts.StateRef>
        notary:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        softLockingCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition
        timeCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.QueryCriteria$TimeCondition
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
        constraintTypes:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.node.services.Vault$ConstraintInfo$Type>
        constraints:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>
        participants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        externalIds:
          annotation:
            - NotNull
          type: java.util.List<java.util.UUID>
    ? copy(net.corda.core.node.services.Vault$StateStatus, java.util.Set<? extends
      Class<? extends net.corda.core.contracts.ContractState>>, java.util.List<net.corda.core.contracts.StateRef>,
      java.util.List<? extends net.corda.core.identity.AbstractParty>, net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition,
      net.corda.core.node.services.vault.QueryCriteria$TimeCondition, net.corda.core.node.services.Vault$RelevancyStatus,
      java.util.Set<? extends net.corda.core.node.services.Vault$ConstraintInfo$Type>,
      java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>, java.util.List<?
      extends net.corda.core.identity.AbstractParty>, java.util.List<java.util.UUID>,
      java.util.List<? extends net.corda.core.identity.AbstractParty>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
        contractStateTypes:
          annotation:
            - Nullable
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
        stateRefs:
          annotation:
            - Nullable
          type: java.util.List<net.corda.core.contracts.StateRef>
        notary:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        softLockingCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition
        timeCondition:
          annotation:
            - Nullable
          type: net.corda.core.node.services.vault.QueryCriteria$TimeCondition
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
        constraintTypes:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.node.services.Vault$ConstraintInfo$Type>
        constraints:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>
        participants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
        externalIds:
          annotation:
            - NotNull
          type: java.util.List<java.util.UUID>
        exactParticipants:
          annotation:
            - Nullable
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getConstraintTypes():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo$Type>
    getConstraints():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>
    getContractStateTypes():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.Set<Class<? extends net.corda.core.contracts.ContractState>>
    getExactParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getExternalIds():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<java.util.UUID>
    getNotary():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    getRelevancyStatus():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.Vault$RelevancyStatus
    getSoftLockingCondition():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition
    getStateRefs():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getStatus():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.Vault$StateStatus
    getTimeCondition():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$TimeCondition
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    or(net.corda.core.node.services.vault.QueryCriteria):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.services.vault.QueryCriteria
      params:
        criteria:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    visit(net.corda.core.node.services.vault.IQueryCriteriaParser):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Collection<javax.persistence.criteria.Predicate>
      params:
        parser:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.IQueryCriteriaParser
    withConstraintTypes(java.util.Set<? extends net.corda.core.node.services.Vault$ConstraintInfo$Type>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        constraintTypes:
          annotation:
            - NotNull
          type: java.util.Set<? extends net.corda.core.node.services.Vault$ConstraintInfo$Type>
    withConstraints(java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        constraints:
          annotation:
            - NotNull
          type: java.util.Set<net.corda.core.node.services.Vault$ConstraintInfo>
    withContractStateTypes(java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        contractStateTypes:
          annotation:
            - NotNull
          type: java.util.Set<? extends Class<? extends net.corda.core.contracts.ContractState>>
    withExactParticipants(java.util.List<? extends net.corda.core.identity.AbstractParty>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        exactParticipants:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    withExternalIds(java.util.List<java.util.UUID>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        externalIds:
          annotation:
            - NotNull
          type: java.util.List<java.util.UUID>
    withNotary(java.util.List<? extends net.corda.core.identity.AbstractParty>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        notary:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    withParticipants(java.util.List<? extends net.corda.core.identity.AbstractParty>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        participants:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.identity.AbstractParty>
    withRelevancyStatus(net.corda.core.node.services.Vault$RelevancyStatus):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        relevancyStatus:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$RelevancyStatus
    withSoftLockingCondition(net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        softLockingCondition:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria$SoftLockingCondition
    withStateRefs(java.util.List<net.corda.core.contracts.StateRef>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        stateRefs:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.contracts.StateRef>
    withStatus(net.corda.core.node.services.Vault$StateStatus):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        status:
          annotation:
            - NotNull
          type: net.corda.core.node.services.Vault$StateStatus
    withTimeCondition(net.corda.core.node.services.vault.QueryCriteria$TimeCondition):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.QueryCriteria$VaultQueryCriteria
      params:
        timeCondition:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.QueryCriteria$TimeCondition
net.corda.core.node.services.vault.QueryCriteriaUtils:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    builder(kotlin.jvm.functions.Function1<? super net.corda.core.node.services.vault.Builder, ? extends A>):
      annotations: []
      default: false
      type: public static final
      returnType: A
      params:
        block:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super net.corda.core.node.services.vault.Builder,\
            \ ? extends A>"
    getColumnName(net.corda.core.node.services.vault.Column<O, ? extends C>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        column:
          annotation:
            - NotNull
          type: "net.corda.core.node.services.vault.Column<O, ? extends C>"
    getField(String, Class<?>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.node.services.vault.FieldInfo
      params:
        fieldName:
          annotation:
            - NotNull
          type: String
        entityClass:
          annotation:
            - NotNull
          type: Class<?>
    resolveEnclosingObjectFromColumn(net.corda.core.node.services.vault.Column<O, ? extends C>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: Class<O>
      params:
        column:
          annotation:
            - NotNull
          type: "net.corda.core.node.services.vault.Column<O, ? extends C>"
    resolveEnclosingObjectFromExpression(net.corda.core.node.services.vault.CriteriaExpression<O, ? extends R>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: Class<O>
      params:
        expression:
          annotation:
            - NotNull
          type: "net.corda.core.node.services.vault.CriteriaExpression<O, ? extends\
            \ R>"
  fields:
    DEFAULT_PAGE_NUM:
      annotation: []
      type: public static final int
      initialised value: 1
    DEFAULT_PAGE_SIZE:
      annotation: []
      type: public static final int
      initialised value: 200
    MAX_PAGE_SIZE:
      annotation: []
      type: public static final int
      initialised value: 2147483646
net.corda.core.node.services.vault.SessionScope:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getSession():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: org.hibernate.Session
net.corda.core.node.services.vault.Sort:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.node.services.vault.BaseSort
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Collection<net.corda.core.node.services.vault.Sort$SortColumn>
    copy(java.util.Collection<net.corda.core.node.services.vault.Sort$SortColumn>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.Sort
      params:
        columns:
          annotation:
            - NotNull
          type: java.util.Collection<net.corda.core.node.services.vault.Sort$SortColumn>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getColumns():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Collection<net.corda.core.node.services.vault.Sort$SortColumn>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.Sort$Attribute:
  annotations:
    - CordaSerializable
  type: public static interface
  extends: []
  interface: true
  methods: {}
net.corda.core.node.services.vault.Sort$CommonStateAttribute:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements:
    - net.corda.core.node.services.vault.Sort$Attribute
  interface: false
  methods:
    getAttributeChild():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    getAttributeParent():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.Sort$CommonStateAttribute>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.Sort$CommonStateAttribute
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.Sort$CommonStateAttribute[]"
net.corda.core.node.services.vault.Sort$Direction:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.Sort$Direction>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.Sort$Direction
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.Sort$Direction[]"
net.corda.core.node.services.vault.Sort$FungibleStateAttribute:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements:
    - net.corda.core.node.services.vault.Sort$Attribute
  interface: false
  methods:
    getAttributeName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.Sort$FungibleStateAttribute>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.Sort$FungibleStateAttribute
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.Sort$FungibleStateAttribute[]"
net.corda.core.node.services.vault.Sort$LinearStateAttribute:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements:
    - net.corda.core.node.services.vault.Sort$Attribute
  interface: false
  methods:
    getAttributeName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.Sort$LinearStateAttribute>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.Sort$LinearStateAttribute
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.Sort$LinearStateAttribute[]"
net.corda.core.node.services.vault.Sort$SortColumn:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.SortAttribute
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.Sort$Direction
    copy(net.corda.core.node.services.vault.SortAttribute, net.corda.core.node.services.vault.Sort$Direction):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.Sort$SortColumn
      params:
        sortAttribute:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.SortAttribute
        direction:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort$Direction
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getDirection():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.Sort$Direction
    getSortAttribute():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.SortAttribute
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.Sort$VaultStateAttribute:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.lang.Enum
  implements:
    - net.corda.core.node.services.vault.Sort$Attribute
  interface: false
  methods:
    getAttributeName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.node.services.vault.Sort$VaultStateAttribute>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.node.services.vault.Sort$VaultStateAttribute
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.node.services.vault.Sort$VaultStateAttribute[]"
net.corda.core.node.services.vault.SortAttribute:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.node.services.vault.SortAttribute$Custom:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.SortAttribute
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Class<? extends net.corda.core.schemas.StatePersistable>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    copy(Class<? extends net.corda.core.schemas.StatePersistable>, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.SortAttribute$Custom
      params:
        entityStateClass:
          annotation:
            - NotNull
          type: Class<? extends net.corda.core.schemas.StatePersistable>
        entityStateColumnName:
          annotation:
            - NotNull
          type: String
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getEntityStateClass():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Class<? extends net.corda.core.schemas.StatePersistable>
    getEntityStateColumnName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.node.services.vault.SortAttribute$Standard:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.node.services.vault.SortAttribute
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.Sort$Attribute
    copy(net.corda.core.node.services.vault.Sort$Attribute):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.SortAttribute$Standard
      params:
        attribute:
          annotation:
            - NotNull
          type: net.corda.core.node.services.vault.Sort$Attribute
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getAttribute():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.services.vault.Sort$Attribute
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.observable.Observables:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    continueOnError(rx.Observable<T>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: rx.Observable<T>
      params:
        $this$continueOnError:
          annotation:
            - NotNull
          type: rx.Observable<T>
net.corda.core.schemas.CommonSchema:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods: {}
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.schemas.CommonSchema
net.corda.core.schemas.CommonSchemaV1:
  annotations: []
  type: public final class
  extends: net.corda.core.schemas.MappedSchema
  implements: []
  interface: false
  methods:
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getMappedTypes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Iterable<Class<?>>
    getMigrationResource():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    getName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getVersion():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.schemas.CommonSchemaV1
net.corda.core.schemas.CommonSchemaV1$FungibleState:
  annotations:
    - MappedSuperclass
    - CordaSerializable
  type: public static class
  extends: net.corda.core.schemas.StatePersistable
  implements: []
  interface: false
  methods:
    getIssuer():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.identity.AbstractParty
    getIssuerRef():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "byte[]"
    getOwner():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.identity.AbstractParty
    getParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.identity.AbstractParty>
    getQuantity():
      annotations: []
      default: false
      type: public
      returnType: long
    getStateRef():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.schemas.PersistentStateRef
    setIssuer(net.corda.core.identity.AbstractParty):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - NotNull
          type: net.corda.core.identity.AbstractParty
    setIssuerRef(byte[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - NotNull
          type: "byte[]"
    setOwner(net.corda.core.identity.AbstractParty):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - NotNull
          type: net.corda.core.identity.AbstractParty
    setParticipants(java.util.Set<net.corda.core.identity.AbstractParty>):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: java.util.Set<net.corda.core.identity.AbstractParty>
    setQuantity(long):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation: []
          type: long
    setStateRef(net.corda.core.schemas.PersistentStateRef):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: net.corda.core.schemas.PersistentStateRef
net.corda.core.schemas.CommonSchemaV1$LinearState:
  annotations:
    - MappedSuperclass
    - CordaSerializable
  type: public static class
  extends: net.corda.core.schemas.StatePersistable
  implements: []
  interface: false
  methods:
    getExternalId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getParticipants():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: java.util.Set<net.corda.core.identity.AbstractParty>
    getStateRef():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.schemas.PersistentStateRef
    getUuid():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.UUID
    setExternalId(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
    setParticipants(java.util.Set<net.corda.core.identity.AbstractParty>):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: java.util.Set<net.corda.core.identity.AbstractParty>
    setStateRef(net.corda.core.schemas.PersistentStateRef):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: net.corda.core.schemas.PersistentStateRef
    setUuid(java.util.UUID):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - NotNull
          type: java.util.UUID
net.corda.core.schemas.DirectStatePersistable:
  annotations: []
  type: public interface
  extends:
    - net.corda.core.schemas.StatePersistable
  interface: true
  methods:
    getStateRef():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.schemas.PersistentStateRef
net.corda.core.schemas.IndirectStatePersistable:
  annotations: []
  type: public interface
  extends:
    - net.corda.core.schemas.StatePersistable
  interface: true
  methods:
    getCompositeKey():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: T
net.corda.core.schemas.MappedSchema:
  annotations: []
  type: public class
  extends: null
  implements: []
  interface: false
  methods:
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getMappedTypes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Iterable<Class<?>>
    getMigrationResource():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getVersion():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.schemas.MappedSchemaValidator:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    crossReferencesToOtherMappedSchema(net.corda.core.schemas.MappedSchema):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.schemas.MappedSchemaValidator$SchemaCrossReferenceReport>
      params:
        schema:
          annotation:
            - NotNull
          type: net.corda.core.schemas.MappedSchema
    fieldsFromOtherMappedSchema(net.corda.core.schemas.MappedSchema):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.schemas.MappedSchemaValidator$SchemaCrossReferenceReport>
      params:
        schema:
          annotation:
            - NotNull
          type: net.corda.core.schemas.MappedSchema
    methodsFromOtherMappedSchema(net.corda.core.schemas.MappedSchema):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.schemas.MappedSchemaValidator$SchemaCrossReferenceReport>
      params:
        schema:
          annotation:
            - NotNull
          type: net.corda.core.schemas.MappedSchema
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.schemas.MappedSchemaValidator
net.corda.core.schemas.MappedSchemaValidator$SchemaCrossReferenceReport:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    toWarning():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
net.corda.core.schemas.PersistentState:
  annotations:
    - MappedSuperclass
    - CordaSerializable
  type: public class
  extends: null
  implements:
    - net.corda.core.schemas.DirectStatePersistable
  interface: false
  methods:
    getStateRef():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.schemas.PersistentStateRef
    setStateRef(net.corda.core.schemas.PersistentStateRef):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: net.corda.core.schemas.PersistentStateRef
net.corda.core.schemas.PersistentStateRef:
  annotations:
    - Embeddable
    - Immutable
  type: public class
  extends: null
  implements:
    - java.io.Serializable
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component2():
      annotations: []
      default: false
      type: public final
      returnType: int
    copy(String, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.schemas.PersistentStateRef
      params:
        txId:
          annotation:
            - NotNull
          type: String
        index:
          annotation: []
          type: int
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getIndex():
      annotations: []
      default: false
      type: public
      returnType: int
    getTxId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setIndex(int):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation: []
          type: int
    setTxId(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - NotNull
          type: String
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.schemas.QueryableState:
  annotations:
    - CordaSerializable
  type: public interface
  extends:
    - net.corda.core.contracts.ContractState
  interface: true
  methods:
    generateMappedObject(net.corda.core.schemas.MappedSchema):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.schemas.PersistentState
      params:
        schema:
          annotation:
            - NotNull
          type: net.corda.core.schemas.MappedSchema
    getParticipants():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.identity.AbstractParty>
    supportedSchemas():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Iterable<net.corda.core.schemas.MappedSchema>
net.corda.core.schemas.StatePersistable:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods: {}
net.corda.core.serialization.CheckpointCustomSerializer:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    fromProxy(PROXY):
      annotations: []
      default: false
      type: public abstract
      returnType: OBJ
      params:
        proxy:
          annotation: []
          type: PROXY
    toProxy(OBJ):
      annotations: []
      default: false
      type: public abstract
      returnType: PROXY
      params:
        obj:
          annotation: []
          type: OBJ
net.corda.core.serialization.ClassWhitelist:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    hasListed(Class<?>):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        type:
          annotation:
            - NotNull
          type: Class<?>
net.corda.core.serialization.ConstructorForDeserialization:
  annotations: []
  type: public @interface
  interface: false
  methods: {}
net.corda.core.serialization.ContextPropertyKeys:
  annotations: []
  type: public final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.serialization.ContextPropertyKeys>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.serialization.ContextPropertyKeys
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.serialization.ContextPropertyKeys[]"
net.corda.core.serialization.CordaSerializable:
  annotations: []
  type: public @interface
  interface: false
  methods: {}
net.corda.core.serialization.CordaSerializationTransformEnumDefault:
  annotations: []
  type: public @interface
  interface: false
  methods:
    new():
      annotations: []
      default: false
      type: public abstract
      returnType: String
    old():
      annotations: []
      default: false
      type: public abstract
      returnType: String
net.corda.core.serialization.CordaSerializationTransformEnumDefaults:
  annotations: []
  type: public @interface
  interface: false
  methods:
    value():
      annotations: []
      default: false
      type: public abstract
      returnType: "net.corda.core.serialization.CordaSerializationTransformEnumDefault[]"
net.corda.core.serialization.CordaSerializationTransformRename:
  annotations: []
  type: public @interface
  interface: false
  methods:
    from():
      annotations: []
      default: false
      type: public abstract
      returnType: String
    to():
      annotations: []
      default: false
      type: public abstract
      returnType: String
net.corda.core.serialization.CordaSerializationTransformRenames:
  annotations: []
  type: public @interface
  interface: false
  methods:
    value():
      annotations: []
      default: false
      type: public abstract
      returnType: "net.corda.core.serialization.CordaSerializationTransformRename[]"
net.corda.core.serialization.CustomSerializationScheme:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    deserialize(net.corda.core.utilities.ByteSequence, Class<T>, net.corda.core.serialization.SerializationSchemeContext):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: T
      params:
        bytes:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationSchemeContext
    getSchemeId():
      annotations: []
      default: false
      type: public abstract
      returnType: int
    serialize(T, net.corda.core.serialization.SerializationSchemeContext):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.utilities.ByteSequence
      params:
        obj:
          annotation:
            - NotNull
          type: T
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationSchemeContext
net.corda.core.serialization.DeprecatedConstructorForDeserialization:
  annotations: []
  type: public @interface
  interface: false
  methods:
    version():
      annotations: []
      default: false
      type: public abstract
      returnType: int
net.corda.core.serialization.EncodingWhitelist:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    acceptEncoding(net.corda.core.serialization.SerializationEncoding):
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
      params:
        encoding:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationEncoding
net.corda.core.serialization.MissingAttachmentsException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.CordaThrowable
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getIds():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.serialization.MissingAttachmentsRuntimeException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.CordaThrowable
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getIds():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.serialization.ObjectWithCompatibleContext:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializationContext
    copy(T, net.corda.core.serialization.SerializationContext):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.ObjectWithCompatibleContext<T>
      params:
        obj:
          annotation:
            - NotNull
          type: T
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationContext
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getContext():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializationContext
    getObj():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.serialization.SerializableCalculatedProperty:
  annotations: []
  type: public @interface
  interface: false
  methods: {}
net.corda.core.serialization.SerializationAPIKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    deserialize(byte[], net.corda.core.serialization.SerializationFactory, net.corda.core.serialization.SerializationContext):
      annotations: []
      default: false
      type: public static final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: net.corda.core.serialization.SerializationContext
    ? deserialize(java.sql.Blob, net.corda.core.serialization.SerializationFactory,
      net.corda.core.serialization.SerializationContext)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: net.corda.core.serialization.SerializationContext
    ? deserialize(net.corda.core.serialization.SerializedBytes<T>, net.corda.core.serialization.SerializationFactory,
      net.corda.core.serialization.SerializationContext)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: net.corda.core.serialization.SerializationContext
    ? deserialize(net.corda.core.utilities.ByteSequence, net.corda.core.serialization.SerializationFactory,
      net.corda.core.serialization.SerializationContext)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: net.corda.core.serialization.SerializationContext
    ? deserializeWithCompatibleContext(net.corda.core.utilities.ByteSequence, net.corda.core.serialization.SerializationFactory,
      net.corda.core.serialization.SerializationContext)
    : annotations: []
      default: false
      type: public static final synthetic
      returnType: net.corda.core.serialization.ObjectWithCompatibleContext<T>
      params:
        "null":
          annotation: []
          type: net.corda.core.serialization.SerializationContext
    serialize(T, net.corda.core.serialization.SerializationFactory, net.corda.core.serialization.SerializationContext):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.serialization.SerializedBytes<T>
      params:
        $this$serialize:
          annotation:
            - NotNull
          type: T
        serializationFactory:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationFactory
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationContext
    withWhitelist(net.corda.core.serialization.SerializationContext, java.util.List<? extends Class<?>>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.serialization.SerializationContext
      params:
        $this$withWhitelist:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationContext
        classes:
          annotation:
            - NotNull
          type: java.util.List<? extends Class<?>>
  fields:
    DESERIALIZATION_CACHE_PROPERTY:
      annotation:
        - NotNull
      type: public static final String
      initialised value: DESERIALIZATION_CACHE
    AMQP_ENVELOPE_CACHE_PROPERTY:
      annotation:
        - NotNull
      type: public static final String
      initialised value: AMQP_ENVELOPE_CACHE
    AMQP_ENVELOPE_CACHE_INITIAL_CAPACITY:
      annotation: []
      type: public static final int
      initialised value: 256
net.corda.core.serialization.SerializationContext:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getCarpenterDisabled():
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
    getCustomSerializers():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "java.util.Set<net.corda.core.serialization.SerializationCustomSerializer<?,\
        \ ?>>"
    getDeserializationClassLoader():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: ClassLoader
    getEncoding():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationEncoding
    getEncodingWhitelist():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.EncodingWhitelist
    getLenientCarpenterEnabled():
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
    getObjectReferencesEnabled():
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
    getPreferredSerializationVersion():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.utilities.ByteSequence
    getPreventDataLoss():
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
    getProperties():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "java.util.Map<Object, Object>"
    getUseCase():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext$UseCase
    getWhitelist():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.ClassWhitelist
    withAttachmentsClassLoader(java.util.List<? extends net.corda.core.crypto.SecureHash>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
      params:
        attachmentHashes:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.crypto.SecureHash>
    withClassLoader(ClassLoader):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
      params:
        classLoader:
          annotation:
            - NotNull
          type: ClassLoader
    withCustomSerializers(java.util.Set<? extends net.corda.core.serialization.SerializationCustomSerializer<?, ?>>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
      params:
        serializers:
          annotation:
            - NotNull
          type: "java.util.Set<? extends net.corda.core.serialization.SerializationCustomSerializer<?,\
            \ ?>>"
    withEncoding(net.corda.core.serialization.SerializationEncoding):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
      params:
        encoding:
          annotation:
            - Nullable
          type: net.corda.core.serialization.SerializationEncoding
    withEncodingWhitelist(net.corda.core.serialization.EncodingWhitelist):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
      params:
        encodingWhitelist:
          annotation:
            - NotNull
          type: net.corda.core.serialization.EncodingWhitelist
    withLenientCarpenter():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
    withPreferredSerializationVersion(net.corda.core.utilities.ByteSequence):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
      params:
        magic:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
    withPreventDataLoss():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
    withProperties(java.util.Map<Object, ?>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
      params:
        extraProperties:
          annotation:
            - NotNull
          type: "java.util.Map<Object, ?>"
    withProperty(Object, Object):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
      params:
        property:
          annotation:
            - NotNull
          type: Object
        value:
          annotation:
            - NotNull
          type: Object
    withWhitelisted(Class<?>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<?>
    withoutCarpenter():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
    withoutReferences():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationContext
net.corda.core.serialization.SerializationContext$UseCase:
  annotations: []
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.serialization.SerializationContext$UseCase>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.serialization.SerializationContext$UseCase
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.serialization.SerializationContext$UseCase[]"
net.corda.core.serialization.SerializationCustomSerializer:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    fromProxy(PROXY):
      annotations: []
      default: false
      type: public abstract
      returnType: OBJ
      params:
        proxy:
          annotation: []
          type: PROXY
    toProxy(OBJ):
      annotations: []
      default: false
      type: public abstract
      returnType: PROXY
      params:
        obj:
          annotation: []
          type: OBJ
net.corda.core.serialization.SerializationDefaults:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getP2P_CONTEXT():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializationContext
    getRPC_CLIENT_CONTEXT():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializationContext
    getRPC_SERVER_CONTEXT():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializationContext
    getSERIALIZATION_FACTORY():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializationFactory
    getSTORAGE_CONTEXT():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializationContext
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.serialization.SerializationDefaults
net.corda.core.serialization.SerializationEncoding:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods: {}
net.corda.core.serialization.SerializationFactory:
  annotations: []
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods:
    asCurrent(kotlin.jvm.functions.Function1<? super net.corda.core.serialization.SerializationFactory, ? extends T>):
      annotations: []
      default: false
      type: public final
      returnType: T
      params:
        block:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super net.corda.core.serialization.SerializationFactory,\
            \ ? extends T>"
    deserialize(net.corda.core.utilities.ByteSequence, Class<T>, net.corda.core.serialization.SerializationContext):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: T
      params:
        byteSequence:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationContext
    ? deserializeWithCompatibleContext(net.corda.core.utilities.ByteSequence, Class<T>,
      net.corda.core.serialization.SerializationContext)
    : annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.ObjectWithCompatibleContext<T>
      params:
        byteSequence:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationContext
    getCurrentContext():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializationContext
    getDefaultContext():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializationContext
    serialize(T, net.corda.core.serialization.SerializationContext):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializedBytes<T>
      params:
        obj:
          annotation:
            - NotNull
          type: T
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationContext
    withCurrentContext(net.corda.core.serialization.SerializationContext, kotlin.jvm.functions.Function0<? extends T>):
      annotations: []
      default: false
      type: public final
      returnType: T
      params:
        context:
          annotation:
            - Nullable
          type: net.corda.core.serialization.SerializationContext
        block:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<? extends T>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.serialization.SerializationFactory$Companion
net.corda.core.serialization.SerializationFactory$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    getCurrentFactory():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializationFactory
    getDefaultFactory():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializationFactory
net.corda.core.serialization.SerializationSchemeContext:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getDeserializationClassLoader():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: ClassLoader
    getProperties():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "java.util.Map<Object, Object>"
    getWhitelist():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.ClassWhitelist
net.corda.core.serialization.SerializationToken:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    fromToken(net.corda.core.serialization.SerializeAsTokenContext):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: Object
      params:
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializeAsTokenContext
net.corda.core.serialization.SerializationWhitelist:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getWhitelist():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<Class<?>>
net.corda.core.serialization.SerializeAsToken:
  annotations:
    - CordaSerializable
  type: public interface
  extends: []
  interface: true
  methods:
    toToken(net.corda.core.serialization.SerializeAsTokenContext):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializationToken
      params:
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializeAsTokenContext
net.corda.core.serialization.SerializeAsTokenContext:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getServiceHub():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.node.ServiceHub
    getSingleton(String):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.serialization.SerializeAsToken
      params:
        className:
          annotation:
            - NotNull
          type: String
    putSingleton(net.corda.core.serialization.SerializeAsToken):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        toBeTokenized:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializeAsToken
net.corda.core.serialization.SerializedBytes:
  annotations:
    - CordaSerializable
  type: public final class
  extends: java.lang.Comparable<net.corda.core.utilities.ByteSequence>
  implements: []
  interface: false
  methods:
    compareTo(net.corda.core.utilities.ByteSequence):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
    copy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
    copyBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    from(T):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.serialization.SerializedBytes<T>
      params:
        obj:
          annotation:
            - NotNull
          type: T
    from(T, net.corda.core.serialization.SerializationFactory):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.serialization.SerializedBytes<T>
      params:
        obj:
          annotation:
            - NotNull
          type: T
        serializationFactory:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationFactory
    from(T, net.corda.core.serialization.SerializationFactory, net.corda.core.serialization.SerializationContext):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.serialization.SerializedBytes<T>
      params:
        obj:
          annotation:
            - NotNull
          type: T
        serializationFactory:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationFactory
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationContext
    getBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    getHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getOffset():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[], int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
    of(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    open():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayInputStream
    putTo(java.nio.ByteBuffer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        buffer:
          annotation:
            - NotNull
          type: java.nio.ByteBuffer
    slice(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        start:
          annotation: []
          type: int
        end:
          annotation: []
          type: int
    subSequence(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    take(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        "n":
          annotation: []
          type: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    writeTo(java.io.OutputStream):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        output:
          annotation:
            - NotNull
          type: java.io.OutputStream
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.serialization.SerializedBytes$Companion
net.corda.core.serialization.SerializedBytes$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    from(T):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializedBytes<T>
      params:
        obj:
          annotation:
            - NotNull
          type: T
    from(T, net.corda.core.serialization.SerializationFactory):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializedBytes<T>
      params:
        obj:
          annotation:
            - NotNull
          type: T
        serializationFactory:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationFactory
    from(T, net.corda.core.serialization.SerializationFactory, net.corda.core.serialization.SerializationContext):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializedBytes<T>
      params:
        obj:
          annotation:
            - NotNull
          type: T
        serializationFactory:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationFactory
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializationContext
net.corda.core.serialization.SingletonSerializationToken:
  annotations: []
  type: public final class
  extends: null
  implements:
    - net.corda.core.serialization.SerializationToken
  interface: false
  methods:
    fromToken(net.corda.core.serialization.SerializeAsTokenContext):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.serialization.SerializeAsToken
      params:
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializeAsTokenContext
    registerWithContext(net.corda.core.serialization.SerializeAsTokenContext, net.corda.core.serialization.SerializeAsToken):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SingletonSerializationToken
      params:
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializeAsTokenContext
        toBeTokenized:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializeAsToken
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.serialization.SingletonSerializationToken$Companion
net.corda.core.serialization.SingletonSerializationToken$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    singletonSerializationToken(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SingletonSerializationToken
      params:
        toBeTokenized:
          annotation:
            - NotNull
          type: Class<T>
net.corda.core.serialization.SingletonSerializeAsToken:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements:
    - net.corda.core.serialization.SerializeAsToken
  interface: false
  methods:
    toToken(net.corda.core.serialization.SerializeAsTokenContext):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.serialization.SingletonSerializationToken
      params:
        context:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializeAsTokenContext
net.corda.core.transactions.BaseTransaction:
  annotations: []
  type: public abstract class
  extends: null
  implements:
    - net.corda.core.contracts.NamedByHash
  interface: false
  methods:
    checkBaseInvariants():
      annotations: []
      default: false
      type: protected
      returnType: void
    filterOutRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    getId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<?>
    getNotary():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.Party
    getOutput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getOutputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<?>
    outRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    outRef(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    outRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    outRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    outputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.transactions.ComponentGroup:
  annotations:
    - CordaSerializable
  type: public class
  extends: null
  implements: []
  interface: false
  methods:
    getComponents():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.OpaqueBytes>
    getGroupIndex():
      annotations: []
      default: false
      type: public
      returnType: int
net.corda.core.transactions.ComponentVisibilityException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.CordaThrowable
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getReason():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.transactions.ContractUpgradeFilteredTransaction:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.contracts.NamedByHash
  implements: []
  interface: false
  methods:
    checkBaseInvariants():
      annotations: []
      default: false
      type: protected
      returnType: void
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<Integer, net.corda.core.transactions.ContractUpgradeFilteredTransaction$FilteredComponent>"
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<Integer, net.corda.core.crypto.SecureHash>"
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    ? copy(java.util.Map<Integer, net.corda.core.transactions.ContractUpgradeFilteredTransaction$FilteredComponent>,
      java.util.Map<Integer, ? extends net.corda.core.crypto.SecureHash>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.ContractUpgradeFilteredTransaction
      params:
        visibleComponents:
          annotation:
            - NotNull
          type: "java.util.Map<Integer, net.corda.core.transactions.ContractUpgradeFilteredTransaction$FilteredComponent>"
        hiddenComponents:
          annotation:
            - NotNull
          type: "java.util.Map<Integer, ? extends net.corda.core.crypto.SecureHash>"
    ? copy(java.util.Map<Integer, net.corda.core.transactions.ContractUpgradeFilteredTransaction$FilteredComponent>,
      java.util.Map<Integer, ? extends net.corda.core.crypto.SecureHash>, net.corda.core.crypto.DigestService)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.ContractUpgradeFilteredTransaction
      params:
        visibleComponents:
          annotation:
            - NotNull
          type: "java.util.Map<Integer, net.corda.core.transactions.ContractUpgradeFilteredTransaction$FilteredComponent>"
        hiddenComponents:
          annotation:
            - NotNull
          type: "java.util.Map<Integer, ? extends net.corda.core.crypto.SecureHash>"
        digestService:
          annotation:
            - NotNull
          type: net.corda.core.crypto.DigestService
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    filterOutRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    getDigestService():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    getHiddenComponents():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<Integer, net.corda.core.crypto.SecureHash>"
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getNetworkParametersHash():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getNotary():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.identity.Party
    getOutput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getOutputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getVisibleComponents():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.Map<Integer, net.corda.core.transactions.ContractUpgradeFilteredTransaction$FilteredComponent>"
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    outRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    outRef(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    outRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    outRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    outputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.transactions.ContractUpgradeFilteredTransaction$FilteredComponent:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    getComponent():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.OpaqueBytes
    getNonce():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
net.corda.core.transactions.ContractUpgradeLedgerTransaction:
  annotations: []
  type: public final class
  extends: net.corda.core.contracts.NamedByHash
  implements:
    - net.corda.core.transactions.TransactionWithSignatures
  interface: false
  methods:
    checkBaseInvariants():
      annotations: []
      default: false
      type: protected
      returnType: void
    checkNotaryWhitelisted():
      annotations: []
      default: false
      type: protected final
      returnType: void
    checkSignaturesAreValid():
      annotations: []
      default: true
      type: public
      returnType: void
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Attachment
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Attachment
    component6():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component7():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PrivacySalt
    component8():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    component9():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.node.NetworkParameters
    ? copy(java.util.List<? extends net.corda.core.contracts.StateAndRef<? extends
      net.corda.core.contracts.ContractState>>, net.corda.core.identity.Party, net.corda.core.contracts.Attachment,
      String, net.corda.core.contracts.Attachment, net.corda.core.crypto.SecureHash,
      net.corda.core.contracts.PrivacySalt, java.util.List<net.corda.core.crypto.TransactionSignature>,
      net.corda.core.node.NetworkParameters)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.ContractUpgradeLedgerTransaction
      params:
        inputs:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.contracts.StateAndRef<? extends
            net.corda.core.contracts.ContractState>>
        notary:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        legacyContractAttachment:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Attachment
        upgradedContractClassName:
          annotation:
            - NotNull
          type: String
        upgradedContractAttachment:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Attachment
        id:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        privacySalt:
          annotation:
            - NotNull
          type: net.corda.core.contracts.PrivacySalt
        sigs:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.crypto.TransactionSignature>
        networkParameters:
          annotation:
            - NotNull
          type: net.corda.core.node.NetworkParameters
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    filterOutRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
    getKeyDescriptions(java.util.Set<? extends java.security.PublicKey>):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<String>
      params:
        keys:
          annotation:
            - NotNull
          type: java.util.Set<? extends java.security.PublicKey>
    getLegacyContractAttachment():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Attachment
    getMissingSigners():
      annotations:
        - NotNull
      default: true
      type: public
      returnType: java.util.Set<java.security.PublicKey>
    getNetworkParameters():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.node.NetworkParameters
    getNotary():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.identity.Party
    getOutput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getOutputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getPrivacySalt():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PrivacySalt
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
    getRequiredSigningKeys():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<java.security.PublicKey>
    getSigs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    getUpgradedContractAttachment():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Attachment
    getUpgradedContractClassName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    outRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    outRef(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    outRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    outRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    outputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    verifyRequiredSignatures():
      annotations: []
      default: true
      type: public
      returnType: void
    verifySignaturesExcept(java.security.PublicKey[]):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        allowedToBeMissing:
          annotation:
            - NotNull
          type: "java.security.PublicKey[]"
    verifySignaturesExcept(java.util.Collection<? extends java.security.PublicKey>):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        allowedToBeMissing:
          annotation:
            - NotNull
          type: java.util.Collection<? extends java.security.PublicKey>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.transactions.ContractUpgradeLedgerTransaction$Companion
net.corda.core.transactions.ContractUpgradeLedgerTransaction$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.transactions.ContractUpgradeWireTransaction:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.contracts.NamedByHash
  implements: []
  interface: false
  methods:
    buildFilteredTransaction():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.ContractUpgradeFilteredTransaction
    checkBaseInvariants():
      annotations: []
      default: false
      type: protected
      returnType: void
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.OpaqueBytes>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PrivacySalt
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    copy(java.util.List<? extends net.corda.core.utilities.OpaqueBytes>, net.corda.core.contracts.PrivacySalt):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.ContractUpgradeWireTransaction
      params:
        serializedComponents:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.utilities.OpaqueBytes>
        privacySalt:
          annotation:
            - NotNull
          type: net.corda.core.contracts.PrivacySalt
    ? copy(java.util.List<? extends net.corda.core.utilities.OpaqueBytes>, net.corda.core.contracts.PrivacySalt,
      net.corda.core.crypto.DigestService)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.ContractUpgradeWireTransaction
      params:
        serializedComponents:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.utilities.OpaqueBytes>
        privacySalt:
          annotation:
            - NotNull
          type: net.corda.core.contracts.PrivacySalt
        digestService:
          annotation:
            - NotNull
          type: net.corda.core.crypto.DigestService
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    filterOutRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    getDigestService():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getLegacyContractAttachmentId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getNetworkParametersHash():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getNotary():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.identity.Party
    getOutput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getOutputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getPrivacySalt():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PrivacySalt
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getSerializedComponents():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.OpaqueBytes>
    getUpgradedContractAttachmentId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getUpgradedContractClassName():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    outRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    outRef(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    outRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    outRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    outputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    resolve(net.corda.core.node.ServicesForResolution, java.util.List<net.corda.core.crypto.TransactionSignature>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.ContractUpgradeLedgerTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServicesForResolution
        sigs:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.crypto.TransactionSignature>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.transactions.ContractUpgradeWireTransaction$Companion
net.corda.core.transactions.ContractUpgradeWireTransaction$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.transactions.ContractUpgradeWireTransaction$Component:
  annotations: []
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.transactions.ContractUpgradeWireTransaction$Component>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.transactions.ContractUpgradeWireTransaction$Component
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.transactions.ContractUpgradeWireTransaction$Component[]"
net.corda.core.transactions.CoreTransaction:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: net.corda.core.contracts.NamedByHash
  implements: []
  interface: false
  methods:
    checkBaseInvariants():
      annotations: []
      default: false
      type: protected
      returnType: void
    filterOutRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    getId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getNetworkParametersHash():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
    getNotary():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.Party
    getOutput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getOutputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    outRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    outRef(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    outRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    outRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    outputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.transactions.FilteredComponentGroup:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.transactions.ComponentGroup
  implements: []
  interface: false
  methods:
    component1():
      annotations: []
      default: false
      type: public final
      returnType: int
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.OpaqueBytes>
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree
    ? copy(int, java.util.List<? extends net.corda.core.utilities.OpaqueBytes>, java.util.List<?
      extends net.corda.core.crypto.SecureHash>, net.corda.core.crypto.PartialMerkleTree)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.FilteredComponentGroup
      params:
        groupIndex:
          annotation: []
          type: int
        components:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.utilities.OpaqueBytes>
        nonces:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.crypto.SecureHash>
        partialMerkleTree:
          annotation:
            - NotNull
          type: net.corda.core.crypto.PartialMerkleTree
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getComponents():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.utilities.OpaqueBytes>
    getGroupIndex():
      annotations: []
      default: false
      type: public
      returnType: int
    getNonces():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    getPartialMerkleTree():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.PartialMerkleTree
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.transactions.FilteredTransaction:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.contracts.NamedByHash
  implements: []
  interface: false
  methods:
    buildFilteredTransaction(net.corda.core.transactions.WireTransaction, java.util.function.Predicate<Object>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.transactions.FilteredTransaction
      params:
        wtx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.WireTransaction
        filtering:
          annotation:
            - NotNull
          type: java.util.function.Predicate<Object>
    checkAllComponentsVisible(net.corda.core.contracts.ComponentGroupEnum):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        componentGroupEnum:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ComponentGroupEnum
    checkBaseInvariants():
      annotations: []
      default: false
      type: protected
      returnType: void
    checkCommandVisibility(java.security.PublicKey):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
    checkWithFun(kotlin.jvm.functions.Function1<Object, Boolean>):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        checkingFun:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<Object, Boolean>"
    filterOutRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    getAttachments():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    getAvailableComponentGroups():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.util.List<Object>>
    getCommands():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.Command<?>>
    getComponentGroups():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.transactions.ComponentGroup>
    getDigestService():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    getFilteredComponentGroups():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.transactions.FilteredComponentGroup>
    getGroupHashes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getLegacyAttachments():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    getNetworkParametersHash():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getNotary():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.identity.Party
    getOutput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getOutputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getTimeWindow():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.contracts.TimeWindow
    outRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    outRef(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    outRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    outRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    outputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    verify():
      annotations: []
      default: false
      type: public final
      returnType: void
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.transactions.FilteredTransaction$Companion
net.corda.core.transactions.FilteredTransaction$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    buildFilteredTransaction(net.corda.core.transactions.WireTransaction, java.util.function.Predicate<Object>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.FilteredTransaction
      params:
        wtx:
          annotation:
            - NotNull
          type: net.corda.core.transactions.WireTransaction
        filtering:
          annotation:
            - NotNull
          type: java.util.function.Predicate<Object>
net.corda.core.transactions.FilteredTransactionVerificationException:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.CordaThrowable
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getReason():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.transactions.FullTransaction:
  annotations: []
  type: public abstract class
  extends: net.corda.core.contracts.NamedByHash
  implements: []
  interface: false
  methods:
    checkBaseInvariants():
      annotations: []
      default: false
      type: protected
      returnType: void
    checkNotaryWhitelisted():
      annotations: []
      default: false
      type: protected final
      returnType: void
    filterOutRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    getId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
    getNetworkParameters():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.node.NetworkParameters
    getNotary():
      annotations:
        - Nullable
      default: false
      type: public abstract
      returnType: net.corda.core.identity.Party
    getOutput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getOutputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
    outRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    outRef(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    outRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    outRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    outputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.transactions.LedgerTransaction:
  annotations: []
  type: public final class
  extends: net.corda.core.contracts.NamedByHash
  implements: []
  interface: false
  methods:
    checkBaseInvariants():
      annotations: []
      default: false
      type: protected
      returnType: void
    checkNotaryWhitelisted():
      annotations: []
      default: false
      type: protected final
      returnType: void
    commandsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.Command<T>>
    commandsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.Command<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
    component10():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.CommandWithParties<net.corda.core.contracts.CommandData>>
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.Attachment>
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component6():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    component7():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.contracts.TimeWindow
    component8():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PrivacySalt
    component9():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.NetworkParameters
    ? copy(java.util.List<? extends net.corda.core.contracts.StateAndRef<? extends
      net.corda.core.contracts.ContractState>>, java.util.List<? extends net.corda.core.contracts.TransactionState<?
      extends net.corda.core.contracts.ContractState>>, java.util.List<? extends net.corda.core.contracts.CommandWithParties<?
      extends net.corda.core.contracts.CommandData>>, java.util.List<? extends net.corda.core.contracts.Attachment>,
      net.corda.core.crypto.SecureHash, net.corda.core.identity.Party, net.corda.core.contracts.TimeWindow,
      net.corda.core.contracts.PrivacySalt)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.LedgerTransaction
      params:
        inputs:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.contracts.StateAndRef<? extends
            net.corda.core.contracts.ContractState>>
        outputs:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.contracts.TransactionState<?
            extends net.corda.core.contracts.ContractState>>
        commands:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.contracts.CommandWithParties<?
            extends net.corda.core.contracts.CommandData>>
        attachments:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.contracts.Attachment>
        id:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        notary:
          annotation:
            - Nullable
          type: net.corda.core.identity.Party
        timeWindow:
          annotation:
            - Nullable
          type: net.corda.core.contracts.TimeWindow
        privacySalt:
          annotation:
            - NotNull
          type: net.corda.core.contracts.PrivacySalt
    ? copy(java.util.List<? extends net.corda.core.contracts.StateAndRef<? extends
      net.corda.core.contracts.ContractState>>, java.util.List<? extends net.corda.core.contracts.TransactionState<?
      extends net.corda.core.contracts.ContractState>>, java.util.List<? extends net.corda.core.contracts.CommandWithParties<?
      extends net.corda.core.contracts.CommandData>>, java.util.List<? extends net.corda.core.contracts.Attachment>,
      net.corda.core.crypto.SecureHash, net.corda.core.identity.Party, net.corda.core.contracts.TimeWindow,
      net.corda.core.contracts.PrivacySalt, net.corda.core.node.NetworkParameters)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.LedgerTransaction
      params:
        inputs:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.contracts.StateAndRef<? extends
            net.corda.core.contracts.ContractState>>
        outputs:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.contracts.TransactionState<?
            extends net.corda.core.contracts.ContractState>>
        commands:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.contracts.CommandWithParties<?
            extends net.corda.core.contracts.CommandData>>
        attachments:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.contracts.Attachment>
        id:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        notary:
          annotation:
            - Nullable
          type: net.corda.core.identity.Party
        timeWindow:
          annotation:
            - Nullable
          type: net.corda.core.contracts.TimeWindow
        privacySalt:
          annotation:
            - NotNull
          type: net.corda.core.contracts.PrivacySalt
        networkParameters:
          annotation:
            - Nullable
          type: net.corda.core.node.NetworkParameters
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    filterCommands(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.Command<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterCommands(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.Command<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterInRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterInRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterInputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterInputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterReferenceInputRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterReferenceInputRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterReferenceInputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterReferenceInputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findCommand(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Command<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findCommand(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.Command<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findInRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findInRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findInput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findInput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findReference(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findReference(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findReferenceInputRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findReferenceInputRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    getAttachment(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Attachment
      params:
        index:
          annotation: []
          type: int
    getAttachment(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Attachment
      params:
        id:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    getAttachments():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.Attachment>
    getCommand(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.Command<T>
      params:
        index:
          annotation: []
          type: int
    getCommands():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.CommandWithParties<net.corda.core.contracts.CommandData>>
    getDigestService():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getInput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getInputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
    getNetworkParameters():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.node.NetworkParameters
    getNotary():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.identity.Party
    getOutput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getOutputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getPrivacySalt():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PrivacySalt
    getReferenceInput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getReferenceStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
    getRotatedKeys():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.RotatedKeys
    getTimeWindow():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.contracts.TimeWindow
    groupStates(Class<T>, kotlin.jvm.functions.Function1<? super T, ? extends K>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.List<net.corda.core.transactions.LedgerTransaction$InOutGroup<T,\
        \ K>>"
      params:
        ofType:
          annotation:
            - NotNull
          type: Class<T>
        selector:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super T, ? extends K>"
    groupStates(kotlin.jvm.functions.Function1<? super T, ? extends K>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: "java.util.List<net.corda.core.transactions.LedgerTransaction$InOutGroup<T,\
        \ K>>"
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, ? extends K>"
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    inRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    inRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    inRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    inputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    inputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    outRef(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    outRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    outRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    outputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    referenceInputRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    referenceInputRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    referenceInputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    referenceInputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    verify():
      annotations: []
      default: false
      type: public final
      returnType: void
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.transactions.LedgerTransaction$Companion
net.corda.core.transactions.LedgerTransaction$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.transactions.LedgerTransaction$InOutGroup:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: K
    copy(java.util.List<? extends T>, java.util.List<? extends T>, K):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.transactions.LedgerTransaction$InOutGroup<T, K>"
      params:
        inputs:
          annotation:
            - NotNull
          type: java.util.List<? extends T>
        outputs:
          annotation:
            - NotNull
          type: java.util.List<? extends T>
        groupingKey:
          annotation:
            - NotNull
          type: K
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getGroupingKey():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: K
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.transactions.LedgerTransactionKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.transactions.MissingContractAttachments:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.flows.IdentifiableException
  implements: []
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCause():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Throwable
    getErrorId():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: Long
    getMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalErrorId():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: Long
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalErrorId(Long):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: Long
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.transactions.NetworkParametersHash:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    copy(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.NetworkParametersHash
      params:
        hash:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getHash():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.transactions.NotaryChangeLedgerTransaction:
  annotations: []
  type: public final class
  extends: net.corda.core.contracts.NamedByHash
  implements:
    - net.corda.core.transactions.TransactionWithSignatures
  interface: false
  methods:
    checkBaseInvariants():
      annotations: []
      default: false
      type: protected
      returnType: void
    checkNotaryWhitelisted():
      annotations: []
      default: false
      type: protected final
      returnType: void
    checkSignaturesAreValid():
      annotations: []
      default: true
      type: public
      returnType: void
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    component3():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    component4():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    component5():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    component6():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.node.NetworkParameters
    ? copy(java.util.List<? extends net.corda.core.contracts.StateAndRef<? extends
      net.corda.core.contracts.ContractState>>, net.corda.core.identity.Party, net.corda.core.identity.Party,
      net.corda.core.crypto.SecureHash, java.util.List<net.corda.core.crypto.TransactionSignature>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.NotaryChangeLedgerTransaction
      params:
        inputs:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.contracts.StateAndRef<? extends
            net.corda.core.contracts.ContractState>>
        notary:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        newNotary:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        id:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
        sigs:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.crypto.TransactionSignature>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    filterOutRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
    getKeyDescriptions(java.util.Set<? extends java.security.PublicKey>):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<String>
      params:
        keys:
          annotation:
            - NotNull
          type: java.util.Set<? extends java.security.PublicKey>
    getMissingSigners():
      annotations:
        - NotNull
      default: true
      type: public
      returnType: java.util.Set<java.security.PublicKey>
    getNetworkParameters():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.node.NetworkParameters
    getNewNotary():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getNotary():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.identity.Party
    getOutput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getOutputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<net.corda.core.contracts.ContractState>>
    getRequiredSigningKeys():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<java.security.PublicKey>
    getSigs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    outRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    outRef(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    outRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    outRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    outputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    verifyRequiredSignatures():
      annotations: []
      default: true
      type: public
      returnType: void
    verifySignaturesExcept(java.security.PublicKey[]):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        allowedToBeMissing:
          annotation:
            - NotNull
          type: "java.security.PublicKey[]"
    verifySignaturesExcept(java.util.Collection<? extends java.security.PublicKey>):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        allowedToBeMissing:
          annotation:
            - NotNull
          type: java.util.Collection<? extends java.security.PublicKey>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.transactions.NotaryChangeLedgerTransaction$Companion
net.corda.core.transactions.NotaryChangeLedgerTransaction$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods: {}
net.corda.core.transactions.NotaryChangeWireTransaction:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.contracts.NamedByHash
  implements: []
  interface: false
  methods:
    checkBaseInvariants():
      annotations: []
      default: false
      type: protected
      returnType: void
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.OpaqueBytes>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    copy(java.util.List<? extends net.corda.core.utilities.OpaqueBytes>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.NotaryChangeWireTransaction
      params:
        serializedComponents:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.utilities.OpaqueBytes>
    copy(java.util.List<? extends net.corda.core.utilities.OpaqueBytes>, net.corda.core.crypto.DigestService):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.NotaryChangeWireTransaction
      params:
        serializedComponents:
          annotation:
            - NotNull
          type: java.util.List<? extends net.corda.core.utilities.OpaqueBytes>
        digestService:
          annotation:
            - NotNull
          type: net.corda.core.crypto.DigestService
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    filterOutRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    getDigestService():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getNetworkParametersHash():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getNewNotary():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getNotary():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.identity.Party
    getOutput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getOutputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getSerializedComponents():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.utilities.OpaqueBytes>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    outRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    outRef(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    outRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    outRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    outputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    resolve(net.corda.core.node.ServiceHub, java.util.List<net.corda.core.crypto.TransactionSignature>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.NotaryChangeLedgerTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
        sigs:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.crypto.TransactionSignature>
    resolve(net.corda.core.node.ServicesForResolution, java.util.List<net.corda.core.crypto.TransactionSignature>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.NotaryChangeLedgerTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServicesForResolution
        sigs:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.crypto.TransactionSignature>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.transactions.NotaryChangeWireTransaction$Component:
  annotations: []
  type: public static final class
  extends: java.lang.Enum
  implements: []
  interface: false
  methods:
    getEntries():
      annotations:
        - NotNull
      default: false
      type: public static
      returnType: kotlin.enums.EnumEntries<net.corda.core.transactions.NotaryChangeWireTransaction$Component>
    valueOf(String):
      annotations: []
      default: false
      type: public static
      returnType: net.corda.core.transactions.NotaryChangeWireTransaction$Component
      params:
        value:
          annotation: []
          type: String
    values():
      annotations: []
      default: false
      type: public static
      returnType: "net.corda.core.transactions.NotaryChangeWireTransaction$Component[]"
net.corda.core.transactions.ReferenceStateRef:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    copy(net.corda.core.contracts.StateRef):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.ReferenceStateRef
      params:
        stateRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateRef
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getStateRef():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateRef
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.transactions.SignedTransaction:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements:
    - net.corda.core.transactions.TransactionWithSignatures
  interface: false
  methods:
    buildFilteredTransaction(java.util.function.Predicate<Object>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.FilteredTransaction
      params:
        filtering:
          annotation:
            - NotNull
          type: java.util.function.Predicate<Object>
    checkSignaturesAreValid():
      annotations: []
      default: true
      type: public
      returnType: void
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializedBytes<net.corda.core.transactions.CoreTransaction>
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    ? copy(net.corda.core.serialization.SerializedBytes<net.corda.core.transactions.CoreTransaction>,
      java.util.List<net.corda.core.crypto.TransactionSignature>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        txBits:
          annotation:
            - NotNull
          type: net.corda.core.serialization.SerializedBytes<net.corda.core.transactions.CoreTransaction>
        sigs:
          annotation:
            - NotNull
          type: java.util.List<net.corda.core.crypto.TransactionSignature>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getCoreTransaction():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.CoreTransaction
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getKeyDescriptions(java.util.Set<? extends java.security.PublicKey>):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.ArrayList<String>
      params:
        keys:
          annotation:
            - NotNull
          type: java.util.Set<? extends java.security.PublicKey>
    getMissingSigners():
      annotations:
        - NotNull
      default: true
      type: public
      returnType: java.util.Set<java.security.PublicKey>
    getNetworkParametersHash():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.crypto.SecureHash
    getNotary():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getNotaryChangeTx():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.NotaryChangeWireTransaction
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getRequiredSigningKeys():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Set<java.security.PublicKey>
    getSigs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    getTx():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.WireTransaction
    getTxBits():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.serialization.SerializedBytes<net.corda.core.transactions.CoreTransaction>
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isNotaryChangeTransaction():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    plus(java.util.Collection<net.corda.core.crypto.TransactionSignature>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        sigList:
          annotation:
            - NotNull
          type: java.util.Collection<net.corda.core.crypto.TransactionSignature>
    plus(net.corda.core.crypto.TransactionSignature):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        sig:
          annotation:
            - NotNull
          type: net.corda.core.crypto.TransactionSignature
    resolveBaseTransaction(net.corda.core.node.ServicesForResolution):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.BaseTransaction
      params:
        servicesForResolution:
          annotation:
            - NotNull
          type: net.corda.core.node.ServicesForResolution
    resolveContractUpgradeTransaction(net.corda.core.node.ServicesForResolution):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.ContractUpgradeLedgerTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServicesForResolution
    resolveNotaryChangeTransaction(net.corda.core.node.ServiceHub):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.NotaryChangeLedgerTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
    resolveNotaryChangeTransaction(net.corda.core.node.ServicesForResolution):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.NotaryChangeLedgerTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServicesForResolution
    resolveTransactionWithSignatures(net.corda.core.node.ServicesForResolution):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionWithSignatures
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServicesForResolution
    toLedgerTransaction(net.corda.core.node.ServiceHub):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.LedgerTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
    toLedgerTransaction(net.corda.core.node.ServiceHub, boolean):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.LedgerTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
        checkSufficientSignatures:
          annotation: []
          type: boolean
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    verify(net.corda.core.node.ServiceHub):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
    verify(net.corda.core.node.ServiceHub, boolean):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
        checkSufficientSignatures:
          annotation: []
          type: boolean
    verifyRequiredSignatures():
      annotations: []
      default: true
      type: public
      returnType: void
    verifySignaturesExcept(java.security.PublicKey[]):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        allowedToBeMissing:
          annotation:
            - NotNull
          type: "java.security.PublicKey[]"
    verifySignaturesExcept(java.util.Collection<? extends java.security.PublicKey>):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        allowedToBeMissing:
          annotation:
            - NotNull
          type: java.util.Collection<? extends java.security.PublicKey>
    withAdditionalSignature(java.security.KeyPair, net.corda.core.crypto.SignatureMetadata):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        keyPair:
          annotation:
            - NotNull
          type: java.security.KeyPair
        signatureMetadata:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureMetadata
    withAdditionalSignature(net.corda.core.crypto.TransactionSignature):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        sig:
          annotation:
            - NotNull
          type: net.corda.core.crypto.TransactionSignature
    withAdditionalSignatures(Iterable<net.corda.core.crypto.TransactionSignature>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        sigList:
          annotation:
            - NotNull
          type: Iterable<net.corda.core.crypto.TransactionSignature>
net.corda.core.transactions.SignedTransaction$SignaturesMissingException:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: java.security.SignatureException
  implements:
    - net.corda.core.CordaThrowable
    - net.corda.core.contracts.NamedByHash
  interface: false
  methods:
    addSuppressed(Throwable[]):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        suppressed:
          annotation:
            - NotNull
          type: "Throwable[]"
    getDescriptions():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<String>
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getMissing():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<java.security.PublicKey>
    getOriginalExceptionClassName():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    getOriginalMessage():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: String
    setCause(Throwable):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        cause:
          annotation:
            - Nullable
          type: Throwable
    setMessage(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        message:
          annotation:
            - Nullable
          type: String
    setOriginalExceptionClassName(String):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: String
net.corda.core.transactions.TransactionBuilder:
  annotations: []
  type: public class
  extends: null
  implements: []
  interface: false
  methods:
    addAttachment(net.corda.core.crypto.SecureHash):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        attachmentId:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SecureHash
    addCommand(net.corda.core.contracts.Command<?>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        arg:
          annotation:
            - NotNull
          type: net.corda.core.contracts.Command<?>
    addCommand(net.corda.core.contracts.CommandData, java.security.PublicKey[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        data:
          annotation:
            - NotNull
          type: net.corda.core.contracts.CommandData
        keys:
          annotation:
            - NotNull
          type: "java.security.PublicKey[]"
    addCommand(net.corda.core.contracts.CommandData, java.util.List<? extends java.security.PublicKey>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        data:
          annotation:
            - NotNull
          type: net.corda.core.contracts.CommandData
        keys:
          annotation:
            - NotNull
          type: java.util.List<? extends java.security.PublicKey>
    addInputState(net.corda.core.contracts.StateAndRef<?>):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        stateAndRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.StateAndRef<?>
    addOutputState(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    addOutputState(net.corda.core.contracts.ContractState, String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
        contract:
          annotation:
            - NotNull
          type: String
    addOutputState(net.corda.core.contracts.ContractState, String, net.corda.core.contracts.AttachmentConstraint):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
        contract:
          annotation:
            - NotNull
          type: String
        constraint:
          annotation:
            - NotNull
          type: net.corda.core.contracts.AttachmentConstraint
    addOutputState(net.corda.core.contracts.ContractState, String, net.corda.core.identity.Party):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
        contract:
          annotation:
            - NotNull
          type: String
        notary:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    addOutputState(net.corda.core.contracts.ContractState, String, net.corda.core.identity.Party, Integer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
        contract:
          annotation:
            - NotNull
          type: String
        notary:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        encumbrance:
          annotation:
            - Nullable
          type: Integer
    ? addOutputState(net.corda.core.contracts.ContractState, String, net.corda.core.identity.Party,
      Integer, net.corda.core.contracts.AttachmentConstraint)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
        contract:
          annotation:
            - NotNull
          type: String
        notary:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
        encumbrance:
          annotation:
            - Nullable
          type: Integer
        constraint:
          annotation:
            - NotNull
          type: net.corda.core.contracts.AttachmentConstraint
    addOutputState(net.corda.core.contracts.ContractState, net.corda.core.contracts.AttachmentConstraint):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
        constraint:
          annotation:
            - NotNull
          type: net.corda.core.contracts.AttachmentConstraint
    addOutputState(net.corda.core.contracts.ContractState, net.corda.core.identity.Party):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
        notary:
          annotation:
            - NotNull
          type: net.corda.core.identity.Party
    addOutputState(net.corda.core.contracts.TransactionState<?>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.TransactionState<?>
    addReferenceState(net.corda.core.contracts.ReferencedStateAndRef<?>):
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        referencedStateAndRef:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ReferencedStateAndRef<?>
    attachments():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    commands():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.Command<?>>
    copy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
    getAttachments():
      annotations:
        - NotNull
      default: false
      type: protected final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    getCommands():
      annotations:
        - NotNull
      default: false
      type: protected final
      returnType: java.util.List<net.corda.core.contracts.Command<?>>
    getInputs():
      annotations:
        - NotNull
      default: false
      type: protected final
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getLockId():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.UUID
    getNotary():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.identity.Party
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: protected final
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getPrivacySalt():
      annotations:
        - NotNull
      default: false
      type: protected final
      returnType: net.corda.core.contracts.PrivacySalt
    getReferences():
      annotations:
        - NotNull
      default: false
      type: protected final
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getServiceHub():
      annotations:
        - Nullable
      default: false
      type: protected final
      returnType: net.corda.core.node.ServiceHub
    getWindow():
      annotations:
        - Nullable
      default: false
      type: protected final
      returnType: net.corda.core.contracts.TimeWindow
    inputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    outputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.TransactionState<?>>
    referenceStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    setLockId(java.util.UUID):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - NotNull
          type: java.util.UUID
    setNotary(net.corda.core.identity.Party):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: net.corda.core.identity.Party
    setPrivacySalt(net.corda.core.contracts.PrivacySalt):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        privacySalt:
          annotation:
            - NotNull
          type: net.corda.core.contracts.PrivacySalt
    setTimeWindow(java.time.Instant, java.time.Duration):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        time:
          annotation:
            - NotNull
          type: java.time.Instant
        timeTolerance:
          annotation:
            - NotNull
          type: java.time.Duration
    setTimeWindow(net.corda.core.contracts.TimeWindow):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        timeWindow:
          annotation:
            - NotNull
          type: net.corda.core.contracts.TimeWindow
    setWindow(net.corda.core.contracts.TimeWindow):
      annotations: []
      default: false
      type: protected final
      returnType: void
      params:
        <set-?>:
          annotation:
            - Nullable
          type: net.corda.core.contracts.TimeWindow
    toLedgerTransaction(net.corda.core.node.ServiceHub):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.LedgerTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
    ? toSignedTransaction(net.corda.core.node.services.KeyManagementService, java.security.PublicKey,
      net.corda.core.crypto.SignatureMetadata, net.corda.core.node.ServicesForResolution)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.SignedTransaction
      params:
        keyManagementService:
          annotation:
            - NotNull
          type: net.corda.core.node.services.KeyManagementService
        publicKey:
          annotation:
            - NotNull
          type: java.security.PublicKey
        signatureMetadata:
          annotation:
            - NotNull
          type: net.corda.core.crypto.SignatureMetadata
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServicesForResolution
    toWireTransaction(net.corda.core.node.ServicesForResolution):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.WireTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServicesForResolution
    toWireTransaction(net.corda.core.node.ServicesForResolution, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.WireTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServicesForResolution
        schemeId:
          annotation: []
          type: int
    toWireTransaction(net.corda.core.node.ServicesForResolution, int, java.util.Map<Object, ?>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.WireTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServicesForResolution
        schemeId:
          annotation: []
          type: int
        properties:
          annotation:
            - NotNull
          type: "java.util.Map<Object, ?>"
    verify(net.corda.core.node.ServiceHub):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServiceHub
    withItems(Object[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.TransactionBuilder
      params:
        items:
          annotation:
            - NotNull
          type: "Object[]"
net.corda.core.transactions.TransactionWithSignatures:
  annotations: []
  type: public interface
  extends:
    - net.corda.core.contracts.NamedByHash
  interface: true
  methods:
    checkSignaturesAreValid():
      annotations: []
      default: true
      type: public
      returnType: void
    getId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
    getKeyDescriptions(java.util.Set<? extends java.security.PublicKey>):
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<String>
      params:
        keys:
          annotation:
            - NotNull
          type: java.util.Set<? extends java.security.PublicKey>
    getMissingSigners():
      annotations:
        - NotNull
      default: true
      type: public
      returnType: java.util.Set<java.security.PublicKey>
    getRequiredSigningKeys():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.Set<java.security.PublicKey>
    getSigs():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: java.util.List<net.corda.core.crypto.TransactionSignature>
    verifyRequiredSignatures():
      annotations: []
      default: true
      type: public
      returnType: void
    verifySignaturesExcept(java.security.PublicKey[]):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        allowedToBeMissing:
          annotation:
            - NotNull
          type: "java.security.PublicKey[]"
    verifySignaturesExcept(java.util.Collection<? extends java.security.PublicKey>):
      annotations: []
      default: true
      type: public
      returnType: void
      params:
        allowedToBeMissing:
          annotation:
            - NotNull
          type: java.util.Collection<? extends java.security.PublicKey>
net.corda.core.transactions.TraversableTransaction:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: net.corda.core.contracts.NamedByHash
  implements: []
  interface: false
  methods:
    checkBaseInvariants():
      annotations: []
      default: false
      type: protected
      returnType: void
    filterOutRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    getAttachments():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    getAvailableComponentGroups():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.util.List<Object>>
    getCommands():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.Command<?>>
    getComponentGroups():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.transactions.ComponentGroup>
    getDigestService():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    getId():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: net.corda.core.crypto.SecureHash
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getLegacyAttachments():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    getNetworkParametersHash():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getNotary():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.identity.Party
    getOutput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getOutputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getTimeWindow():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.contracts.TimeWindow
    outRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    outRef(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    outRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    outRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    outputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.transactions.WireTransaction:
  annotations:
    - CordaSerializable
  type: public final class
  extends: net.corda.core.contracts.NamedByHash
  implements: []
  interface: false
  methods:
    buildFilteredTransaction(java.util.function.Predicate<Object>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.FilteredTransaction
      params:
        filtering:
          annotation:
            - NotNull
          type: java.util.function.Predicate<Object>
    checkBaseInvariants():
      annotations: []
      default: false
      type: protected
      returnType: void
    checkSignature(net.corda.core.crypto.TransactionSignature):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        sig:
          annotation:
            - NotNull
          type: net.corda.core.crypto.TransactionSignature
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    filterOutRefs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutRefs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    filterOutputs(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    filterOutputs(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutRef(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutRef(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    findOutput(Class<T>, java.util.function.Predicate<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: T
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
        predicate:
          annotation:
            - NotNull
          type: java.util.function.Predicate<T>
    findOutput(kotlin.jvm.functions.Function1<? super T, Boolean>):
      annotations: []
      default: false
      type: public final synthetic
      returnType: T
      params:
        "null":
          annotation: []
          type: "kotlin.jvm.functions.Function1<? super T, Boolean>"
    getAttachments():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    getAvailableComponentGroups():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<java.util.List<Object>>
    getCommands():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.Command<?>>
    getComponentGroups():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.transactions.ComponentGroup>
    getDigestService():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.DigestService
    getId():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getInputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getLegacyAttachments():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.crypto.SecureHash>
    getMerkleTree():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.crypto.MerkleTree
    getNetworkParametersHash():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.crypto.SecureHash
    getNotary():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.identity.Party
    getOutput(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.ContractState
      params:
        index:
          annotation: []
          type: int
    getOutputStates():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.ContractState>
    getOutputs():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.TransactionState<net.corda.core.contracts.ContractState>>
    getPrivacySalt():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.PrivacySalt
    getReferences():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.List<net.corda.core.contracts.StateRef>
    getRequiredSigningKeys():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.Set<java.security.PublicKey>
    getTimeWindow():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.contracts.TimeWindow
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    outRef(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        index:
          annotation: []
          type: int
    outRef(net.corda.core.contracts.ContractState):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.contracts.StateAndRef<T>
      params:
        state:
          annotation:
            - NotNull
          type: net.corda.core.contracts.ContractState
    outRefsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
    outRefsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<net.corda.core.contracts.StateAndRef<T>>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    outputsOfType():
      annotations: []
      default: false
      type: public final synthetic
      returnType: java.util.List<T>
    outputsOfType(Class<T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.List<T>
      params:
        clazz:
          annotation:
            - NotNull
          type: Class<T>
    ? toLedgerTransaction(kotlin.jvm.functions.Function1<? super java.security.PublicKey,
      net.corda.core.identity.Party>, kotlin.jvm.functions.Function1<? super net.corda.core.crypto.SecureHash,
      ? extends net.corda.core.contracts.Attachment>, kotlin.jvm.functions.Function1<?
      super net.corda.core.contracts.StateRef, ? extends net.corda.core.contracts.TransactionState<?>>,
      kotlin.jvm.functions.Function1<? super net.corda.core.contracts.TransactionState<?
      extends net.corda.core.contracts.ContractState>, ? extends net.corda.core.crypto.SecureHash>)
    : annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.LedgerTransaction
      params:
        resolveIdentity:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super java.security.PublicKey, net.corda.core.identity.Party>"
        resolveAttachment:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super net.corda.core.crypto.SecureHash,\
            \ ? extends net.corda.core.contracts.Attachment>"
        resolveStateRef:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super net.corda.core.contracts.StateRef,\
            \ ? extends net.corda.core.contracts.TransactionState<?>>"
        resolveContractAttachment:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super net.corda.core.contracts.TransactionState<?\
            \ extends net.corda.core.contracts.ContractState>, ? extends net.corda.core.crypto.SecureHash>"
    toLedgerTransaction(net.corda.core.node.ServicesForResolution):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.transactions.LedgerTransaction
      params:
        services:
          annotation:
            - NotNull
          type: net.corda.core.node.ServicesForResolution
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.utilities.ByteArrays:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    parseAsHex(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "byte[]"
      params:
        $this$parseAsHex:
          annotation:
            - NotNull
          type: String
    sequence(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        $this$sequence:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    toHexString(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$toHexString:
          annotation:
            - NotNull
          type: "byte[]"
net.corda.core.utilities.ByteSequence:
  annotations: []
  type: public abstract class
  extends: null
  implements:
    - java.lang.Comparable
  interface: false
  methods:
    compareTo(net.corda.core.utilities.ByteSequence):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
    copy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
    copyBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getBytes():
      annotations:
        - NotNull
      default: false
      type: public abstract
      returnType: "byte[]"
    getOffset():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[], int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
    of(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    open():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayInputStream
    putTo(java.nio.ByteBuffer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        buffer:
          annotation:
            - NotNull
          type: java.nio.ByteBuffer
    slice(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        start:
          annotation: []
          type: int
        end:
          annotation: []
          type: int
    subSequence(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    take(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        "n":
          annotation: []
          type: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    writeTo(java.io.OutputStream):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        output:
          annotation:
            - NotNull
          type: java.io.OutputStream
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.ByteSequence$Companion
net.corda.core.utilities.ByteSequence$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[], int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
    of(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
net.corda.core.utilities.EncodingUtils:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    base58ToByteArray(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "byte[]"
      params:
        $this$base58ToByteArray:
          annotation:
            - NotNull
          type: String
    base58ToRealString(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$base58ToRealString:
          annotation:
            - NotNull
          type: String
    base58toBase64(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$base58toBase64:
          annotation:
            - NotNull
          type: String
    base58toHex(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$base58toHex:
          annotation:
            - NotNull
          type: String
    base64ToByteArray(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "byte[]"
      params:
        $this$base64ToByteArray:
          annotation:
            - NotNull
          type: String
    base64ToRealString(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$base64ToRealString:
          annotation:
            - NotNull
          type: String
    base64toBase58(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$base64toBase58:
          annotation:
            - NotNull
          type: String
    base64toHex(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$base64toHex:
          annotation:
            - NotNull
          type: String
    hexToBase58(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$hexToBase58:
          annotation:
            - NotNull
          type: String
    hexToBase64(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$hexToBase64:
          annotation:
            - NotNull
          type: String
    hexToByteArray(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "byte[]"
      params:
        $this$hexToByteArray:
          annotation:
            - NotNull
          type: String
    hexToRealString(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$hexToRealString:
          annotation:
            - NotNull
          type: String
    parsePublicKeyBase58(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.security.PublicKey
      params:
        base58String:
          annotation:
            - NotNull
          type: String
    toBase58(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$toBase58:
          annotation:
            - NotNull
          type: "byte[]"
    toBase58String(java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$toBase58String:
          annotation:
            - NotNull
          type: java.security.PublicKey
    toBase64(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$toBase64:
          annotation:
            - NotNull
          type: "byte[]"
    toHex(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$toHex:
          annotation:
            - NotNull
          type: "byte[]"
    toSHA256Bytes(java.security.PublicKey):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: "byte[]"
      params:
        $this$toSHA256Bytes:
          annotation:
            - NotNull
          type: java.security.PublicKey
  fields:
    MAX_HASH_HEX_SIZE:
      annotation: []
      type: public static final int
      initialised value: 130
net.corda.core.utilities.Id:
  annotations: []
  type: public class
  extends: null
  implements: []
  interface: false
  methods:
    equals(Object):
      annotations: []
      default: false
      type: public final
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getEntityType():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: String
    getTimestamp():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.time.Instant
    getValue():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: VALUE
    hashCode():
      annotations: []
      default: false
      type: public final
      returnType: int
    newInstance(V, String, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.Id<V>
      params:
        value:
          annotation:
            - NotNull
          type: V
        entityType:
          annotation:
            - Nullable
          type: String
        timestamp:
          annotation:
            - NotNull
          type: java.time.Instant
    toString():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.Id$Companion
net.corda.core.utilities.Id$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    newInstance(V, String, java.time.Instant):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Id<V>
      params:
        value:
          annotation:
            - NotNull
          type: V
        entityType:
          annotation:
            - Nullable
          type: String
        timestamp:
          annotation:
            - NotNull
          type: java.time.Instant
net.corda.core.utilities.KotlinUtilsKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    contextLogger(Object):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: org.slf4j.Logger
      params:
        $this$contextLogger:
          annotation:
            - NotNull
          type: Object
    debug(org.slf4j.Logger, kotlin.jvm.functions.Function0<String>):
      annotations: []
      default: false
      type: public static final
      returnType: void
      params:
        $this$debug:
          annotation:
            - NotNull
          type: org.slf4j.Logger
        msg:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<String>
    detailedLogger():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: org.slf4j.Logger
    exactAdd(int, int):
      annotations: []
      default: false
      type: public static final
      returnType: int
      params:
        $this$exactAdd:
          annotation: []
          type: int
        b:
          annotation: []
          type: int
    exactAdd(long, long):
      annotations: []
      default: false
      type: public static final
      returnType: long
      params:
        $this$exactAdd:
          annotation: []
          type: long
        b:
          annotation: []
          type: long
    getDays(int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.time.Duration
      params:
        $this$days:
          annotation: []
          type: int
    getHours(int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.time.Duration
      params:
        $this$hours:
          annotation: []
          type: int
    getMillis(int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.time.Duration
      params:
        $this$millis:
          annotation: []
          type: int
    getMinutes(int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.time.Duration
      params:
        $this$minutes:
          annotation: []
          type: int
    getOrThrow(java.util.concurrent.Future<V>, java.time.Duration):
      annotations: []
      default: false
      type: public static final
      returnType: V
      params:
        $this$getOrThrow:
          annotation:
            - NotNull
          type: java.util.concurrent.Future<V>
        timeout:
          annotation:
            - Nullable
          type: java.time.Duration
    getSeconds(int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: java.time.Duration
      params:
        $this$seconds:
          annotation: []
          type: int
    loggerFor():
      annotations: []
      default: false
      type: public static final synthetic
      returnType: org.slf4j.Logger
    toNonEmptySet(java.util.Collection<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.NonEmptySet<T>
      params:
        $this$toNonEmptySet:
          annotation:
            - NotNull
          type: java.util.Collection<? extends T>
    trace(org.slf4j.Logger, kotlin.jvm.functions.Function0<String>):
      annotations: []
      default: false
      type: public static final
      returnType: void
      params:
        $this$trace:
          annotation:
            - NotNull
          type: org.slf4j.Logger
        msg:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<String>
    transient(kotlin.jvm.functions.Function0<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.PropertyDelegate<T>
      params:
        initializer:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<? extends T>
net.corda.core.utilities.NetworkHostAndPort:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    component2():
      annotations: []
      default: false
      type: public final
      returnType: int
    copy(String, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.NetworkHostAndPort
      params:
        host:
          annotation:
            - NotNull
          type: String
        port:
          annotation: []
          type: int
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getHost():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: String
    getPort():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    parse(String):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.NetworkHostAndPort
      params:
        str:
          annotation:
            - NotNull
          type: String
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.NetworkHostAndPort$Companion
    INVALID_PORT_FORMAT:
      annotation:
        - NotNull
      type: public static final String
      initialised value: "Invalid port: %s"
    UNPARSEABLE_ADDRESS_FORMAT:
      annotation:
        - NotNull
      type: public static final String
      initialised value: "Unparseable address: %s"
    MISSING_PORT_FORMAT:
      annotation:
        - NotNull
      type: public static final String
      initialised value: "Missing port: %s"
net.corda.core.utilities.NetworkHostAndPort$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    parse(String):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.NetworkHostAndPort
      params:
        str:
          annotation:
            - NotNull
          type: String
net.corda.core.utilities.NonEmptySet:
  annotations: []
  type: public final class
  extends: null
  implements:
    - java.util.Set
    - kotlin.jvm.internal.markers.KMappedMarker
  interface: false
  methods:
    add(T):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        element:
          annotation: []
          type: T
    addAll(java.util.Collection<? extends T>):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        elements:
          annotation: []
          type: java.util.Collection<? extends T>
    clear():
      annotations: []
      default: false
      type: public
      returnType: void
    contains(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        element:
          annotation: []
          type: Object
    containsAll(java.util.Collection<?>):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        elements:
          annotation:
            - NotNull
          type: java.util.Collection<?>
    copyOf(java.util.Collection<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.NonEmptySet<T>
      params:
        elements:
          annotation:
            - NotNull
          type: java.util.Collection<? extends T>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    forEach(java.util.function.Consumer<? super T>):
      annotations: []
      default: false
      type: public
      returnType: void
      params:
        action:
          annotation:
            - NotNull
          type: java.util.function.Consumer<? super T>
    getSize():
      annotations: []
      default: false
      type: public
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    head():
      annotations: []
      default: false
      type: public final
      returnType: T
    isEmpty():
      annotations: []
      default: false
      type: public
      returnType: boolean
    iterator():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Iterator<T>
    of(T):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.NonEmptySet<T>
      params:
        element:
          annotation: []
          type: T
    of(T, T, T[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.NonEmptySet<T>
      params:
        first:
          annotation: []
          type: T
        second:
          annotation: []
          type: T
        rest:
          annotation:
            - NotNull
          type: "T[]"
    parallelStream():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.stream.Stream<T>
    remove(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        element:
          annotation: []
          type: Object
    removeAll(java.util.Collection<?>):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        elements:
          annotation: []
          type: java.util.Collection<?>
    retainAll(java.util.Collection<?>):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        elements:
          annotation: []
          type: java.util.Collection<?>
    spliterator():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.Spliterator<T>
    stream():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: java.util.stream.Stream<T>
    toArray():
      annotations: []
      default: false
      type: public
      returnType: "Object[]"
    toArray(T[]):
      annotations: []
      default: false
      type: public
      returnType: "T[]"
      params:
        array:
          annotation: []
          type: "T[]"
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.NonEmptySet$Companion
net.corda.core.utilities.NonEmptySet$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    copyOf(java.util.Collection<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.NonEmptySet<T>
      params:
        elements:
          annotation:
            - NotNull
          type: java.util.Collection<? extends T>
    of(T):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.NonEmptySet<T>
      params:
        element:
          annotation: []
          type: T
    of(T, T, T[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.NonEmptySet<T>
      params:
        first:
          annotation: []
          type: T
        second:
          annotation: []
          type: T
        rest:
          annotation:
            - NotNull
          type: "T[]"
net.corda.core.utilities.OpaqueBytes:
  annotations:
    - CordaSerializable
  type: public class
  extends: java.lang.Comparable<net.corda.core.utilities.ByteSequence>
  implements: []
  interface: false
  methods:
    compareTo(net.corda.core.utilities.ByteSequence):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
    copy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
    copyBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    getOffset():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[], int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
    of(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    open():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayInputStream
    putTo(java.nio.ByteBuffer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        buffer:
          annotation:
            - NotNull
          type: java.nio.ByteBuffer
    slice(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        start:
          annotation: []
          type: int
        end:
          annotation: []
          type: int
    subSequence(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    take(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        "n":
          annotation: []
          type: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    writeTo(java.io.OutputStream):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        output:
          annotation:
            - NotNull
          type: java.io.OutputStream
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.OpaqueBytes$Companion
net.corda.core.utilities.OpaqueBytes$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.OpaqueBytes
      params:
        b:
          annotation:
            - NotNull
          type: "byte[]"
net.corda.core.utilities.OpaqueBytesSubSequence:
  annotations: []
  type: public final class
  extends: java.lang.Comparable<net.corda.core.utilities.ByteSequence>
  implements: []
  interface: false
  methods:
    compareTo(net.corda.core.utilities.ByteSequence):
      annotations: []
      default: false
      type: public
      returnType: int
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ByteSequence
    copy():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
    copyBytes():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "byte[]"
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getBytes():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "byte[]"
    getOffset():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSize():
      annotations: []
      default: false
      type: public final
      returnType: int
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    of(byte[]):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
    of(byte[], int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
    of(byte[], int, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        bytes:
          annotation:
            - NotNull
          type: "byte[]"
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    open():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.io.ByteArrayInputStream
    putTo(java.nio.ByteBuffer):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        buffer:
          annotation:
            - NotNull
          type: java.nio.ByteBuffer
    slice(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.nio.ByteBuffer
      params:
        start:
          annotation: []
          type: int
        end:
          annotation: []
          type: int
    subSequence(int, int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        offset:
          annotation: []
          type: int
        size:
          annotation: []
          type: int
    take(int):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ByteSequence
      params:
        "n":
          annotation: []
          type: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    writeTo(java.io.OutputStream):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        output:
          annotation:
            - NotNull
          type: java.io.OutputStream
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.ByteSequence$Companion
net.corda.core.utilities.ProgressTracker:
  annotations:
    - CordaSerializable
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    endWithError(Throwable):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        error:
          annotation:
            - NotNull
          type: Throwable
    getAllSteps():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.List<kotlin.Pair<Integer, net.corda.core.utilities.ProgressTracker$Step>>"
    getAllStepsLabels():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "java.util.List<kotlin.Pair<Integer, String>>"
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getChildProgressTracker(net.corda.core.utilities.ProgressTracker$Step):
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
      params:
        step:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ProgressTracker$Step
    getCurrentStep():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker$Step
    getCurrentStepRecursive():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker$Step
    getHasEnded():
      annotations: []
      default: false
      type: public final
      returnType: boolean
    getParent():
      annotations:
        - Nullable
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
    getStepIndex():
      annotations: []
      default: false
      type: public final
      returnType: int
    getSteps():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "net.corda.core.utilities.ProgressTracker$Step[]"
    getStepsTreeChanges():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: "rx.Observable<java.util.List<kotlin.Pair<Integer, String>>>"
    getStepsTreeIndex():
      annotations: []
      default: false
      type: public final
      returnType: int
    getStepsTreeIndexChanges():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: rx.Observable<Integer>
    getTopLevelTracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
    nextStep():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker$Step
    setChildProgressTracker(net.corda.core.utilities.ProgressTracker$Step, net.corda.core.utilities.ProgressTracker):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        step:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ProgressTracker$Step
        childProgressTracker:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ProgressTracker
    setCurrentStep(net.corda.core.utilities.ProgressTracker$Step):
      annotations: []
      default: false
      type: public final
      returnType: void
      params:
        value:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ProgressTracker$Step
net.corda.core.utilities.ProgressTracker$Change:
  annotations:
    - CordaSerializable
  type: public abstract static class
  extends: null
  implements: []
  interface: false
  methods:
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
net.corda.core.utilities.ProgressTracker$Change$Position:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Change
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker$Step
    copy(net.corda.core.utilities.ProgressTracker, net.corda.core.utilities.ProgressTracker$Step):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker$Change$Position
      params:
        tracker:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ProgressTracker
        newStep:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ProgressTracker$Step
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getNewStep():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker$Step
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
    getTracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.utilities.ProgressTracker$Change$Rendering:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Change
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker$Step
    copy(net.corda.core.utilities.ProgressTracker, net.corda.core.utilities.ProgressTracker$Step):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker$Change$Rendering
      params:
        tracker:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ProgressTracker
        ofStep:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ProgressTracker$Step
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getOfStep():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker$Step
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
    getTracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.utilities.ProgressTracker$Change$Structural:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Change
  implements: []
  interface: false
  methods:
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
    component2():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker$Step
    copy(net.corda.core.utilities.ProgressTracker, net.corda.core.utilities.ProgressTracker$Step):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker$Change$Structural
      params:
        tracker:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ProgressTracker
        parent:
          annotation:
            - NotNull
          type: net.corda.core.utilities.ProgressTracker$Step
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getParent():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker$Step
    getProgressTracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
    getTracker():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.ProgressTracker
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
net.corda.core.utilities.ProgressTracker$DONE:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.ProgressTracker$DONE
net.corda.core.utilities.ProgressTracker$STARTING:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.ProgressTracker$STARTING
net.corda.core.utilities.ProgressTracker$Step:
  annotations:
    - CordaSerializable
  type: public static class
  extends: null
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
net.corda.core.utilities.ProgressTracker$UNSTARTED:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.ProgressTracker$Step
  implements: []
  interface: false
  methods:
    childProgressTracker():
      annotations:
        - Nullable
      default: false
      type: public
      returnType: net.corda.core.utilities.ProgressTracker
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    getChanges():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: rx.Observable<net.corda.core.utilities.ProgressTracker$Change>
    getExtraAuditData():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: "java.util.Map<String, String>"
    getLabel():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
  fields:
    INSTANCE:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.ProgressTracker$UNSTARTED
net.corda.core.utilities.PropertyDelegate:
  annotations: []
  type: public interface
  extends: []
  interface: true
  methods:
    getValue(Object, kotlin.reflect.KProperty<?>):
      annotations: []
      default: false
      type: public abstract
      returnType: T
      params:
        thisRef:
          annotation:
            - Nullable
          type: Object
        property:
          annotation:
            - NotNull
          type: kotlin.reflect.KProperty<?>
net.corda.core.utilities.ThreadDumpUtilsKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    asString(management.ThreadInfo, int):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
      params:
        $this$asString:
          annotation:
            - NotNull
          type: management.ThreadInfo
        maxFrames:
          annotation: []
          type: int
    threadDumpAsString():
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: String
net.corda.core.utilities.Try:
  annotations:
    - CordaSerializable
  type: public abstract class
  extends: null
  implements: []
  interface: false
  methods:
    combine(net.corda.core.utilities.Try<? extends B>, kotlin.jvm.functions.Function2<? super A, ? super B, ? extends C>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<C>
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.Try<? extends B>
        function:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function2<? super A, ? super B, ? extends C>"
    doOnFailure(java.util.function.Consumer<Throwable>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<A>
      params:
        action:
          annotation:
            - NotNull
          type: java.util.function.Consumer<Throwable>
    doOnSuccess(java.util.function.Consumer<? super A>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<A>
      params:
        action:
          annotation:
            - NotNull
          type: java.util.function.Consumer<? super A>
    flatMap(kotlin.jvm.functions.Function1<? super A, ? extends net.corda.core.utilities.Try<? extends B>>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<B>
      params:
        function:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super A, ? extends net.corda.core.utilities.Try<?\
            \ extends B>>"
    getOrThrow():
      annotations: []
      default: false
      type: public abstract
      returnType: A
    isFailure():
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
    isSuccess():
      annotations: []
      default: false
      type: public abstract
      returnType: boolean
    map(kotlin.jvm.functions.Function1<? super A, ? extends B>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<B>
      params:
        function:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super A, ? extends B>"
    on(kotlin.jvm.functions.Function0<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.Try<T>
      params:
        body:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<? extends T>
    throwError():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<A>
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.Try$Companion
net.corda.core.utilities.Try$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    on(kotlin.jvm.functions.Function0<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<T>
      params:
        body:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<? extends T>
net.corda.core.utilities.Try$Failure:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.Try<A>
  implements: []
  interface: false
  methods:
    combine(net.corda.core.utilities.Try<? extends B>, kotlin.jvm.functions.Function2<? super A, ? super B, ? extends C>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<C>
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.Try<? extends B>
        function:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function2<? super A, ? super B, ? extends C>"
    component1():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Throwable
    copy(Throwable):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try$Failure<A>
      params:
        exception:
          annotation:
            - NotNull
          type: Throwable
    doOnFailure(java.util.function.Consumer<Throwable>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<A>
      params:
        action:
          annotation:
            - NotNull
          type: java.util.function.Consumer<Throwable>
    doOnSuccess(java.util.function.Consumer<? super A>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<A>
      params:
        action:
          annotation:
            - NotNull
          type: java.util.function.Consumer<? super A>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    flatMap(kotlin.jvm.functions.Function1<? super A, ? extends net.corda.core.utilities.Try<? extends B>>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<B>
      params:
        function:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super A, ? extends net.corda.core.utilities.Try<?\
            \ extends B>>"
    getException():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: Throwable
    getOrThrow():
      annotations: []
      default: false
      type: public
      returnType: A
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isFailure():
      annotations: []
      default: false
      type: public
      returnType: boolean
    isSuccess():
      annotations: []
      default: false
      type: public
      returnType: boolean
    map(kotlin.jvm.functions.Function1<? super A, ? extends B>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<B>
      params:
        function:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super A, ? extends B>"
    on(kotlin.jvm.functions.Function0<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.Try<T>
      params:
        body:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<? extends T>
    throwError():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<A>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.Try$Companion
net.corda.core.utilities.Try$Success:
  annotations:
    - CordaSerializable
  type: public static final class
  extends: net.corda.core.utilities.Try<A>
  implements: []
  interface: false
  methods:
    combine(net.corda.core.utilities.Try<? extends B>, kotlin.jvm.functions.Function2<? super A, ? super B, ? extends C>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<C>
      params:
        other:
          annotation:
            - NotNull
          type: net.corda.core.utilities.Try<? extends B>
        function:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function2<? super A, ? super B, ? extends C>"
    component1():
      annotations: []
      default: false
      type: public final
      returnType: A
    copy(A):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try$Success<A>
      params:
        value:
          annotation: []
          type: A
    doOnFailure(java.util.function.Consumer<Throwable>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<A>
      params:
        action:
          annotation:
            - NotNull
          type: java.util.function.Consumer<Throwable>
    doOnSuccess(java.util.function.Consumer<? super A>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<A>
      params:
        action:
          annotation:
            - NotNull
          type: java.util.function.Consumer<? super A>
    equals(Object):
      annotations: []
      default: false
      type: public
      returnType: boolean
      params:
        other:
          annotation:
            - Nullable
          type: Object
    flatMap(kotlin.jvm.functions.Function1<? super A, ? extends net.corda.core.utilities.Try<? extends B>>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<B>
      params:
        function:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super A, ? extends net.corda.core.utilities.Try<?\
            \ extends B>>"
    getOrThrow():
      annotations: []
      default: false
      type: public
      returnType: A
    getValue():
      annotations: []
      default: false
      type: public final
      returnType: A
    hashCode():
      annotations: []
      default: false
      type: public
      returnType: int
    isFailure():
      annotations: []
      default: false
      type: public
      returnType: boolean
    isSuccess():
      annotations: []
      default: false
      type: public
      returnType: boolean
    map(kotlin.jvm.functions.Function1<? super A, ? extends B>):
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<B>
      params:
        function:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super A, ? extends B>"
    on(kotlin.jvm.functions.Function0<? extends T>):
      annotations:
        - NotNull
      default: false
      type: public static final
      returnType: net.corda.core.utilities.Try<T>
      params:
        body:
          annotation:
            - NotNull
          type: kotlin.jvm.functions.Function0<? extends T>
    throwError():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: net.corda.core.utilities.Try<A>
    toString():
      annotations:
        - NotNull
      default: false
      type: public
      returnType: String
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.Try$Companion
net.corda.core.utilities.UntrustworthyData:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    getFromUntrustedWorld():
      annotations: []
      default: false
      type: public final
      returnType: T
    unwrap(net.corda.core.utilities.UntrustworthyData$Validator<? super T, ? extends R>):
      annotations:
        - Suspendable
      default: false
      type: public final
      returnType: R
      params:
        validator:
          annotation:
            - NotNull
          type: "net.corda.core.utilities.UntrustworthyData$Validator<? super T, ?\
            \ extends R>"
net.corda.core.utilities.UntrustworthyData$Validator:
  annotations: []
  type: public static interface
  extends:
    - java.io.Serializable
  interface: true
  methods:
    validate(T):
      annotations:
        - Suspendable
      default: false
      type: public abstract
      returnType: R
      params:
        data:
          annotation: []
          type: T
net.corda.core.utilities.UntrustworthyDataKt:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods:
    unwrap(net.corda.core.utilities.UntrustworthyData<? extends T>, kotlin.jvm.functions.Function1<? super T, ? extends R>):
      annotations: []
      default: false
      type: public static final
      returnType: R
      params:
        $this$unwrap:
          annotation:
            - NotNull
          type: net.corda.core.utilities.UntrustworthyData<? extends T>
        validator:
          annotation:
            - NotNull
          type: "kotlin.jvm.functions.Function1<? super T, ? extends R>"
net.corda.core.utilities.UuidGenerator:
  annotations: []
  type: public final class
  extends: null
  implements: []
  interface: false
  methods: {}
  fields:
    Companion:
      annotation:
        - NotNull
      type: public static final net.corda.core.utilities.UuidGenerator$Companion
net.corda.core.utilities.UuidGenerator$Companion:
  annotations: []
  type: public static final class
  extends: null
  implements: []
  interface: false
  methods:
    next():
      annotations:
        - NotNull
      default: false
      type: public final
      returnType: java.util.UUID
net.corda.core.utilities.VariablePropertyDelegate:
  annotations: []
  type: public interface
  extends:
    - net.corda.core.utilities.PropertyDelegate
  interface: true
  methods:
    getValue(Object, kotlin.reflect.KProperty<?>):
      annotations: []
      default: false
      type: public abstract
      returnType: T
      params:
        thisRef:
          annotation:
            - Nullable
          type: Object
        property:
          annotation:
            - NotNull
          type: kotlin.reflect.KProperty<?>
    setValue(Object, kotlin.reflect.KProperty<?>, T):
      annotations: []
      default: false
      type: public abstract
      returnType: void
      params:
        thisRef:
          annotation:
            - Nullable
          type: Object
        property:
          annotation:
            - NotNull
          type: kotlin.reflect.KProperty<?>
        value:
          annotation: []
          type: T