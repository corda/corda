apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources {
            srcDir file('src/integration-test/resources')
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    if (System.getProperty('excludeShell') == null) {
        cordaDriver "net.corda:corda-shell:$corda_shell_version"
    }

    cordaProvided project(':core')
    cordaProvided project(':node')
    cordaProvided project(':client:rpc')
    cordaProvided project(':core-test-utils')
    implementation project(':test-utils')

    implementation "net.sf.jopt-simple:jopt-simple:$jopt_simple_version"

    cordaBootstrapper "org.slf4j:slf4j-simple:$slf4j_version"
    cordaBootstrapper project(":node-api")

    // Corda integration dependencies
    corda project(path: ":node:capsule", configuration: 'runtimeArtifacts')

    // The trader demo CorDapp depends upon Cash CorDapp features
    cordapp project(':finance:contracts')
    cordapp project(':finance:workflows')
    cordapp project(':samples:trader-demo:workflows-trader')

    implementation "org.slf4j:slf4j-api:$slf4j_version"

    testImplementation "org.slf4j:slf4j-simple:$slf4j_version"
    testImplementation(project(':node-driver')) {
        // We already have a SLF4J implementation on our runtime classpath,
        // and we don't need another one.
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j2-impl'
    }

    testImplementation "io.reactivex:rxjava:$rxjava_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
    testImplementation "junit:junit:$junit_version"

    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junit_vintage_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junit_platform_version}"

    testImplementation "org.assertj:assertj-core:$assertj_version"
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

configurations.cordaCordapp.canBeResolved = true
task deployNodes(type: net.corda.plugins.Cordform) {
    def users = [['username': "demo", 'password': "demo", 'permissions': ["ALL"]]]
    nodeDefaults {
        projectCordapp {
            deploy = false // TODO This is a bug, project cordapp should be disabled if no cordapp plugin is applied.
        }
        cordapp project(':finance:workflows')
        cordapp project(':finance:contracts')
        cordapp project(':samples:trader-demo:workflows-trader')
        runSchemaMigration = true
    }
    node {
        name "O=Notary Node,L=Zurich,C=CH"
        notary = [validating : true,
                  serviceLegalName: "O=Notary Service,L=Zurich,C=CH"
        ]
        p2pPort 10002
        rpcSettings {
            address "localhost:10003"
            adminAddress "localhost:10004"
        }
        extraConfig = ['h2Settings.address' : 'localhost:10014']
    }
    node {
        name "O=Bank A,L=London,C=GB"
        p2pPort 10005
        rpcUsers = users
        rpcSettings {
            address "localhost:10006"
            adminAddress "localhost:10007"
        }
        extraConfig = ['h2Settings.address' : 'localhost:10015']
    }
    node {
        name "O=Bank B,L=New York,C=US"
        p2pPort 10008
        rpcUsers = users
        rpcSettings {
            address "localhost:10009"
            adminAddress "localhost:10010"
        }
        extraConfig = ['h2Settings.address' : 'localhost:10016']
    }
    node {
        name "O=BankOfCorda,L=New York,C=US"
        p2pPort 10011
        rpcUsers = users
        rpcSettings {
            address "localhost:10012"
            adminAddress "localhost:10013"
        }
        extraConfig = ['h2Settings.address' : 'localhost:10017']
    }
    
    //All other nodes should be using LoggingBuyerFlow as it is a subclass of BuyerFlow
    node {
        name "O=NonLogging Bank,L=London,C=GB"
        p2pPort 10025
        rpcUsers = users
        rpcSettings {
            address "localhost:10026"
            adminAddress "localhost:10027"
        }
        extraConfig = ['h2Settings.address' : 'localhost:10035']
        flowOverride("net.corda.traderdemo.flow.SellerFlow", "net.corda.traderdemo.flow.BuyerFlow")
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

idea {
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

task runBank(type: JavaExec, dependsOn: jar) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'net.corda.traderdemo.TraderDemoKt'
    args '--role'
    args 'BANK'
}

task runSeller(type: JavaExec, dependsOn: jar) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'net.corda.traderdemo.TraderDemoKt'
    args '--role'
    args 'SELLER'
}
