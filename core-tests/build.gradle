apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.kotlin.plugin.jpa'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'idea'

description 'Corda core tests'

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

    smokeTestImplementation.extendsFrom implementation
    smokeTestRuntimeOnly.extendsFrom runtimeOnly

    testArtifacts.extendsFrom testRuntimeOnlyClasspath

    corda4_11
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
    }
    smokeTest {
        kotlin {
            // We must NOT have any Node code on the classpath, so do NOT
            // include the test or integrationTest dependencies here.
            srcDir file('src/smoke-test/kotlin')
        }
        java {
            srcDir file('src/smoke-test/java')
        }
    }
}

processSmokeTestResources {
    // Bring in the fully built corda.jar for use by NodeFactory in the smoke tests
    from(tasks.getByPath(":node:capsule:buildCordaJAR")) {
        rename 'corda-(.*)', 'corda.jar'
    }
    from(tasks.getByPath(":finance:workflows:jar")) {
        rename 'corda-finance-workflows-.*.jar', 'corda-finance-workflows.jar'
    }
    from(tasks.getByPath(":finance:contracts:jar")) {
        rename 'corda-finance-contracts-.*.jar', 'corda-finance-contracts.jar'
    }
    from(tasks.getByPath(":testing:cordapps:4.11-workflows:jar"))
    from(configurations.corda4_11) {
        rename 'jackson-core-.*.jar', 'jackson-core.jar'
    }
    from(tasks.getByPath(":legacy411:jar")) {
        rename 'legacy411-.*.jar', 'legacy411.jar'
    }
    from(tasks.getByPath(":legacy412:jar")) {
        rename 'legacy412-.*.jar', 'legacy412.jar'
    }
}

processIntegrationTestResources {
    from(tasks.getByPath(":finance:contracts:jar")) {
        rename 'corda-finance-contracts-.*.jar', 'corda-finance-contracts.jar'
    }
    from(configurations.corda4_11)
}

processTestResources {
    from(configurations.corda4_11)
}

dependencies {
    testImplementation project(":core")
    testImplementation project(":serialization")
    testImplementation project(":finance:contracts")
    testImplementation project(":finance:workflows")
    testImplementation project(":node")
    testImplementation project(":node-api")
    testImplementation project(":client:rpc")
    testImplementation project(":common-configuration-parsing")
    testImplementation project(":core-test-utils")
    testImplementation project(":test-utils")
    testImplementation project(":node-driver")
    // used by FinalityFlowTests
    testImplementation project(':testing:cordapps:cashobservers')
    testImplementation(project(path: ':core', configuration: 'testArtifacts')) {
        transitive = false
    }
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.apache.commons:commons-fileupload2-jakarta:$fileupload_version"
    // Guava: Google test library (collections test suite)
    testImplementation "com.google.guava:guava-testlib:$guava_version"
    testImplementation "com.google.jimfs:jimfs:1.1"
    testImplementation "com.typesafe:config:$typesafe_config_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    // Hamkrest, for fluent, composable matchers
    testImplementation "com.natpryce:hamkrest:$hamkrest_version"
    testImplementation 'org.hamcrest:hamcrest-library:2.1'
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    // AssertJ: for fluent assertions for testing
    testImplementation "org.assertj:assertj-core:${assertj_version}"
    // Guava: Google utilities library.
    testImplementation "com.google.guava:guava:$guava_version"
    testImplementation "com.esotericsoftware:kryo:$kryo_version"
    testImplementation "co.paralleluniverse:quasar-core:$quasar_version"
    testImplementation "org.hibernate:hibernate-core:$hibernate_version"
    testImplementation "org.bouncycastle:bcprov-lts8on:${bouncycastle_version}"
    testImplementation "io.netty:netty-common:$netty_version"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "io.dropwizard.metrics:metrics-jmx:$metrics_version"

    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junit_vintage_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junit_platform_version}"

    // Smoke tests do NOT have any Node code on the classpath!
    smokeTestImplementation project(":core")
    smokeTestImplementation project(":node-api")
    smokeTestImplementation project(":client:rpc")
    smokeTestImplementation project(':smoke-test-utils')
    smokeTestImplementation project(':core-test-utils')
    smokeTestImplementation project(":finance:workflows")
    smokeTestImplementation project(":testing:cordapps:4.11-workflows")
    smokeTestImplementation project(":finance:contracts")
    smokeTestImplementation project(":legacy411")
    smokeTestImplementation project(":legacy412")
    smokeTestImplementation "org.assertj:assertj-core:${assertj_version}"
    smokeTestImplementation "org.bouncycastle:bcprov-lts8on:${bouncycastle_version}"
    smokeTestImplementation "co.paralleluniverse:quasar-core:$quasar_version"
    smokeTestImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
    smokeTestImplementation "junit:junit:$junit_version"

    smokeTestRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junit_vintage_version}"
    smokeTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}"
    smokeTestRuntimeOnly "org.junit.platform:junit-platform-launcher:${junit_platform_version}"
    smokeTestRuntimeOnly "org.slf4j:slf4j-simple:$slf4j_version"

    corda4_11 "net.corda:corda-finance-contracts:4.11"
    corda4_11 "net.corda:corda-finance-workflows:4.11"
    corda4_11 "net.corda:corda:4.11"
    corda4_11 "com.fasterxml.jackson.core:jackson-core:2.17.2"
}

tasks.withType(Test).configureEach {
    // fork a new test process for every test class
    forkEvery = 10
}

tasks.register('testJar', Jar) {
    classifier "tests"
    from sourceSets.test.output
}

tasks.register('integrationTest', Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.register('smokeTestJar', Jar) {
    classifier 'smokeTests'
    from(sourceSets.smokeTest.output) {
        exclude("*.jar")
    }
}

tasks.register('smokeTest', Test) {
    dependsOn smokeTestJar
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

// quasar exclusions upon agent code instrumentation at run-time
quasar {
    excludePackages.addAll(
            "antlr**",
            "com.codahale**",
            "com.fasterxml.**",
            "com.github.benmanes.caffeine.**",
            "com.google.**",
            "com.lmax.**",
            "com.zaxxer.**",
            "net.bytebuddy**",
            "io.github.classgraph**",
            "io.netty*",
            "liquibase**",
            "nonapi.io.github.classgraph.**",
            "org.apiguardian.**",
            "org.bouncycastle**",
            "org.codehaus.**",
            "org.h2**",
            "org.hibernate**",
            "org.jboss.**",
            "org.objenesis**",
            "org.w3c.**",
            "org.xml**",
            "org.yaml**",
            "rx**")
}

artifacts {
    testArtifacts testJar
}
